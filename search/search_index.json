{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to KC's Data &amp; Life Notes","text":"<p>Welcome! I'm KC (Kuan-Chou), a software engineer with a passion for data, AI, and continuous learning. This website is a space where I share my projects, learning journey, and experiences. Feel free to explore and get to know me better!</p> <ul> <li> <p> About Me</p> <p>Learn more about my background, including education, work experience, public speaking, and other activities.</p> <p> About Me</p> </li> <li> <p> Side Projects</p> <p>Explore my personal projects in data, AI, and programming.</p> <p> Side Projects</p> </li> <li> <p> Learning Plans</p> <p>A look into what I'm currently learning and planning to study next.</p> <p> Learning Plans</p> </li> <li> <p> Blog</p> <p>Read my thoughts and insights on data, AI, books, and more.</p> <p> Blog</p> </li> </ul>"},{"location":"about-me/","title":"About Me","text":"<p>I'm a data-driven problem solver with experience in data engineering, machine learning, and public speaking. I enjoy turning complex ideas into actionable solutions and am always looking to grow\u2014both personally and professionally. Learn more about my background, skills, and what drives me.</p>"},{"location":"about-me/#work-experience","title":"Work Experience","text":"Period Role Company Type Link May 2024 - Sep 2024 Data Engineer UST Global Full-time, Remote Jun 2021 - Feb 2024 Data Engineer TVBS Media Inc. Full-time, Hybrid (Taipei, Taiwan) Jun 2020 - Sep 2020 ML Researcher NinoX Contract, Remote Jul 2018 - Aug 2018 Industry Analyst Intern ITRI Intern, On-site (Hsinchu, Taiwan)"},{"location":"about-me/#education","title":"Education","text":"Period Role Institution Location Link Sep 2019 - Feb 2020 Big Data Engineering Trainee III Taipei, Taiwan Jul 2017 - May 2023 M.B.A. NCCU Taipei, Taiwan Sep 2013 - Jun 2017 B.S. Psychology CCU Chiayi, Taiwan <p>Home </p>"},{"location":"about-me/education/ccu/","title":"B.S. Psychology, CCU","text":"<p>About Me </p>"},{"location":"about-me/education/iii/","title":"Big Data Engineering Trainee, III","text":"<p>About Me </p>"},{"location":"about-me/education/nccu/","title":"M.B.A., NCCU","text":"<p>National Chengchi University</p> <p>About Me </p>"},{"location":"about-me/public-speakings/","title":"Public Speakings","text":"<p>Sharing knowledge and ideas with others is something I value deeply. Here, you can find my past speaking engagements, talks, and presentations, along with topics I'm passionate about. I'm always open to new opportunities to connect and speak.</p>"},{"location":"about-me/public-speakings/#taipei-dbt-meetup-27","title":"Taipei dbt Meetup #27","text":""},{"location":"about-me/public-speakings/#devopsdays-taipei-2024","title":"DevOpsDays Taipei 2024","text":"<p>About Me </p>"},{"location":"about-me/work-experience/itri/itri/","title":"Industry Analyst Intern, ITRI","text":"<p>Abstract</p> <p>Researched and analyzed the 7 key roles (DSP, SSP, DMP etc.) within the \"AdTech industry\", using \"eLand Information\", a leading AI &amp; Data Analytics company in Taiwan, as a case study to predict future industry trends and propose strategies.</p> <p>Abstract</p> <p>Analyzed technical trends within the cloud services industry, contributing to the authorship of 2 research articles on the subject.</p> <p>Abstract</p> <p>Systematized and summarized 100+ benchmark cases in the 4 major domains of IoT \u2013 water resources, air quality, earthquakes, and disaster prevention.</p> <p>About Me </p>"},{"location":"about-me/work-experience/ninox/ninox/","title":"ML Researcher, NinoX","text":""},{"location":"about-me/work-experience/ninox/ninox/#the-obi-ctr-model","title":"The obi-CTR model","text":"<p>Abstract</p> <p>Developed the Online Bayesian Inference (OBI) algorithm for the Collaborative Topic Regression (CTR) model\u2014a hybrid system combining Collaborative Filtering and Topic Modeling\u2014using Python with robust OOP design, while leveraging NumPy and SciPy for scalable, real-time recommendations.</p>"},{"location":"about-me/work-experience/ninox/ninox/#23-boost-in-computational-efficiency","title":"23% boost in computational efficiency","text":"<p>Abstract</p> <p>Achieved a 23% boost in computational efficiency by speeding up the MCMC sampling core with Cython.</p>"},{"location":"about-me/work-experience/ninox/ninox/#cicd-pipelines-with-travisci","title":"CI/CD pipelines with TravisCI","text":"<p>Abstract</p> <p>Established CI/CD pipelines with TravisCI for automated unit tests and a docs-as-code workflow using pytest and Sphinx, streamlining both development and documentation processes and ensuring consistent release quality</p> <p></p> <p>About Me </p>"},{"location":"about-me/work-experience/tvbs/tvbs/","title":"Data Engineer, TVBS Media Inc.","text":"Organization Diagram"},{"location":"about-me/work-experience/tvbs/tvbs/#cost-effective-scalable-etlelt-modern-data-stack","title":"Cost-effective, scalable ETL/ELT Modern Data Stack","text":"<p>Abstract</p> <p>Architected a cost-effective, scalable ETL / ELT Modern Data Stack (dbt, BigQuery, Airflow, Airbyte, Looker Studio, etc.) and introduced a streamlined DataOps workflow, processing 20M+ events daily at TB+ scale (300+ data models, 600+ daily quality checks), cutting cloud costs by 63%.</p> \u21901 / 7\u2192\u26f6"},{"location":"about-me/work-experience/tvbs/tvbs/#the-organization-wide-adoption-of-data-mesh","title":"The organization-wide adoption of Data Mesh","text":"<p>Abstract</p> <p>Directed the organization-wide adoption of Data Mesh principles to strengthen data governance and improve data availability, empowering 7 domain teams through self-service reporting across 30+ data products, and achieving a previously unattainable holistic brand analysis through the expansion of data sources from 4 to 9+.</p> \u21901 / 4\u2192\u26f6"},{"location":"about-me/work-experience/tvbs/tvbs/#iac-implementation-with-terraform","title":"IaC implementation with Terraform","text":"<p>Abstract</p> <p>Led IaC implementation with Terraform for over 500 cross-cloud data assets (AWS, GCP, dbt Cloud, etc.) and conducted internal DevOps workshops, slashing provisioning lead time from days to hours by integrating CI/CD pipelines with GitHub Actions and improving team IaC adoption by 80% within 6 months.</p> \u21901 / 4\u2192\u26f6"},{"location":"about-me/work-experience/tvbs/tvbs/#the-migration-to-ga4-and-bigquery","title":"The migration to GA4 and BigQuery","text":"<p>Abstract</p> <p>Led the migration to GA4 and BigQuery to build a data lakehouse platform while maintaining a legacy event tracking pipeline (AWS Kinesis, MongoDB, PostgreSQL), saving $2M by retiring NoSQL database and ensuring real-time analytics for both anonymous and logged-in users.</p>"},{"location":"about-me/work-experience/tvbs/tvbs/#an-organization-wide-experimentation-mindset","title":"An organization-wide experimentation mindset","text":"<p>Abstract</p> <p>Championed an organization-wide experimentation mindset, engaged 60+ colleagues, and orchestrated 20+ A/B tests via Google Optimize and Firebase within 6 months, boosting mobile ad revenue by 27% and web pageviews by 6%.</p> <p>About Me </p>"},{"location":"about-me/work-experience/tvbs/slide-data-mesh/1/","title":"Challenges","text":"<ul> <li>1</li> <li>2</li> <li>3</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-data-mesh/2/","title":"Goals","text":"<ul> <li>A</li> <li>B</li> <li>C</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-data-mesh/3/","title":"Actions","text":""},{"location":"about-me/work-experience/tvbs/slide-data-mesh/4/","title":"Results","text":""},{"location":"about-me/work-experience/tvbs/slide-events-data-pipeline/deal-with-data-latency/","title":"data latency","text":""},{"location":"about-me/work-experience/tvbs/slide-events-data-pipeline/deal-with-data-latency/#situation","title":"Situation","text":"<ul> <li>Events occured on Jan. 1, but were sent to server on Jan. 3</li> <li>Latency at most 5 days</li> <li>Metrics are calculated in error due to data latency</li> <li></li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-events-data-pipeline/deal-with-data-latency/#target","title":"Target","text":""},{"location":"about-me/work-experience/tvbs/slide-events-data-pipeline/deal-with-data-latency/#actions","title":"Actions","text":""},{"location":"about-me/work-experience/tvbs/slide-events-data-pipeline/deal-with-data-latency/#result","title":"Result","text":""},{"location":"about-me/work-experience/tvbs/slide-iac/1/","title":"Challenges","text":"<ul> <li>1</li> <li>2</li> <li>3</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-iac/2/","title":"Goals","text":"<ul> <li>A</li> <li>B</li> <li>C</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-iac/3/","title":"Actions","text":""},{"location":"about-me/work-experience/tvbs/slide-iac/4/","title":"Results","text":""},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-gaps-between-teams/","title":"Challenges - Data and Upstream Teams Misaligned","text":""},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-gaps-within-team/","title":"Challenges - Analysts Rely on Engineers","text":""},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-legacy-data-stack/","title":"Challenges - Legacy Data Stack","text":""},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-summary/","title":"Challenges - Summary","text":""},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-summary/#technical","title":"Technical","text":"<ul> <li>A single VM taking on too many responsibilities</li> <li>Tightly coupled data pipelines</li> <li>Lack of software engineering best practices</li> <li>Scattered business logic across various codebases</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/1-summary/#organizational","title":"Organizational","text":"<ul> <li>Analysts rely on engineers \u2014 big technical gap</li> <li>Data and upstream teams misaligned \u2014 downstream needs ignored</li> <li>Shortage of data talent (2 members)</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/2/","title":"Goals","text":"<ul> <li>Empower more colleagues to interact more easily with a wider variety of data in more diverse ways.</li> <li>Drive down costs by streamlining workflows and reducing data friction.</li> </ul>"},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/3/","title":"Actions","text":"<ol> <li>Researched AWS-based Data Lake Architectures: Explored best practices using AWS Glue, Athena, S3, DMS, and open table formats like Iceberg, Hudi, and Delta Lake.</li> <li>Built a Minimum Viable Architecture on GCP: Delivered end-to-end analytics using Airbyte, dbt, BigQuery, and Looker Studio within a single sprint in order to deliver fast.</li> <li>Estimated and Managed Project Budget: Conducted budgeting calculations to ensure cost-effective data architecture planning and scaling.</li> <li>Rolled Out Solution to All: Successfully deployed the solution organization-wide to support broader data accessibility and insights.</li> </ol>"},{"location":"about-me/work-experience/tvbs/slide-modern-data-stack/4/","title":"Results","text":"<ol> <li>How to cut down 63%<ul> <li>Tableau -&gt; Looker Studio</li> <li>Cloud SQL -&gt; BigQuery</li> <li>VM -&gt; X</li> </ul> </li> </ol>"},{"location":"about-me/work-experience/ust/ust/","title":"Data Engineer, UST Global","text":""},{"location":"about-me/work-experience/ust/ust/#server-monitoring-solutions","title":"Server Monitoring Solutions","text":"<p>Abstract</p> <p>Built server monitoring solutions for Microsoft using Kusto (KQL) on Azure Data Explorer (ADX), Azure Monitor Log Analytics, and Azure Sentinel, delivering actionable insights via Power BI for operational excellence.</p> <p>About Me </p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"diagrams/test/","title":"Test","text":"In\u00a0[\u00a0]: Copied! <pre>from diagrams import Diagram, Edge, Cluster\nfrom diagrams.custom import Custom\nfrom diagrams.gcp.compute import GCF\nfrom diagrams.gcp.analytics import BigQuery\nfrom diagrams.gcp.storage import GCS\n</pre> from diagrams import Diagram, Edge, Cluster from diagrams.custom import Custom from diagrams.gcp.compute import GCF from diagrams.gcp.analytics import BigQuery from diagrams.gcp.storage import GCS In\u00a0[\u00a0]: Copied! <pre>from diagrams.aws.storage import S3\n</pre> from diagrams.aws.storage import S3 In\u00a0[\u00a0]: Copied! <pre>with Diagram(\"Cross Cloud Unified SQL Data Pipeline\", show=False):\n\n    with Cluster(\"GCP\"):\n        with Cluster(\"BigQuery\"):\n            bqrf_remove_html_tags = Custom(\"remove_html_tags\\n(Remote Function)\", \"../images/icons/generic/function.png\")\n            bqrm_vision = Custom(\"vision\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")\n            bqrm_onnx = Custom(\"onnx_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")\n            biglake_table = Custom(\"BigLake Table\", \"../images/icons/generic/table.png\")\n            object_table = Custom(\"Object Table\", \"../images/icons/generic/table.png\")\n\n        with Cluster(\"Google Cloud Storage\"):\n            pictures = Custom(\"*.png\", \"../images/icons/generic/pictures.png\")\n            onnx_file = Custom(\"ONNX file\", \"../images/icons/generic/ai-model-2.png\")\n\n        gcf = GCF(\"remove_html_tags\")\n        cloud_vision = Custom(\"Cloud Vision\", \"../images/icons/gcp/cloud-vision-api.png\")\n\n    with Cluster(\"AWS\", graph_attr={\"bgcolor\": \"#eeeeee\"}):\n        s3 = S3(\"*.csv\")\n\n    object_table &gt;&gt; Edge() &lt;&lt; pictures\n    bqrm_vision &gt;&gt; Edge() &lt;&lt; cloud_vision\n    bqrm_onnx &gt;&gt; Edge() &lt;&lt; onnx_file\n    bqrf_remove_html_tags &gt;&gt; Edge(label=\"1. Pass data to GCF through CONNECTION\") &gt;&gt; gcf\n    bqrf_remove_html_tags &lt;&lt; Edge(label=\"2. Pass processed data back to BQ\") &lt;&lt; gcf\n    \n    biglake_table &gt;&gt; Edge() &lt;&lt; s3\n</pre> with Diagram(\"Cross Cloud Unified SQL Data Pipeline\", show=False):      with Cluster(\"GCP\"):         with Cluster(\"BigQuery\"):             bqrf_remove_html_tags = Custom(\"remove_html_tags\\n(Remote Function)\", \"../images/icons/generic/function.png\")             bqrm_vision = Custom(\"vision\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")             bqrm_onnx = Custom(\"onnx_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")             biglake_table = Custom(\"BigLake Table\", \"../images/icons/generic/table.png\")             object_table = Custom(\"Object Table\", \"../images/icons/generic/table.png\")          with Cluster(\"Google Cloud Storage\"):             pictures = Custom(\"*.png\", \"../images/icons/generic/pictures.png\")             onnx_file = Custom(\"ONNX file\", \"../images/icons/generic/ai-model-2.png\")          gcf = GCF(\"remove_html_tags\")         cloud_vision = Custom(\"Cloud Vision\", \"../images/icons/gcp/cloud-vision-api.png\")      with Cluster(\"AWS\", graph_attr={\"bgcolor\": \"#eeeeee\"}):         s3 = S3(\"*.csv\")      object_table &gt;&gt; Edge() &lt;&lt; pictures     bqrm_vision &gt;&gt; Edge() &lt;&lt; cloud_vision     bqrm_onnx &gt;&gt; Edge() &lt;&lt; onnx_file     bqrf_remove_html_tags &gt;&gt; Edge(label=\"1. Pass data to GCF through CONNECTION\") &gt;&gt; gcf     bqrf_remove_html_tags &lt;&lt; Edge(label=\"2. Pass processed data back to BQ\") &lt;&lt; gcf          biglake_table &gt;&gt; Edge() &lt;&lt; s3 In\u00a0[\u00a0]: Copied! <pre>with Diagram(\"RAG\", show=False):\n    website = Custom(\"Website\", \"../images/icons/generic/landing-page.png\")\n    user = Custom(\"User\", \"../images/icons/generic/programmer.png\")\n    with Cluster(\"GCP\"):\n        document_ai = Custom(\"layout-parser-processor\\n(Document AI)\", \"../images/icons/gcp/document-ai.png\")\n        embedding_model = Custom(\"text-embedding-004\\n(Vertex AI)\", \"../images/icons/gcp/vertexai.png\")\n        text_model = Custom(\"gemini-1.5-flash-002\\n(Vertex AI)\", \"../images/icons/gcp/vertexai.png\")\n        with Cluster(\"BigQuery\"):\n            doc_parser_bqrm = Custom(\"doc_parser\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")\n            embedding_model_bqrm = Custom(\"embedding_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")\n            text_model_bqrm = Custom(\"text_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")\n            pdf = Custom(\"pdf\\n(Object Table)\", \"../images/icons/generic/table.png\")\n            chunked_pdf = Custom(\"chunked_pdf\", \"../images/icons/generic/table.png\")\n            parsed_pdf = Custom(\"parsed_pdf\", \"../images/icons/generic/table.png\")\n            embeddings = Custom(\"embeddings\", \"../images/icons/generic/table.png\")\n        with Cluster(\"GCS\"):\n            pdf_file = Custom(\".pdf\", \"../images/icons/generic/pdf-file.png\")\n\n        pdf &gt;&gt; Edge(color=\"red\") &gt;&gt; doc_parser_bqrm &gt;&gt; Edge(color=\"red\") &gt;&gt; chunked_pdf \\\n            &gt;&gt; Edge(color=\"red\") &gt;&gt; parsed_pdf \\\n            &gt;&gt; Edge(color=\"red\") &gt;&gt; embedding_model_bqrm &gt;&gt; Edge(color=\"red\") &gt;&gt; embeddings\n\n        text_model_bqrm &gt;&gt; Edge() &lt;&lt; text_model\n        pdf &gt;&gt; Edge() &lt;&lt; pdf_file\n        doc_parser_bqrm &gt;&gt; Edge() &lt;&lt; document_ai\n        embedding_model_bqrm &gt;&gt; Edge() &lt;&lt; embedding_model\n\n        user &gt;&gt; website &gt;&gt; Edge(color=\"green\") &gt;&gt; embedding_model_bqrm \\\n             &gt;&gt; Edge(color=\"green\") &gt;&gt; embeddings &gt;&gt; Edge(color=\"green\") &gt;&gt; text_model_bqrm\n        website &gt;&gt; Edge(color=\"green\") &gt;&gt; text_model_bqrm\n</pre> with Diagram(\"RAG\", show=False):     website = Custom(\"Website\", \"../images/icons/generic/landing-page.png\")     user = Custom(\"User\", \"../images/icons/generic/programmer.png\")     with Cluster(\"GCP\"):         document_ai = Custom(\"layout-parser-processor\\n(Document AI)\", \"../images/icons/gcp/document-ai.png\")         embedding_model = Custom(\"text-embedding-004\\n(Vertex AI)\", \"../images/icons/gcp/vertexai.png\")         text_model = Custom(\"gemini-1.5-flash-002\\n(Vertex AI)\", \"../images/icons/gcp/vertexai.png\")         with Cluster(\"BigQuery\"):             doc_parser_bqrm = Custom(\"doc_parser\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")             embedding_model_bqrm = Custom(\"embedding_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")             text_model_bqrm = Custom(\"text_model\\n(Remote Model)\", \"../images/icons/generic/ai-model.png\")             pdf = Custom(\"pdf\\n(Object Table)\", \"../images/icons/generic/table.png\")             chunked_pdf = Custom(\"chunked_pdf\", \"../images/icons/generic/table.png\")             parsed_pdf = Custom(\"parsed_pdf\", \"../images/icons/generic/table.png\")             embeddings = Custom(\"embeddings\", \"../images/icons/generic/table.png\")         with Cluster(\"GCS\"):             pdf_file = Custom(\".pdf\", \"../images/icons/generic/pdf-file.png\")          pdf &gt;&gt; Edge(color=\"red\") &gt;&gt; doc_parser_bqrm &gt;&gt; Edge(color=\"red\") &gt;&gt; chunked_pdf \\             &gt;&gt; Edge(color=\"red\") &gt;&gt; parsed_pdf \\             &gt;&gt; Edge(color=\"red\") &gt;&gt; embedding_model_bqrm &gt;&gt; Edge(color=\"red\") &gt;&gt; embeddings          text_model_bqrm &gt;&gt; Edge() &lt;&lt; text_model         pdf &gt;&gt; Edge() &lt;&lt; pdf_file         doc_parser_bqrm &gt;&gt; Edge() &lt;&lt; document_ai         embedding_model_bqrm &gt;&gt; Edge() &lt;&lt; embedding_model          user &gt;&gt; website &gt;&gt; Edge(color=\"green\") &gt;&gt; embedding_model_bqrm \\              &gt;&gt; Edge(color=\"green\") &gt;&gt; embeddings &gt;&gt; Edge(color=\"green\") &gt;&gt; text_model_bqrm         website &gt;&gt; Edge(color=\"green\") &gt;&gt; text_model_bqrm"},{"location":"learning-plans/","title":"Learning Plan","text":"<p>Staying curious is at the core of how I grow. This is my personal learning roadmap\u2014what I'm currently exploring, skills I'm sharpening, and resources I've found useful. I believe in learning out loud, and I'm happy to share my journey.</p> <p>2025</p>"},{"location":"learning-plans/2025/","title":"2025","text":"MLOpsKafkaAI Workflow Automation <p>Action Plans</p> <ul> <li> Real-world End to End Machine Learning Ops on Google Cloud</li> <li> MLflow in Action - Master the art of MLOps using MLflow tool</li> </ul> <p>Action Plans</p> <ul> <li> Apache Kafka Series - Learn Apache Kafka for Beginners v3</li> </ul> <p>Action Plans</p> <ul> <li> n8n</li> <li> make</li> </ul>"},{"location":"side-projects/","title":"Side Projects","text":"<p>I love exploring new ideas and building things in my spare time. Here, you'll find a collection of side projects that showcase my interests, technical skills, and curiosity beyond work. Each project reflects my hands-on approach to learning and creating.</p>"},{"location":"side-projects/cross-cloud-unified-sql-data-pipelines/","title":"Cross Cloud Unified Sql Data Pipelines","text":""},{"location":"side-projects/sql-based-rag-application/","title":"SQL-based RAG Application","text":""},{"location":"side-projects/sql-based-rag-application/#create-a-bucket-in-gcs-and-upload-a-pdf-file","title":"Create a Bucket in GCS and upload a pdf file","text":""},{"location":"side-projects/sql-based-rag-application/#create-a-object-table-in-bigquery","title":"Create a Object Table in BigQuery","text":"<pre><code>create or replace external table `us_test2.pdf`\nwith connection `us.bg-object-tables`\noptions(\n  object_metadata = 'SIMPLE',\n  uris = ['gs://kcl-us-test/scf23.pdf']\n);\n</code></pre>"},{"location":"side-projects/sql-based-rag-application/#create-a-layout-parser-type-of-processor-in-document-ai-and-a-remote-model-corresponding-to-the-processor","title":"Create a Layout Parser type of Processor in Document AI and a Remote Model corresponding to the processor","text":"<pre><code>create or replace model `us_test2.doc_parser`\nremote with connection `us.document_ai`\noptions(\n  remote_service_type='CLOUD_AI_DOCUMENT_V1',\n  document_processor='ec023753643cb1be'\n);\n</code></pre>"},{"location":"side-projects/sql-based-rag-application/#create-a-embeddings-remote-model-in-bigquery","title":"Create a embeddings Remote Model in BigQuery","text":"<pre><code>create or replace model `us_test2.embedding_model`\nremote with connection `us.vertex_ai`\noptions (\n  endpoint='text-embedding-004'\n)\n</code></pre>"},{"location":"side-projects/sql-based-rag-application/#create-a-generative-text-remote-model-in-bigquery","title":"Create a generative text Remote Model in BigQuery","text":"<pre><code>create or replace model `us_test2.text_model`\nremote with connection `us.vertex_ai`\noptions(\n  endpoint = 'gemini-1.5-flash-002'\n)\n</code></pre>"},{"location":"side-projects/data-mesh/","title":"Data Mesh","text":"<p>Homepage</p>"},{"location":"side-projects/data-mesh/docs/org/","title":"Organization","text":""},{"location":"side-projects/dcard-hw/","title":"2020 Dcard DE Intern","text":""},{"location":"side-projects/dcard-hw/#why-is-this-assignment-given","title":"Why is this assignment given?","text":"<p>This is a pre-interview assignment for the 2020 Dcard Data Engineer Internship Program.</p> <p>On Dcard, there is an important section called \"Trending Posts,\" where users can find the hottest discussion topics on the platform. As data enthusiasts, we are also curious about which posts have the potential to become trending. If we consider this factor in our recommendations, we might help users discover great posts faster. Therefore, in this assignment, we aim to predict whether a post has the potential to appear in the \"Trending Posts\" section based on some data.</p> <p>To simplify the problem, we define a trending post as one that receives at least 1000 likes within 36 hours of being posted. During testing, we will calculate whether a post's like count exceeds 1000 within 36 hours to determine the ground truth or prediction benchmark.</p>"},{"location":"side-projects/dcard-hw/#training-dataset","title":"Training Dataset","text":"<p>The training dataset covers posts from April 1, 2019, to the end of October 2019, approximately 7 months. It contains around 794,000 posts, of which about 2.32% (approximately 18,000 posts) are trending.</p> <pre><code>posts_train                Contains 793,751 records and 3 columns\npost_shared_train          Contains 304,260 records and 3 columns\npost_comment_created_train Contains 2,372,228 records and 3 columns\npost_liked_train           Contains 3,395,903 records and 3 columns\npost_collected_train       Contains 1,235,126 records and 3 columns\n</code></pre> <p>posts_train</p> <ul> <li>post_key</li> <li>created_at_hour</li> <li>like_count_36_hour</li> </ul> <p>post_shared_train</p> <ul> <li>post_key</li> <li>created_at_hour</li> <li>count</li> </ul> <p>post_comment_created_train</p> <ul> <li>post_key</li> <li>created_at_hour</li> <li>count</li> </ul> <p>post_liked_train</p> <ul> <li>post_key</li> <li>created_at_hour</li> <li>count</li> </ul> <p>post_collected_train</p> <ul> <li>post_key</li> <li>created_at_hour</li> <li>count</li> </ul>"},{"location":"side-projects/dcard-hw/#testing-dataset","title":"Testing Dataset","text":"<pre><code>posts_test                 Contains 225,986 records and 3 columns\npost_shared_test           Contains 83,376 records and 3 columns\npost_comment_created_test  Contains 607,251 records and 3 columns\npost_liked_test            Contains 908,910 records and 3 columns\npost_collected_test        Contains 275,073 records and 3 columns\n</code></pre>"},{"location":"side-projects/dcard-hw/#evaluation-metrics","title":"Evaluation Metrics","text":"<p>For offline evaluation, only the first 10 hours of data for each post will be used as input for prediction. The primary evaluation metric is the F1-score.</p>"},{"location":"side-projects/dcard-hw/#submission-requirements","title":"Submission Requirements","text":"<p>Upon completing the assignment, you must submit at least the following four files. Failure to include any of these will be considered incomplete.</p> <ol> <li>Report.pdf<ul> <li>Instructions on how to use your code</li> <li>Methods and rationale</li> <li>Evaluation results on the provided testing data</li> <li>Experimental observations</li> </ul> </li> <li>train.py</li> <li>predict.py</li> <li>requirements.txt or Pipfile</li> <li>(Optional) If your prediction requires a model file, please include it (we will not train it for you) and explain how to use it in Report.pdf.</li> </ol> <p>We have some requirements for the program structure to facilitate testing: - Training     - The outermost layer should be wrapped in train.py.     - The program should be executable as <code>python train.py {database_host} {model_filepath}</code>.     - Example: <code>python train.py localhost:8080 ./model.h5</code></p> <ul> <li>Prediction<ul> <li>The program should be executable as <code>python predict.py {database_host} {model_filepath} {output_filepath}</code>.</li> <li>Specify where your model_filepath is located.</li> <li>Example: <code>python predict.py localhost:8080 ./model.h5 ./sample_output.csv</code></li> <li>Your program must achieve the following during prediction:<ul> <li>Read data from the database. The data format will match the tables described in the next section. For evaluation, we will use our own test data.</li> <li>Use another database's xxx_test tables as the test set during actual testing. Your predict.py should use these tables as input.</li> <li>Output a CSV file with two columns as shown below, including a header (refer to the provided sample_output.csv):<ul> <li>post_key: string type</li> <li>is_trending: bool type</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"side-projects/dcard-hw/#usage-instructions","title":"Usage Instructions","text":"<p>Environment:</p> <ul> <li>Operating System: Ubuntu 18.04 LTS Desktop</li> <li>Python version: Python 3.6.8</li> <li>Required Python packages and their versions are listed in <code>requirements.txt</code>.</li> </ul> <p>As mentioned in <code>quiz.pdf</code>, the submission format must include hardcoded parameters such as <code>user</code> and <code>password</code> for database connections. To ensure clarity, the command-line argument format has been slightly modified to meet usage requirements. Below are the usage instructions for <code>training.py</code> and <code>predict.py</code>.</p>"},{"location":"side-projects/dcard-hw/#trainingpy","title":"<code>training.py</code>","text":"<p>The usage of <code>training.py</code> is as follows:</p> <pre><code>usage: training.py [-h] -u USERNAME -p PASSWORD --host HOSTNAME\n                   [--port PORTNUMBER] [--protocol PROTOCOL]\n                   DATABASE OUTPUT_PATH\n</code></pre> <p>At a minimum, you must provide five parameters: \"username,\" \"password,\" \"host IP address,\" \"database name,\" and \"output path.\" To train on the training set, use the following command:</p> <pre><code>python training.py -u \"USERNAME\"\\\n                   -p \"PASSWORD\"\\\n                   --host \"HOSTNAME\"\\\n                   \"DATABASE\"\\\n                   \"OUTPUT_PATH\"\n</code></pre> <p>By default, the program connects to a PostgreSQL database on port 5432. If needed, you can use the <code>--protocol</code> and <code>--port</code> options to connect to other databases, such as MySQL:</p> Note <pre><code>python training.py -u \"USERNAME\"\\\n                -p \"PASSWORD\"\\\n                --host \"HOSTNAME\"\\\n                --port \"3306\"\\\n                --protocol \"mysql\"\\\n                \"DATABASE\"\\\n                \"OUTPUT_PATH\"\n</code></pre> <p>Danger</p> <p>After training, the program generates two files: \"best model\" and \"cross-validation results.\" The default filenames are <code>best_model.h5</code> and <code>cv_results.csv</code> (these cannot be changed). Therefore, when specifying <code>OUTPUT_PATH</code>, only the folder name is required.</p> <p>For more details, use the <code>-h</code> or <code>--help</code> options:</p> Note <pre><code>$ python training.py -h\nusage: training.py [-h] -u USERNAME -p PASSWORD --host HOSTNAME\n                [--port PORTNUMBER] [--protocol PROTOCOL]\n                DATABASE OUTPUT_PATH\n\npositional arguments:\nDATABASE             (Required) Database to use when connecting to server.\nOUTPUT_PATH          (Required) Best prediction model and cross validation\n                    results outputs file path.\n\noptional arguments:\n-h, --help           show this help message and exit\n-u USERNAME          (Required) User for login if not current user.\n-p PASSWORD          (Required) Password to use when connecting to server.\n--host HOSTNAME      (Required) Host address to connect.\n--port PORTNUMBER    Port number to use for connection (default: 5432)\n--protocol PROTOCOL  Protocol to connect. (default: postgres)\n</code></pre>"},{"location":"side-projects/dcard-hw/#predictpy","title":"<code>predict.py</code>","text":"<p>The usage of <code>predict.py</code> is as follows:</p> <pre><code>usage: predict.py [-h] -u USERNAME -p PASSWORD --host HOSTNAME\n                  [--port PORTNUMBER] [--protocol PROTOCOL] [-n]\n                  DATABASE MODEL_NAME OUTPUT_PATH\n</code></pre> <p>Similar to <code>training.py</code>, you must provide five parameters, with an additional parameter for the \"model path\" used to predict trending posts. To predict on the public test set, use the following command:</p> <pre><code>python predict.py -u \"USERNAME\"\\\n                  -p \"PASSWORD\"\\\n                  --host \"HOSTNAME\"\\\n                  \"DATABASE\"\\\n                  \"MODELNAME\"\\\n                  \"OUTPUT_PATH\"\n</code></pre> <p>After execution, the program outputs <code>output.csv</code> (filename cannot be changed) to the specified folder. Note that the <code>MODEL_NAME</code> option must include the model file name, not the folder path.</p> <p>As mentioned in the \"Assignment Supplementary Notes and Corrections\" email, the <code>posts_test</code> table in the private test set does not include the <code>like_count_36_hour</code> column. Therefore, you must use the <code>-n</code> option to indicate that this column is absent. To predict on the private test set, use the following command:</p> <pre><code>python predict.py -u \"USERNAME\"\\\n                  -p \"PASSWORD\"\\\n                  --host \"HOSTNAME\"\\\n                  -n\\\n                  \"DATABASE\"\\\n                  \"MODELNAME\"\\\n                  \"OUTPUT_PATH\"\n</code></pre> <p>If needed, you can also use the <code>--port</code> and <code>--protocol</code> options to connect to other databases.</p> <p>For more details, use the <code>-h</code> or <code>--help</code> options:</p> Note <pre><code>$ python predict.py -h\nusage: predict.py [-h] -u USERNAME -p PASSWORD --host HOSTNAME\n                [--port PORTNUMBER] [--protocol PROTOCOL] [-n]\n                DATABASE MODEL_NAME OUTPUT_PATH\n\npositional arguments:\nDATABASE             (Required) Database to use when connecting to server.\nMODEL_NAME           (Required) Prediction model name. If it is not in the\n                    current directory, please specify where it is.\nOUTPUT_PATH          (Required) File path of predicted results.\n\noptional arguments:\n-h, --help           show this help message and exit\n-u USERNAME          (Required) User for login if not current user.\n-p PASSWORD          (Required) Password to use when connecting to server.\n--host HOSTNAME      (Required) Host address to connect.\n--port PORTNUMBER    Port number to use for connection (default: 5432)\n--protocol PROTOCOL  Protocol to connect. (default: postgres)\n-n                   No like_count_36_hour column when the option is given.\n</code></pre>"},{"location":"side-projects/dcard-hw/eda_evaluation/","title":"\u532f\u5165\u76f8\u95dc\u5957\u4ef6","text":"Table of Contents <ul><li>1\u00a0\u00a0\u532f\u5165\u76f8\u95dc\u5957\u4ef6</li><li>2\u00a0\u00a0\u4e8b\u524d\u6e96\u5099</li><li>3\u00a0\u00a0EDA</li><li>4\u00a0\u00a0Evaluation<ul><li>4.1\u00a0\u00a0Resampler</li><li>4.2\u00a0\u00a0Resampler + Classifier</li><li>4.3\u00a0\u00a0Classifier</li><li>4.4\u00a0\u00a0Classifier + n_estimator</li><li>4.5\u00a0\u00a0<code>AdaBoostClassifier</code> + <code>max_depth</code></li><li>4.6\u00a0\u00a0<code>GradientBoostingClassifier</code>, <code>XGBClassifier</code> + <code>learning_rate</code></li><li>4.7\u00a0\u00a0Best Model<ul><li>4.7.1\u00a0\u00a0f1-score</li><li>4.7.2\u00a0\u00a0balanced accuracy</li></ul></li></ul></li></ul> In\u00a0[1]: Copied! <pre># Import built-in packages\nfrom math import isnan\nfrom functools import reduce\n\n# Import 3-rd party packages\nimport sqlalchemy\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotnine import *\n</pre> # Import built-in packages from math import isnan from functools import reduce  # Import 3-rd party packages import sqlalchemy import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt from plotnine import * In\u00a0[2]: Copied! <pre>def print_info(info, width=61, fillchar='='):\n    \"\"\"\n    \u5370\u51fa\u683c\u5f0f\u5316\u7684\u8cc7\u8a0a\n    \"\"\"\n    temp_width = width - (width-len(info))//2\n    print(info.rjust(temp_width, fillchar).ljust(width, fillchar))\n</pre> def print_info(info, width=61, fillchar='='):     \"\"\"     \u5370\u51fa\u683c\u5f0f\u5316\u7684\u8cc7\u8a0a     \"\"\"     temp_width = width - (width-len(info))//2     print(info.rjust(temp_width, fillchar).ljust(width, fillchar)) In\u00a0[3]: Copied! <pre>def get_connector(user, host, database, password=None, port='5432', protocol='postgres'):\n    \"\"\"\n    \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\uff0c\u9810\u8a2d\u70ba\u9023\u7dda\u81f3 PostgreSQL\uff0c\u57e0\u865f\u9810\u8a2d\u70ba 5432\u3002\n    \"\"\"\n    print_info(\"GETTING CONNECTOR START!\")\n    user_info = f'{user}:{password}' if password else user\n    url = f'{protocol}://{user_info}@{host}:{port}/{database}'\n    engine = sqlalchemy.create_engine(url, client_encoding='utf-8')\n    print_info(\"DONE!\")\n    return engine\n</pre> def get_connector(user, host, database, password=None, port='5432', protocol='postgres'):     \"\"\"     \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\uff0c\u9810\u8a2d\u70ba\u9023\u7dda\u81f3 PostgreSQL\uff0c\u57e0\u865f\u9810\u8a2d\u70ba 5432\u3002     \"\"\"     print_info(\"GETTING CONNECTOR START!\")     user_info = f'{user}:{password}' if password else user     url = f'{protocol}://{user_info}@{host}:{port}/{database}'     engine = sqlalchemy.create_engine(url, client_encoding='utf-8')     print_info(\"DONE!\")     return engine In\u00a0[4]: Copied! <pre>def get_tables(engine, table_names):\n    \"\"\"\n    \u4f9d\u7167 `tables_names` \u7684\u9806\u5e8f\uff0c\u53d6\u5f97 tables\uff0c\u4e26\u4f9d\u5e8f\u5132\u5b58\u65bc `list` \u7576\u4e2d\uff0c\u56de\u50b3\u578b\u614b\u70ba `list`\uff0c\u6bcf\u500b element \u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"GETTING TABLES START!\")\n    rslt = []\n    for tn in table_names:\n        query = f'SELECT * FROM {tn}'\n        exec(f'{tn} = pd.read_sql(query, engine)')\n        # exec(f\"{tn} = pd.read_csv('{tn}.csv', encoding='utf8')\") # from current working directory\n        print(\n            f'{format(tn, \"26s\")} \u7e3d\u5171\u6709 {eval(f\"{tn}.shape[0]\"):9,} \u7b46\u8cc7\u6599\u548c {eval(f\"{tn}.shape[1]\")} \u500b\u6b04\u4f4d')\n        exec(f'rslt.append({tn})')\n    print_info(\"DONE!\")\n    return rslt\n</pre> def get_tables(engine, table_names):     \"\"\"     \u4f9d\u7167 `tables_names` \u7684\u9806\u5e8f\uff0c\u53d6\u5f97 tables\uff0c\u4e26\u4f9d\u5e8f\u5132\u5b58\u65bc `list` \u7576\u4e2d\uff0c\u56de\u50b3\u578b\u614b\u70ba `list`\uff0c\u6bcf\u500b element \u70ba `DataFrame`\u3002     \"\"\"     print_info(\"GETTING TABLES START!\")     rslt = []     for tn in table_names:         query = f'SELECT * FROM {tn}'         exec(f'{tn} = pd.read_sql(query, engine)')         # exec(f\"{tn} = pd.read_csv('{tn}.csv', encoding='utf8')\") # from current working directory         print(             f'{format(tn, \"26s\")} \u7e3d\u5171\u6709 {eval(f\"{tn}.shape[0]\"):9,} \u7b46\u8cc7\u6599\u548c {eval(f\"{tn}.shape[1]\")} \u500b\u6b04\u4f4d')         exec(f'rslt.append({tn})')     print_info(\"DONE!\")     return rslt In\u00a0[5]: Copied! <pre>def merge_tables(tables, table_names, how):\n    \"\"\"\n    \u5408\u4f75\u6240\u6709 tables\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"MERGING TABLES START!\")\n    # \u5206\u5225\u8655\u7406 post_{shared, comment_created, liked, collected}_{train, test} \u56db\u500b tables\n    # groupby \u6bcf\u7bc7\u6587\u7ae0\uff0c\u5c07\u524d\u5341\u5c0f\u6642\u7684\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u3001\u6536\u85cf\u6578\u52a0\u7e3d\u8d77\u4f86\n    for idx, (table, tn) in enumerate(zip(tables, table_names)):\n        if len(tn.split('_'))==2: continue                  # for handling posts_{train, test} table\n        col_name = f\"{tn.split('_')[1]}_count\"              # tn.split('_')[1] is either {shared, comment, liked, collected}\n        mapper = {'count': col_name}\n        exec(f\"tables[{idx}] = table.groupby(['post_key'], as_index=False).sum().rename(columns=mapper)\")\n    # \u5c07 tables \u5408\u4f75\u8d77\u4f86\u4e26\u56de\u50b3\u3002\n    total_df = reduce(lambda left, right: pd.merge(left, right, on=['post_key'], how=how), tables)\n    print_info(\"DONE!\")\n    return total_df\n</pre> def merge_tables(tables, table_names, how):     \"\"\"     \u5408\u4f75\u6240\u6709 tables\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002     \"\"\"     print_info(\"MERGING TABLES START!\")     # \u5206\u5225\u8655\u7406 post_{shared, comment_created, liked, collected}_{train, test} \u56db\u500b tables     # groupby \u6bcf\u7bc7\u6587\u7ae0\uff0c\u5c07\u524d\u5341\u5c0f\u6642\u7684\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u3001\u6536\u85cf\u6578\u52a0\u7e3d\u8d77\u4f86     for idx, (table, tn) in enumerate(zip(tables, table_names)):         if len(tn.split('_'))==2: continue                  # for handling posts_{train, test} table         col_name = f\"{tn.split('_')[1]}_count\"              # tn.split('_')[1] is either {shared, comment, liked, collected}         mapper = {'count': col_name}         exec(f\"tables[{idx}] = table.groupby(['post_key'], as_index=False).sum().rename(columns=mapper)\")     # \u5c07 tables \u5408\u4f75\u8d77\u4f86\u4e26\u56de\u50b3\u3002     total_df = reduce(lambda left, right: pd.merge(left, right, on=['post_key'], how=how), tables)     print_info(\"DONE!\")     return total_df In\u00a0[6]: Copied! <pre>def preprocess_total_df(total_df):\n    \"\"\"\n    \u9810\u8655\u7406\u525b\u5408\u4f75\u597d\u7684 total_df \u4ee5\u7b26\u5408\u5f8c\u7e8c\u5efa\u6a21\u9700\u6c42\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"PREPROCESSING TOTAL_DF START!\")\n    total_df.set_index('post_key', inplace=True)                                    # post_key \u6b04\u4f4d\u8a2d\u70ba\u7d22\u5f15\n    total_df['created_at_hour'] = pd.to_datetime(total_df['created_at_hour'])       # \u5c07 created_at_hour \u6b04\u4f4d\u8f49\u63db\u6210 datetime \u578b\u614b\n    total_df['weekday'] = total_df['created_at_hour'].dt.dayofweek                  # \u64f7\u53d6\u51fa\u767c\u6587\u7684 weekday\n    total_df['hour'] = total_df['created_at_hour'].dt.hour                          # \u64f7\u53d6\u51fa\u767c\u6587\u7684 hour\n    total_df.fillna(0, inplace=True)                                                # NaN \u503c\u88dc 0\n    total_df['is_trending'] = 0+(total_df['like_count_36_hour']&gt;=1000)              # \u8f49\u63db\u6210 is_trending \u985e\u5225\u6b04\u4f4d\n    total_df = total_df.drop(['created_at_hour'], axis=1)                           # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d\n    # \u5c07\u8a08\u6b21\u6b04\u4f4d\u8f49\u63db\u6210 int \u578b\u614b\n    col_names = ['shared_count', 'comment_count', 'liked_count', 'collected_count']\n    for cn in col_names:\n        total_df[cn] = total_df[cn].astype(dtype='int')\n    print_info(\"DONE!\")\n    return total_df\n</pre> def preprocess_total_df(total_df):     \"\"\"     \u9810\u8655\u7406\u525b\u5408\u4f75\u597d\u7684 total_df \u4ee5\u7b26\u5408\u5f8c\u7e8c\u5efa\u6a21\u9700\u6c42\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002     \"\"\"     print_info(\"PREPROCESSING TOTAL_DF START!\")     total_df.set_index('post_key', inplace=True)                                    # post_key \u6b04\u4f4d\u8a2d\u70ba\u7d22\u5f15     total_df['created_at_hour'] = pd.to_datetime(total_df['created_at_hour'])       # \u5c07 created_at_hour \u6b04\u4f4d\u8f49\u63db\u6210 datetime \u578b\u614b     total_df['weekday'] = total_df['created_at_hour'].dt.dayofweek                  # \u64f7\u53d6\u51fa\u767c\u6587\u7684 weekday     total_df['hour'] = total_df['created_at_hour'].dt.hour                          # \u64f7\u53d6\u51fa\u767c\u6587\u7684 hour     total_df.fillna(0, inplace=True)                                                # NaN \u503c\u88dc 0     total_df['is_trending'] = 0+(total_df['like_count_36_hour']&gt;=1000)              # \u8f49\u63db\u6210 is_trending \u985e\u5225\u6b04\u4f4d     total_df = total_df.drop(['created_at_hour'], axis=1)                           # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d     # \u5c07\u8a08\u6b21\u6b04\u4f4d\u8f49\u63db\u6210 int \u578b\u614b     col_names = ['shared_count', 'comment_count', 'liked_count', 'collected_count']     for cn in col_names:         total_df[cn] = total_df[cn].astype(dtype='int')     print_info(\"DONE!\")     return total_df In\u00a0[7]: Copied! <pre># Get engine\nengine = get_connector(\n    user=\"candidate\",\n    password=\"dcard-data-intern-2020\",\n    host=\"35.187.144.113\",\n    database=\"intern_task\"\n)\n# Get tables from db\ntable_names_train = ['posts_train', 'post_shared_train', \n                     'post_comment_created_train', 'post_liked_train', 'post_collected_train']\ntables_train = get_tables(engine, table_names_train)\n# Merge tables\ntotal_df_train = merge_tables(tables_train, table_names_train, how='left')\n# Preprocess total_df\ntotal_df_train = preprocess_total_df(total_df_train)\n\nengine.dispose()\n</pre> # Get engine engine = get_connector(     user=\"candidate\",     password=\"dcard-data-intern-2020\",     host=\"35.187.144.113\",     database=\"intern_task\" ) # Get tables from db table_names_train = ['posts_train', 'post_shared_train',                       'post_comment_created_train', 'post_liked_train', 'post_collected_train'] tables_train = get_tables(engine, table_names_train) # Merge tables total_df_train = merge_tables(tables_train, table_names_train, how='left') # Preprocess total_df total_df_train = preprocess_total_df(total_df_train)  engine.dispose() <pre>===================GETTING CONNECTOR START!==================\n============================DONE!============================\n====================GETTING TABLES START!====================\nposts_train                \u7e3d\u5171\u6709   793,751 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_shared_train          \u7e3d\u5171\u6709   304,260 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_comment_created_train \u7e3d\u5171\u6709 2,372,228 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_liked_train           \u7e3d\u5171\u6709 3,395,903 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_collected_train       \u7e3d\u5171\u6709 1,235,126 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\n============================DONE!============================\n====================MERGING TABLES START!====================\n============================DONE!============================\n================PREPROCESSING TOTAL_DF START!================\n============================DONE!============================\n</pre> In\u00a0[8]: Copied! <pre>cv_results = pd.read_csv('./outputs/cv_results.csv')\n</pre> cv_results = pd.read_csv('./outputs/cv_results.csv') In\u00a0[9]: Copied! <pre>temp = total_df_train.drop(columns=['weekday', 'hour', 'is_trending'])\nsns.heatmap(temp.corr(), cmap='YlGnBu')\n</pre> temp = total_df_train.drop(columns=['weekday', 'hour', 'is_trending']) sns.heatmap(temp.corr(), cmap='YlGnBu') Out[9]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x23755717ba8&gt;</pre> In\u00a0[10]: Copied! <pre>mapper = dict(zip([0, 1, 2, 3, 4, 5, 6], ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']))\n</pre> mapper = dict(zip([0, 1, 2, 3, 4, 5, 6], ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])) In\u00a0[11]: Copied! <pre># \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u767c\u6587\u6578\nnum_articles_heatmap_df = total_df_train.groupby(['weekday', 'hour']).size().reset_index().rename(columns={0:'count'})\nnum_articles_heatmap_df = num_articles_heatmap_df.pivot(index='weekday', columns='hour', values='count')\nnum_articles_heatmap_df = num_articles_heatmap_df.rename(mapper=mapper, axis=0)\nnum_articles_heatmap_df = num_articles_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday', \n                                                           'Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.figure(figsize=(20, 5))\nplt.title(f'Number of Articles by Day of Week / Hour of Day')\nsns.heatmap(num_articles_heatmap_df, cmap='OrRd', cbar=False)\n</pre> # \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u767c\u6587\u6578 num_articles_heatmap_df = total_df_train.groupby(['weekday', 'hour']).size().reset_index().rename(columns={0:'count'}) num_articles_heatmap_df = num_articles_heatmap_df.pivot(index='weekday', columns='hour', values='count') num_articles_heatmap_df = num_articles_heatmap_df.rename(mapper=mapper, axis=0) num_articles_heatmap_df = num_articles_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday',                                                             'Thursday', 'Friday', 'Saturday', 'Sunday']) plt.figure(figsize=(20, 5)) plt.title(f'Number of Articles by Day of Week / Hour of Day') sns.heatmap(num_articles_heatmap_df, cmap='OrRd', cbar=False) Out[11]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x237490fb518&gt;</pre> In\u00a0[12]: Copied! <pre># \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u71b1\u9580\u6587\u7ae0\u6bd4\u4f8b\nnum_pops_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['is_trending'].sum().reset_index()\nnum_pops_heatmap_df = num_pops_heatmap_df.pivot(index='weekday', columns='hour', values='is_trending')\nnum_pops_heatmap_df = num_pops_heatmap_df.rename(mapper=mapper, axis=0)\nnum_pops_heatmap_df = num_pops_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday', \n                                                   'Thursday', 'Friday', 'Saturday', 'Sunday'])\npct_pops_heatmap_df = num_pops_heatmap_df/num_articles_heatmap_df\nplt.figure(figsize=(20, 5))\nplt.title(f'Percentage of Popular Articles by Day of Week / Hour of Day ')\nsns.heatmap(pct_pops_heatmap_df, cmap='Blues', cbar=False)\n</pre> # \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u71b1\u9580\u6587\u7ae0\u6bd4\u4f8b num_pops_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['is_trending'].sum().reset_index() num_pops_heatmap_df = num_pops_heatmap_df.pivot(index='weekday', columns='hour', values='is_trending') num_pops_heatmap_df = num_pops_heatmap_df.rename(mapper=mapper, axis=0) num_pops_heatmap_df = num_pops_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday',                                                     'Thursday', 'Friday', 'Saturday', 'Sunday']) pct_pops_heatmap_df = num_pops_heatmap_df/num_articles_heatmap_df plt.figure(figsize=(20, 5)) plt.title(f'Percentage of Popular Articles by Day of Week / Hour of Day ') sns.heatmap(pct_pops_heatmap_df, cmap='Blues', cbar=False) Out[12]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2375e9e5cc0&gt;</pre> In\u00a0[13]: Copied! <pre># \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\uff0c\u524d 10 \u5c0f\u6642\u611b\u5fc3\u5e73\u5747\u6578\nnum_likes_10_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['liked_count'].mean().reset_index()\nnum_likes_10_heatmap_df = num_likes_10_heatmap_df.pivot(index='weekday', columns='hour', values='liked_count')\nnum_likes_10_heatmap_df = num_likes_10_heatmap_df.rename(mapper=mapper, axis=0)\nnum_likes_10_heatmap_df = num_likes_10_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday', \n                                                           'Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.figure(figsize=(20, 5))\nplt.title(f'Average Likes within 10 hours by Day of Week / Hour of Day')\nsns.heatmap(num_likes_10_heatmap_df, cmap='Purples', cbar=False)\n</pre> # \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\uff0c\u524d 10 \u5c0f\u6642\u611b\u5fc3\u5e73\u5747\u6578 num_likes_10_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['liked_count'].mean().reset_index() num_likes_10_heatmap_df = num_likes_10_heatmap_df.pivot(index='weekday', columns='hour', values='liked_count') num_likes_10_heatmap_df = num_likes_10_heatmap_df.rename(mapper=mapper, axis=0) num_likes_10_heatmap_df = num_likes_10_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday',                                                             'Thursday', 'Friday', 'Saturday', 'Sunday']) plt.figure(figsize=(20, 5)) plt.title(f'Average Likes within 10 hours by Day of Week / Hour of Day') sns.heatmap(num_likes_10_heatmap_df, cmap='Purples', cbar=False) Out[13]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x237625a2ef0&gt;</pre> In\u00a0[14]: Copied! <pre># \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\uff0c\u524d 36 \u5c0f\u6642\u611b\u5fc3\u5e73\u5747\u6578\nnum_likes_36_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['like_count_36_hour'].mean().reset_index()\nnum_likes_36_heatmap_df = num_likes_36_heatmap_df.pivot(index='weekday', columns='hour', values='like_count_36_hour')\nnum_likes_36_heatmap_df = num_likes_36_heatmap_df.rename(mapper=mapper, axis=0)\nnum_likes_36_heatmap_df = num_likes_36_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday', \n                                                           'Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.figure(figsize=(20, 5))\nplt.title(f'Average Likes within 36 hours by Day of Week / Hour of Day ')\nsns.heatmap(num_likes_36_heatmap_df, cmap='YlGn', cbar=False)\n</pre> # \u89c0\u5bdf\u4e0d\u540c\u6642\u6bb5\u4e0b\uff0c\u524d 36 \u5c0f\u6642\u611b\u5fc3\u5e73\u5747\u6578 num_likes_36_heatmap_df = total_df_train.groupby(['weekday', 'hour'])['like_count_36_hour'].mean().reset_index() num_likes_36_heatmap_df = num_likes_36_heatmap_df.pivot(index='weekday', columns='hour', values='like_count_36_hour') num_likes_36_heatmap_df = num_likes_36_heatmap_df.rename(mapper=mapper, axis=0) num_likes_36_heatmap_df = num_likes_36_heatmap_df.reindex(['Monday', 'Tuesday', 'Wednesday',                                                             'Thursday', 'Friday', 'Saturday', 'Sunday']) plt.figure(figsize=(20, 5)) plt.title(f'Average Likes within 36 hours by Day of Week / Hour of Day ') sns.heatmap(num_likes_36_heatmap_df, cmap='YlGn', cbar=False) Out[14]: <pre>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2376129c400&gt;</pre> In\u00a0[15]: Copied! <pre># \u53bb\u9664\u7528\u4e0d\u5230\u7684\u6b04\u4f4d\u8cc7\u8a0a\ncv_results = cv_results.drop(columns=[col for col in cv_results.columns if 'split' in col])\n# \u5c07\u6b04\u4f4d\u5167\u5bb9\u5316\u7c21\ndef transform(elem, mapper):\n    if type(elem)==float and isnan(elem):\n        return elem\n    for sub_str in mapper:\n        if sub_str in elem:\n            return mapper[sub_str]\n    return elem\n# resampler\nmapper = {\n    'SMOTE': 'SMOTE',\n    'NearMiss': 'NearMiss'\n}\ncv_results['param_resampler'] = cv_results['param_resampler'].apply(transform, args=(mapper,))\n# classifier\nmapper = {\n    'AdaBoostClassifier': 'AdaBoostClassifier',\n    'XGBClassifier': 'XGBClassifier',\n    'GradientBoostingClassifier': 'GradientBoostingClassifier'\n}\ncv_results['param_classifier'] = cv_results['param_classifier'].apply(transform, args=(mapper,))\n# classifier__base_estimator\nmapper = {\n    'max_depth=1': 'DecisionTreeClassifier(max_depth=1)',\n    'max_depth=2': 'DecisionTreeClassifier(max_depth=2)',\n    'max_depth=3': 'DecisionTreeClassifier(max_depth=3)'\n}\ncv_results['param_classifier__base_estimator'] = cv_results['param_classifier__base_estimator'].apply(transform, args=(mapper,))\n</pre> # \u53bb\u9664\u7528\u4e0d\u5230\u7684\u6b04\u4f4d\u8cc7\u8a0a cv_results = cv_results.drop(columns=[col for col in cv_results.columns if 'split' in col]) # \u5c07\u6b04\u4f4d\u5167\u5bb9\u5316\u7c21 def transform(elem, mapper):     if type(elem)==float and isnan(elem):         return elem     for sub_str in mapper:         if sub_str in elem:             return mapper[sub_str]     return elem # resampler mapper = {     'SMOTE': 'SMOTE',     'NearMiss': 'NearMiss' } cv_results['param_resampler'] = cv_results['param_resampler'].apply(transform, args=(mapper,)) # classifier mapper = {     'AdaBoostClassifier': 'AdaBoostClassifier',     'XGBClassifier': 'XGBClassifier',     'GradientBoostingClassifier': 'GradientBoostingClassifier' } cv_results['param_classifier'] = cv_results['param_classifier'].apply(transform, args=(mapper,)) # classifier__base_estimator mapper = {     'max_depth=1': 'DecisionTreeClassifier(max_depth=1)',     'max_depth=2': 'DecisionTreeClassifier(max_depth=2)',     'max_depth=3': 'DecisionTreeClassifier(max_depth=3)' } cv_results['param_classifier__base_estimator'] = cv_results['param_classifier__base_estimator'].apply(transform, args=(mapper,)) In\u00a0[16]: Copied! <pre>temp = cv_results.groupby(['param_resampler'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\ntemp.reset_index(inplace=True)\n\n(ggplot(temp, aes(x='param_resampler', y='mean_test_f1_score', fill='param_resampler'))\n + geom_bar(stat=\"identity\")\n + ylim(0,1)\n + scale_fill_brewer('qualitative', 2)\n + geom_text(aes(label='mean_test_f1_score'), format_string='{:.2f}')\n + ggtitle(f'Average F1 Score by Resampler')\n + labs(fill=f'Resampler')\n + xlab('Resampler')\n + ylab(f'Average F1 score'))\n</pre> temp = cv_results.groupby(['param_resampler'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() temp.reset_index(inplace=True)  (ggplot(temp, aes(x='param_resampler', y='mean_test_f1_score', fill='param_resampler'))  + geom_bar(stat=\"identity\")  + ylim(0,1)  + scale_fill_brewer('qualitative', 2)  + geom_text(aes(label='mean_test_f1_score'), format_string='{:.2f}')  + ggtitle(f'Average F1 Score by Resampler')  + labs(fill=f'Resampler')  + xlab('Resampler')  + ylab(f'Average F1 score')) Out[16]: <pre>&lt;ggplot: (-9223371884558871573)&gt;</pre> In\u00a0[17]: Copied! <pre>(ggplot(temp, aes(x='param_resampler', y='mean_test_recall', fill='param_resampler'))\n + geom_bar(stat=\"identity\")\n + ylim(0,1)\n + scale_fill_brewer('qualitative', 2)\n + geom_text(aes(label='mean_test_recall'), format_string='{:.2f}')\n + ggtitle(f'Average Recall by Resampler')\n + labs(fill=f'Resampler')\n + xlab('Resampler')\n + ylab(f'Average Recall'))\n</pre> (ggplot(temp, aes(x='param_resampler', y='mean_test_recall', fill='param_resampler'))  + geom_bar(stat=\"identity\")  + ylim(0,1)  + scale_fill_brewer('qualitative', 2)  + geom_text(aes(label='mean_test_recall'), format_string='{:.2f}')  + ggtitle(f'Average Recall by Resampler')  + labs(fill=f'Resampler')  + xlab('Resampler')  + ylab(f'Average Recall')) Out[17]: <pre>&lt;ggplot: (-9223371884558718762)&gt;</pre> In\u00a0[18]: Copied! <pre>(ggplot(temp, aes(x='param_resampler', y='mean_test_precision', fill='param_resampler'))\n + geom_bar(stat=\"identity\")\n + ylim(0,1)\n + scale_fill_brewer('qualitative', 2)\n + geom_text(aes(label='mean_test_precision'), format_string='{:.2f}')\n + ggtitle(f'Average Precision by Resampler')\n + labs(fill=f'Resampler')\n + xlab('Resampler')\n + ylab(f'Average Precision'))\n</pre> (ggplot(temp, aes(x='param_resampler', y='mean_test_precision', fill='param_resampler'))  + geom_bar(stat=\"identity\")  + ylim(0,1)  + scale_fill_brewer('qualitative', 2)  + geom_text(aes(label='mean_test_precision'), format_string='{:.2f}')  + ggtitle(f'Average Precision by Resampler')  + labs(fill=f'Resampler')  + xlab('Resampler')  + ylab(f'Average Precision')) Out[18]: <pre>&lt;ggplot: (152294750826)&gt;</pre> In\u00a0[19]: Copied! <pre>(ggplot(temp, aes(x='param_resampler', y='mean_test_balanced_accuracy', fill='param_resampler'))\n + geom_bar(stat=\"identity\")\n + ylim(0,1)\n + scale_fill_brewer('qualitative', 2)\n + geom_text(aes(label='mean_test_balanced_accuracy'), format_string='{:.2f}')\n + ggtitle(f'Average Balanced Accuracy by Resampler')\n + labs(fill=f'Resampler')\n + xlab('Resampler')\n + ylab(f'Average Balanced Accuracy'))\n</pre> (ggplot(temp, aes(x='param_resampler', y='mean_test_balanced_accuracy', fill='param_resampler'))  + geom_bar(stat=\"identity\")  + ylim(0,1)  + scale_fill_brewer('qualitative', 2)  + geom_text(aes(label='mean_test_balanced_accuracy'), format_string='{:.2f}')  + ggtitle(f'Average Balanced Accuracy by Resampler')  + labs(fill=f'Resampler')  + xlab('Resampler')  + ylab(f'Average Balanced Accuracy')) Out[19]: <pre>&lt;ggplot: (-9223371884547166951)&gt;</pre> In\u00a0[20]: Copied! <pre>temp = cv_results.groupby(['param_resampler', 'param_classifier'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\ntemp.reset_index(inplace=True)\n\n(ggplot(temp, aes(x='param_resampler', y='mean_test_f1_score', fill='param_classifier'))\n + geom_bar(position='dodge', stat=\"identity\")\n + ylim(0,1)\n + geom_text(aes(label='mean_test_f1_score'), position=position_dodge(width=0.9), format_string='{:.2f}')\n + ggtitle(f'Average F1 Score by Resampler and Classifier')\n + labs(fill=f'Classifier')\n + xlab('Resampler')\n + ylab(f'Average F1 score'))\n</pre> temp = cv_results.groupby(['param_resampler', 'param_classifier'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() temp.reset_index(inplace=True)  (ggplot(temp, aes(x='param_resampler', y='mean_test_f1_score', fill='param_classifier'))  + geom_bar(position='dodge', stat=\"identity\")  + ylim(0,1)  + geom_text(aes(label='mean_test_f1_score'), position=position_dodge(width=0.9), format_string='{:.2f}')  + ggtitle(f'Average F1 Score by Resampler and Classifier')  + labs(fill=f'Classifier')  + xlab('Resampler')  + ylab(f'Average F1 score')) Out[20]: <pre>&lt;ggplot: (-9223371884550063342)&gt;</pre> In\u00a0[21]: Copied! <pre>temp = cv_results.groupby(['param_classifier'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\ntemp.reset_index(inplace=True)\n\n(ggplot(temp, aes(x='param_classifier', y='mean_test_f1_score', fill='param_classifier'))\n + geom_bar(stat=\"identity\")\n + ylim(0,1)\n + geom_text(aes(label='mean_test_f1_score'), format_string='{:.2f}')\n + ggtitle('Average F1 Score by Classifier')\n + labs(fill='Classifier')\n + xlab('Classifier')\n + ylab(f'Average F1 score'))\n</pre> temp = cv_results.groupby(['param_classifier'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() temp.reset_index(inplace=True)  (ggplot(temp, aes(x='param_classifier', y='mean_test_f1_score', fill='param_classifier'))  + geom_bar(stat=\"identity\")  + ylim(0,1)  + geom_text(aes(label='mean_test_f1_score'), format_string='{:.2f}')  + ggtitle('Average F1 Score by Classifier')  + labs(fill='Classifier')  + xlab('Classifier')  + ylab(f'Average F1 score')) Out[21]: <pre>&lt;ggplot: (-9223371884545924818)&gt;</pre> In\u00a0[22]: Copied! <pre>temp = cv_results.groupby(['param_classifier', 'param_classifier__n_estimators'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\ntemp.reset_index(inplace=True)\n\n(ggplot(temp, aes(x='param_classifier__n_estimators', y='mean_test_f1_score', color='param_classifier'))\n + geom_line()\n + geom_point()\n + ylim(0,1)\n + ggtitle('Average F1 Score by Classifier and Number of Estimators')\n + labs(color='Classifier')\n + xlab('Number of Estimators')\n + ylab('Average F1 score'))\n</pre> temp = cv_results.groupby(['param_classifier', 'param_classifier__n_estimators'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() temp.reset_index(inplace=True)  (ggplot(temp, aes(x='param_classifier__n_estimators', y='mean_test_f1_score', color='param_classifier'))  + geom_line()  + geom_point()  + ylim(0,1)  + ggtitle('Average F1 Score by Classifier and Number of Estimators')  + labs(color='Classifier')  + xlab('Number of Estimators')  + ylab('Average F1 score')) Out[22]: <pre>&lt;ggplot: (-9223371884546480871)&gt;</pre> In\u00a0[23]: Copied! <pre>cv_results[cv_results['param_resampler']=='passthrough'].groupby(['param_classifier', 'param_classifier__base_estimator'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\n</pre> cv_results[cv_results['param_resampler']=='passthrough'].groupby(['param_classifier', 'param_classifier__base_estimator'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() Out[23]: mean_test_precision mean_test_recall mean_test_specificity mean_test_f1_score mean_test_balanced_accuracy param_classifier param_classifier__base_estimator AdaBoostClassifier DecisionTreeClassifier(max_depth=1) 0.738579 0.436288 0.996339 0.548524 0.716314 DecisionTreeClassifier(max_depth=2) 0.759336 0.443006 0.996670 0.559510 0.719838 DecisionTreeClassifier(max_depth=3) 0.755862 0.441223 0.996619 0.557159 0.718921 In\u00a0[24]: Copied! <pre>cv_results[cv_results['param_resampler']=='passthrough'].groupby(['param_classifier', 'param_classifier__learning_rate'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean()\n</pre> cv_results[cv_results['param_resampler']=='passthrough'].groupby(['param_classifier', 'param_classifier__learning_rate'])['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy'].mean() Out[24]: mean_test_precision mean_test_recall mean_test_specificity mean_test_f1_score mean_test_balanced_accuracy param_classifier param_classifier__learning_rate GradientBoostingClassifier 0.025 0.790585 0.395179 0.997518 0.526909 0.696348 0.050 0.780465 0.423388 0.997177 0.548966 0.710282 0.100 0.778204 0.434859 0.997062 0.557939 0.715961 XGBClassifier 0.025 0.754734 0.404196 0.996884 0.526422 0.700540 0.050 0.776283 0.406060 0.997226 0.533204 0.701643 0.100 0.783911 0.419787 0.997256 0.546763 0.708522 In\u00a0[25]: Copied! <pre>print(cv_results[cv_results['rank_test_f1_score']==1]['params'].values[0])\n</pre> print(cv_results[cv_results['rank_test_f1_score']==1]['params'].values[0]) <pre>{'classifier': AdaBoostClassifier(algorithm='SAMME.R',\n                   base_estimator=DecisionTreeClassifier(ccp_alpha=0.0,\n                                                         class_weight=None,\n                                                         criterion='gini',\n                                                         max_depth=2,\n                                                         max_features=None,\n                                                         max_leaf_nodes=None,\n                                                         min_impurity_decrease=0.0,\n                                                         min_impurity_split=None,\n                                                         min_samples_leaf=1,\n                                                         min_samples_split=2,\n                                                         min_weight_fraction_leaf=0.0,\n                                                         presort='deprecated',\n                                                         random_state=None,\n                                                         splitter='best'),\n                   learning_rate=1.0, n_estimators=100, random_state=None), 'classifier__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=2, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best'), 'classifier__n_estimators': 100, 'resampler': 'passthrough'}\n</pre> In\u00a0[26]: Copied! <pre>temp = cv_results[cv_results['rank_test_f1_score']==1]\ntemp[['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy']]\n</pre> temp = cv_results[cv_results['rank_test_f1_score']==1] temp[['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy']] Out[26]: mean_test_precision mean_test_recall mean_test_specificity mean_test_f1_score mean_test_balanced_accuracy 15 0.759668 0.44419 0.996667 0.560527 0.720429 In\u00a0[27]: Copied! <pre>print(cv_results[cv_results['rank_test_balanced_accuracy']==1]['params'].values[0])\n</pre> print(cv_results[cv_results['rank_test_balanced_accuracy']==1]['params'].values[0]) <pre>{'classifier': GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n                           learning_rate=0.1, loss='deviance', max_depth=3,\n                           max_features=None, max_leaf_nodes=None,\n                           min_impurity_decrease=0.0, min_impurity_split=None,\n                           min_samples_leaf=1, min_samples_split=2,\n                           min_weight_fraction_leaf=0.0, n_estimators=100,\n                           n_iter_no_change=None, presort='deprecated',\n                           random_state=None, subsample=1.0, tol=0.0001,\n                           validation_fraction=0.1, verbose=0,\n                           warm_start=False), 'classifier__learning_rate': 0.025, 'classifier__n_estimators': 120, 'resampler': SMOTE(k_neighbors=5, n_jobs=None, random_state=None, sampling_strategy='auto')}\n</pre> In\u00a0[28]: Copied! <pre>temp = cv_results[cv_results['rank_test_balanced_accuracy']==1]\ntemp[['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy']]\n</pre> temp = cv_results[cv_results['rank_test_balanced_accuracy']==1] temp[['mean_test_precision', 'mean_test_recall', 'mean_test_specificity', 'mean_test_f1_score', 'mean_test_balanced_accuracy']] Out[28]: mean_test_precision mean_test_recall mean_test_specificity mean_test_f1_score mean_test_balanced_accuracy 46 0.199325 0.958312 0.908746 0.330003 0.933529"},{"location":"side-projects/dcard-hw/eda_evaluation/","title":"\u532f\u5165\u76f8\u95dc\u5957\u4ef6\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/","title":"\u4e8b\u524d\u6e96\u5099\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#eda","title":"EDA\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#resampler","title":"Resampler\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#resampler-classifier","title":"Resampler + Classifier\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#classifier","title":"Classifier\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#classifier-n_estimator","title":"Classifier + n_estimator\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#adaboostclassifier-max_depth","title":"<code>AdaBoostClassifier</code> + <code>max_depth</code>\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#gradientboostingclassifier-xgbclassifier-learning_rate","title":"<code>GradientBoostingClassifier</code>, <code>XGBClassifier</code> + <code>learning_rate</code>\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#best-model","title":"Best Model\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#f1-score","title":"f1-score\u00b6","text":""},{"location":"side-projects/dcard-hw/eda_evaluation/#balanced-accuracy","title":"balanced accuracy\u00b6","text":""},{"location":"side-projects/dcard-hw/predict/","title":"Predict","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre># \u532f\u5165\u5167\u5efa\u5957\u4ef6\nfrom argparse import ArgumentParser\nfrom pathlib import Path, PurePath\n</pre> # \u532f\u5165\u5167\u5efa\u5957\u4ef6 from argparse import ArgumentParser from pathlib import Path, PurePath In\u00a0[\u00a0]: Copied! <pre>def get_predict_parser():\n    \"\"\"\n    \u521d\u59cb\u5316\u4e26\u56de\u50b3\u8a2d\u5b9a\u597d\u7684 `ArgumentParser` \u5be6\u9ad4\u3002\n    \"\"\"\n    parser = ArgumentParser()\n    # \u8a2d\u5b9a\u5fc5\u8981\u53c3\u6578\n    parser.add_argument('database', metavar='DATABASE',\n                        help='(Required) Database to use when connecting to server.')\n    parser.add_argument('model_name', metavar='MODEL_NAME',\n                        help='(Required) Prediction model name. If it is not in the current directory, please specify where it is.')\n    parser.add_argument('output_path', metavar='OUTPUT_PATH',\n                        help='(Required) File path of predicted results.')\n    parser.add_argument('-u', dest='user', required=True, metavar='USERNAME',\n                        help='(Required) User for login if not current user.')\n    parser.add_argument('-p', dest='password', required=True, metavar='PASSWORD',\n                        help='(Required) Password to use when connecting to server.')\n    parser.add_argument('--host', required=True, metavar='HOSTNAME',\n                        help='(Required) Host address to connect.')\n    # \u8a2d\u5b9a\u9078\u7528\u53c3\u6578\n    parser.add_argument('--port', metavar='PORTNUMBER', default='5432',\n                        help='Port number to use for connection (default: 5432)')\n    parser.add_argument('--protocol', metavar='PROTOCOL', default='postgres',\n                        help='Protocol to connect. (default: postgres)')\n    parser.add_argument('-n', dest='has_like_count_36_hour', action='store_false',\n                        help='No like_count_36_hour column when the option is given.')\n    return parser\n</pre> def get_predict_parser():     \"\"\"     \u521d\u59cb\u5316\u4e26\u56de\u50b3\u8a2d\u5b9a\u597d\u7684 `ArgumentParser` \u5be6\u9ad4\u3002     \"\"\"     parser = ArgumentParser()     # \u8a2d\u5b9a\u5fc5\u8981\u53c3\u6578     parser.add_argument('database', metavar='DATABASE',                         help='(Required) Database to use when connecting to server.')     parser.add_argument('model_name', metavar='MODEL_NAME',                         help='(Required) Prediction model name. If it is not in the current directory, please specify where it is.')     parser.add_argument('output_path', metavar='OUTPUT_PATH',                         help='(Required) File path of predicted results.')     parser.add_argument('-u', dest='user', required=True, metavar='USERNAME',                         help='(Required) User for login if not current user.')     parser.add_argument('-p', dest='password', required=True, metavar='PASSWORD',                         help='(Required) Password to use when connecting to server.')     parser.add_argument('--host', required=True, metavar='HOSTNAME',                         help='(Required) Host address to connect.')     # \u8a2d\u5b9a\u9078\u7528\u53c3\u6578     parser.add_argument('--port', metavar='PORTNUMBER', default='5432',                         help='Port number to use for connection (default: 5432)')     parser.add_argument('--protocol', metavar='PROTOCOL', default='postgres',                         help='Protocol to connect. (default: postgres)')     parser.add_argument('-n', dest='has_like_count_36_hour', action='store_false',                         help='No like_count_36_hour column when the option is given.')     return parser In\u00a0[\u00a0]: Copied! <pre>def main(args):\n    # \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\n    engine = preprocessing.get_connector(\n        user=args.user,\n        password=args.password,\n        host=args.host,\n        port=args.port,\n        database=args.database,\n        protocol=args.protocol\n    )\n    # \u53d6\u5f97\u9810\u6e2c\u968e\u6bb5\u6240\u9700\u7684 tables\uff0c\u63a5\u8457\u5408\u4f75\u3001\u9810\u8655\u7406\u6240\u6709 tables \u3002\n    table_names_test = ['posts_test', 'post_shared_test', 'post_comment_created_test',\n                        'post_liked_test', 'post_collected_test']\n    tables_test = preprocessing.get_tables(engine, table_names_test)\n    total_df_test = preprocessing.merge_tables(tables_test, table_names_test, how='left')\n    total_df_test = preprocessing.preprocess_total_df(total_df_test,\n                                                      has_like_count_36_hour=args.has_like_count_36_hour)\n    # \u8b80\u5165\u9810\u6e2c\u6a21\u578b\n    preprocessing.print_info(\"PREDICTING TESTSET START!\")\n    model_name = Path(f'{args.model_name}')\n    model = load(model_name)\n    # \u958b\u59cb\u9032\u884c\u9810\u6e2c\uff0c\u6839\u64da\u6536\u5230\u7684 tables \u662f\u5426\u6709 like_count_36_hour \u6b04\u4f4d\uff0c\u505a\u4e0d\u540c\u8655\u7406\n    if args.has_like_count_36_hour:\n        y_true = total_df_test['is_trending']\n        total_df_test = total_df_test.drop('is_trending', axis=1)\n        y_pred = model.predict(total_df_test)\n        # \u5728 console \u5370\u51fa evaluate \u7d50\u679c\n        print(f\"{format('f1-score', '12s')} = {f1_score(y_true, y_pred):.2f}\")\n        print(f\"{format('balanced acc', '12s')} = {balanced_accuracy_score(y_true, y_pred):.2f}\\n\")\n        print(classification_report(y_true, y_pred))\n    else:\n        y_pred = model.predict(total_df_test)\n    # \u8f38\u51fa\u9810\u6e2c\u7d50\u679c\n    output_path = Path(f'{args.output_path}')\n    output_name = Path('output.csv')\n    output_df = pd.DataFrame(zip(total_df_test.index, y_pred), columns=['post_key', 'is_trending'])\n    output_df.to_csv(str(output_path/output_name), index=False, encoding='utf8')\n    preprocessing.print_info(\"DONE!\")\n</pre> def main(args):     # \u53d6\u5f97\u9023\u7dda\u5f15\u64ce     engine = preprocessing.get_connector(         user=args.user,         password=args.password,         host=args.host,         port=args.port,         database=args.database,         protocol=args.protocol     )     # \u53d6\u5f97\u9810\u6e2c\u968e\u6bb5\u6240\u9700\u7684 tables\uff0c\u63a5\u8457\u5408\u4f75\u3001\u9810\u8655\u7406\u6240\u6709 tables \u3002     table_names_test = ['posts_test', 'post_shared_test', 'post_comment_created_test',                         'post_liked_test', 'post_collected_test']     tables_test = preprocessing.get_tables(engine, table_names_test)     total_df_test = preprocessing.merge_tables(tables_test, table_names_test, how='left')     total_df_test = preprocessing.preprocess_total_df(total_df_test,                                                       has_like_count_36_hour=args.has_like_count_36_hour)     # \u8b80\u5165\u9810\u6e2c\u6a21\u578b     preprocessing.print_info(\"PREDICTING TESTSET START!\")     model_name = Path(f'{args.model_name}')     model = load(model_name)     # \u958b\u59cb\u9032\u884c\u9810\u6e2c\uff0c\u6839\u64da\u6536\u5230\u7684 tables \u662f\u5426\u6709 like_count_36_hour \u6b04\u4f4d\uff0c\u505a\u4e0d\u540c\u8655\u7406     if args.has_like_count_36_hour:         y_true = total_df_test['is_trending']         total_df_test = total_df_test.drop('is_trending', axis=1)         y_pred = model.predict(total_df_test)         # \u5728 console \u5370\u51fa evaluate \u7d50\u679c         print(f\"{format('f1-score', '12s')} = {f1_score(y_true, y_pred):.2f}\")         print(f\"{format('balanced acc', '12s')} = {balanced_accuracy_score(y_true, y_pred):.2f}\\n\")         print(classification_report(y_true, y_pred))     else:         y_pred = model.predict(total_df_test)     # \u8f38\u51fa\u9810\u6e2c\u7d50\u679c     output_path = Path(f'{args.output_path}')     output_name = Path('output.csv')     output_df = pd.DataFrame(zip(total_df_test.index, y_pred), columns=['post_key', 'is_trending'])     output_df.to_csv(str(output_path/output_name), index=False, encoding='utf8')     preprocessing.print_info(\"DONE!\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    # \u53d6\u5f97\u89e3\u6790\u5668\u5be6\u9ad4\u4e26\u89e3\u6790\u547d\u4ee4\u5217\u53c3\u6578\n    parser = get_predict_parser()\n    args = parser.parse_args()\n    # \u78ba\u4fdd\u6a21\u578b\u548c\u8f38\u51fa\u8def\u5f91\u6b63\u78ba\n    assert Path(f'{args.model_name}').is_file(), \"Model file doesn't exist.\"\n    assert Path(f'{args.output_path}').is_dir(), \"Output directory doesn't exist.\"\n    # \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6\n    import pandas as pd\n    from joblib import load\n    from sklearn.metrics import classification_report, balanced_accuracy_score, f1_score\n    # \u532f\u5165\u81ea\u884c\u7dad\u8b77\u7684\u5957\u4ef6\n    import preprocessing\n    main(args)\n</pre> if __name__ == '__main__':     # \u53d6\u5f97\u89e3\u6790\u5668\u5be6\u9ad4\u4e26\u89e3\u6790\u547d\u4ee4\u5217\u53c3\u6578     parser = get_predict_parser()     args = parser.parse_args()     # \u78ba\u4fdd\u6a21\u578b\u548c\u8f38\u51fa\u8def\u5f91\u6b63\u78ba     assert Path(f'{args.model_name}').is_file(), \"Model file doesn't exist.\"     assert Path(f'{args.output_path}').is_dir(), \"Output directory doesn't exist.\"     # \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6     import pandas as pd     from joblib import load     from sklearn.metrics import classification_report, balanced_accuracy_score, f1_score     # \u532f\u5165\u81ea\u884c\u7dad\u8b77\u7684\u5957\u4ef6     import preprocessing     main(args)"},{"location":"side-projects/dcard-hw/preprocessing/","title":"Preprocessing","text":"In\u00a0[\u00a0]: Copied! <pre># \u532f\u5165\u5167\u5efa\u5957\u4ef6\nimport sys\nfrom functools import reduce\n</pre> # \u532f\u5165\u5167\u5efa\u5957\u4ef6 import sys from functools import reduce In\u00a0[\u00a0]: Copied! <pre># \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6\nimport sqlalchemy\nimport pandas as pd\nimport numpy as np\n</pre> # \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6 import sqlalchemy import pandas as pd import numpy as np In\u00a0[\u00a0]: Copied! <pre>def print_info(info, width=61, fillchar='='):\n    \"\"\"\n    \u5370\u51fa\u683c\u5f0f\u5316\u7684\u8cc7\u8a0a\n    \"\"\"\n    temp_width = width - (width-len(info))//2\n    print(info.rjust(temp_width, fillchar).ljust(width, fillchar))\n</pre> def print_info(info, width=61, fillchar='='):     \"\"\"     \u5370\u51fa\u683c\u5f0f\u5316\u7684\u8cc7\u8a0a     \"\"\"     temp_width = width - (width-len(info))//2     print(info.rjust(temp_width, fillchar).ljust(width, fillchar)) In\u00a0[\u00a0]: Copied! <pre>def get_connector(user, host, database, password=None, port='5432', protocol='postgres'):\n    \"\"\"\n    \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\uff0c\u9810\u8a2d\u70ba\u9023\u7dda\u81f3 PostgreSQL\uff0c\u57e0\u865f\u9810\u8a2d\u70ba 5432\u3002\n    \"\"\"\n    print_info(\"GETTING CONNECTOR START!\")\n    user_info = f'{user}:{password}' if password else user\n    url = f'{protocol}://{user_info}@{host}:{port}/{database}'\n    engine = sqlalchemy.create_engine(url, client_encoding='utf-8')\n    print_info(\"DONE!\")\n    return engine\n</pre> def get_connector(user, host, database, password=None, port='5432', protocol='postgres'):     \"\"\"     \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\uff0c\u9810\u8a2d\u70ba\u9023\u7dda\u81f3 PostgreSQL\uff0c\u57e0\u865f\u9810\u8a2d\u70ba 5432\u3002     \"\"\"     print_info(\"GETTING CONNECTOR START!\")     user_info = f'{user}:{password}' if password else user     url = f'{protocol}://{user_info}@{host}:{port}/{database}'     engine = sqlalchemy.create_engine(url, client_encoding='utf-8')     print_info(\"DONE!\")     return engine In\u00a0[\u00a0]: Copied! <pre>def get_tables(engine, table_names):\n    \"\"\"\n    \u4f9d\u7167 `tables_names` \u7684\u9806\u5e8f\uff0c\u53d6\u5f97 tables\uff0c\u4e26\u4f9d\u5e8f\u5132\u5b58\u65bc `list` \u7576\u4e2d\uff0c\u56de\u50b3\u578b\u614b\u70ba `list`\uff0c\u6bcf\u500b element \u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"GETTING TABLES START!\")\n    rslt = []\n    for tn in table_names:\n        query = f'SELECT * FROM {tn}'\n        exec(f'{tn} = pd.read_sql(query, engine)')\n        # exec(f\"{tn} = pd.read_csv('{tn}.csv', encoding='utf8')\") # from current working directory\n        print(\n            f'{format(tn, \"26s\")} \u7e3d\u5171\u6709 {eval(f\"{tn}.shape[0]\"):9,} \u7b46\u8cc7\u6599\u548c {eval(f\"{tn}.shape[1]\")} \u500b\u6b04\u4f4d')\n        exec(f'rslt.append({tn})')\n    print_info(\"DONE!\")\n    return rslt\n</pre> def get_tables(engine, table_names):     \"\"\"     \u4f9d\u7167 `tables_names` \u7684\u9806\u5e8f\uff0c\u53d6\u5f97 tables\uff0c\u4e26\u4f9d\u5e8f\u5132\u5b58\u65bc `list` \u7576\u4e2d\uff0c\u56de\u50b3\u578b\u614b\u70ba `list`\uff0c\u6bcf\u500b element \u70ba `DataFrame`\u3002     \"\"\"     print_info(\"GETTING TABLES START!\")     rslt = []     for tn in table_names:         query = f'SELECT * FROM {tn}'         exec(f'{tn} = pd.read_sql(query, engine)')         # exec(f\"{tn} = pd.read_csv('{tn}.csv', encoding='utf8')\") # from current working directory         print(             f'{format(tn, \"26s\")} \u7e3d\u5171\u6709 {eval(f\"{tn}.shape[0]\"):9,} \u7b46\u8cc7\u6599\u548c {eval(f\"{tn}.shape[1]\")} \u500b\u6b04\u4f4d')         exec(f'rslt.append({tn})')     print_info(\"DONE!\")     return rslt In\u00a0[\u00a0]: Copied! <pre>def merge_tables(tables, table_names, how):\n    \"\"\"\n    \u5408\u4f75\u6240\u6709 tables\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"MERGING TABLES START!\")\n    # \u5206\u5225\u8655\u7406 post_{shared, comment_created, liked, collected}_{train, test} \u56db\u500b tables\n    # groupby \u6bcf\u7bc7\u6587\u7ae0\uff0c\u5c07\u524d\u5341\u5c0f\u6642\u7684\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u3001\u6536\u85cf\u6578\u52a0\u7e3d\u8d77\u4f86\n    for idx, (table, tn) in enumerate(zip(tables, table_names)):\n        if len(tn.split('_'))==2: continue                  # for handling posts_{train, test} table\n        col_name = f\"{tn.split('_')[1]}_count\"              # tn.split('_')[1] is either {shared, comment, liked, collected}\n        mapper = {'count': col_name}\n        exec(f\"tables[{idx}] = table.groupby(['post_key'], as_index=False).sum().rename(columns=mapper)\")\n    # \u5c07 tables \u5408\u4f75\u8d77\u4f86\u4e26\u56de\u50b3\u3002\n    total_df = reduce(lambda left, right: pd.merge(left, right, on=['post_key'], how=how), tables)\n    print_info(\"DONE!\")\n    return total_df\n</pre> def merge_tables(tables, table_names, how):     \"\"\"     \u5408\u4f75\u6240\u6709 tables\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002     \"\"\"     print_info(\"MERGING TABLES START!\")     # \u5206\u5225\u8655\u7406 post_{shared, comment_created, liked, collected}_{train, test} \u56db\u500b tables     # groupby \u6bcf\u7bc7\u6587\u7ae0\uff0c\u5c07\u524d\u5341\u5c0f\u6642\u7684\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u3001\u6536\u85cf\u6578\u52a0\u7e3d\u8d77\u4f86     for idx, (table, tn) in enumerate(zip(tables, table_names)):         if len(tn.split('_'))==2: continue                  # for handling posts_{train, test} table         col_name = f\"{tn.split('_')[1]}_count\"              # tn.split('_')[1] is either {shared, comment, liked, collected}         mapper = {'count': col_name}         exec(f\"tables[{idx}] = table.groupby(['post_key'], as_index=False).sum().rename(columns=mapper)\")     # \u5c07 tables \u5408\u4f75\u8d77\u4f86\u4e26\u56de\u50b3\u3002     total_df = reduce(lambda left, right: pd.merge(left, right, on=['post_key'], how=how), tables)     print_info(\"DONE!\")     return total_df In\u00a0[\u00a0]: Copied! <pre>def preprocess_total_df(total_df, has_like_count_36_hour):\n    \"\"\"\n    \u9810\u8655\u7406\u525b\u5408\u4f75\u597d\u7684 total_df \u4ee5\u7b26\u5408\u5f8c\u7e8c\u5efa\u6a21\u9700\u6c42\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002\n    \"\"\"\n    print_info(\"PREPROCESSING TOTAL_DF START!\")\n    total_df.set_index('post_key', inplace=True)                                    # post_key \u6b04\u4f4d\u8a2d\u70ba\u7d22\u5f15\n    total_df['created_at_hour'] = pd.to_datetime(total_df['created_at_hour'])       # \u5c07 created_at_hour \u6b04\u4f4d\u8f49\u63db\u6210 datetime \u578b\u614b\n    total_df['weekday'] = total_df['created_at_hour'].dt.dayofweek                  # \u64f7\u53d6\u51fa\u767c\u6587\u7684 weekday\n    total_df['hour'] = total_df['created_at_hour'].dt.hour                          # \u64f7\u53d6\u51fa\u767c\u6587\u7684 hour\n    total_df.fillna(0, inplace=True)                                                # NaN \u503c\u88dc 0\n    # \u6839\u64da\u6536\u5230\u7684 tables \u662f\u5426\u6709 like_count_36_hour \u6b04\u4f4d\uff0c\u505a\u4e0d\u540c\u8655\u7406\n    if has_like_count_36_hour:\n        total_df['is_trending'] = 0+(total_df['like_count_36_hour']&gt;=1000)          # \u8f49\u63db\u6210 is_trending \u985e\u5225\u6b04\u4f4d\n        total_df = total_df.drop(['created_at_hour', 'like_count_36_hour'], axis=1) # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d\n    else:\n        total_df = total_df.drop(['created_at_hour'], axis=1)                       # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d\n    # \u5c07\u8a08\u6b21\u6b04\u4f4d\u8f49\u63db\u6210 int \u578b\u614b\n    col_names = ['shared_count', 'comment_count', 'liked_count', 'collected_count']\n    for cn in col_names:\n        total_df[cn] = total_df[cn].astype(dtype='int')\n    print_info(\"DONE!\")\n    return total_df\n</pre> def preprocess_total_df(total_df, has_like_count_36_hour):     \"\"\"     \u9810\u8655\u7406\u525b\u5408\u4f75\u597d\u7684 total_df \u4ee5\u7b26\u5408\u5f8c\u7e8c\u5efa\u6a21\u9700\u6c42\uff0c\u56de\u50b3\u578b\u614b\u70ba `DataFrame`\u3002     \"\"\"     print_info(\"PREPROCESSING TOTAL_DF START!\")     total_df.set_index('post_key', inplace=True)                                    # post_key \u6b04\u4f4d\u8a2d\u70ba\u7d22\u5f15     total_df['created_at_hour'] = pd.to_datetime(total_df['created_at_hour'])       # \u5c07 created_at_hour \u6b04\u4f4d\u8f49\u63db\u6210 datetime \u578b\u614b     total_df['weekday'] = total_df['created_at_hour'].dt.dayofweek                  # \u64f7\u53d6\u51fa\u767c\u6587\u7684 weekday     total_df['hour'] = total_df['created_at_hour'].dt.hour                          # \u64f7\u53d6\u51fa\u767c\u6587\u7684 hour     total_df.fillna(0, inplace=True)                                                # NaN \u503c\u88dc 0     # \u6839\u64da\u6536\u5230\u7684 tables \u662f\u5426\u6709 like_count_36_hour \u6b04\u4f4d\uff0c\u505a\u4e0d\u540c\u8655\u7406     if has_like_count_36_hour:         total_df['is_trending'] = 0+(total_df['like_count_36_hour']&gt;=1000)          # \u8f49\u63db\u6210 is_trending \u985e\u5225\u6b04\u4f4d         total_df = total_df.drop(['created_at_hour', 'like_count_36_hour'], axis=1) # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d     else:         total_df = total_df.drop(['created_at_hour'], axis=1)                       # drop \u6389\u4e0d\u5fc5\u8981\u7684\u6b04\u4f4d     # \u5c07\u8a08\u6b21\u6b04\u4f4d\u8f49\u63db\u6210 int \u578b\u614b     col_names = ['shared_count', 'comment_count', 'liked_count', 'collected_count']     for cn in col_names:         total_df[cn] = total_df[cn].astype(dtype='int')     print_info(\"DONE!\")     return total_df"},{"location":"side-projects/dcard-hw/training/","title":"Training","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre># \u532f\u5165\u5167\u5efa\u5957\u4ef6\nfrom argparse import ArgumentParser\nfrom pathlib import Path, PurePath\n</pre> # \u532f\u5165\u5167\u5efa\u5957\u4ef6 from argparse import ArgumentParser from pathlib import Path, PurePath In\u00a0[\u00a0]: Copied! <pre>def get_training_parser():\n    \"\"\"\n    \u521d\u59cb\u5316\u4e26\u56de\u50b3\u8a2d\u5b9a\u597d\u7684 `ArgumentParser` \u5be6\u9ad4\u3002\n    \"\"\"\n    parser = ArgumentParser()\n    # \u8a2d\u5b9a\u5fc5\u8981\u53c3\u6578\n    parser.add_argument('database', metavar='DATABASE',\n                        help='(Required) Database to use when connecting to server.')\n    parser.add_argument('output_path', metavar='OUTPUT_PATH',\n                        help='(Required) Best prediction model and cross validation results outputs file path.')\n    parser.add_argument('-u', dest='user', required=True, metavar='USERNAME',\n                        help='(Required) User for login if not current user.')\n    parser.add_argument('-p', dest='password', required=True, metavar='PASSWORD',\n                        help='(Required) Password to use when connecting to server.')\n    parser.add_argument('--host', required=True, metavar='HOSTNAME',\n                        help='(Required) Host address to connect.')\n    # \u8a2d\u5b9a\u9078\u7528\u53c3\u6578\n    parser.add_argument('--port', metavar='PORTNUMBER', default='5432',\n                        help='Port number to use for connection (default: 5432)')\n    parser.add_argument('--protocol', metavar='PROTOCOL', default='postgres',\n                        help='Protocol to connect. (default: postgres)')\n    return parser\n</pre> def get_training_parser():     \"\"\"     \u521d\u59cb\u5316\u4e26\u56de\u50b3\u8a2d\u5b9a\u597d\u7684 `ArgumentParser` \u5be6\u9ad4\u3002     \"\"\"     parser = ArgumentParser()     # \u8a2d\u5b9a\u5fc5\u8981\u53c3\u6578     parser.add_argument('database', metavar='DATABASE',                         help='(Required) Database to use when connecting to server.')     parser.add_argument('output_path', metavar='OUTPUT_PATH',                         help='(Required) Best prediction model and cross validation results outputs file path.')     parser.add_argument('-u', dest='user', required=True, metavar='USERNAME',                         help='(Required) User for login if not current user.')     parser.add_argument('-p', dest='password', required=True, metavar='PASSWORD',                         help='(Required) Password to use when connecting to server.')     parser.add_argument('--host', required=True, metavar='HOSTNAME',                         help='(Required) Host address to connect.')     # \u8a2d\u5b9a\u9078\u7528\u53c3\u6578     parser.add_argument('--port', metavar='PORTNUMBER', default='5432',                         help='Port number to use for connection (default: 5432)')     parser.add_argument('--protocol', metavar='PROTOCOL', default='postgres',                         help='Protocol to connect. (default: postgres)')     return parser In\u00a0[\u00a0]: Copied! <pre>def main(args):\n    # \u53d6\u5f97\u9023\u7dda\u5f15\u64ce\n    engine = preprocessing.get_connector(\n        user=args.user,\n        password=args.password,\n        host=args.host,\n        port=args.port,\n        database=args.database,\n        protocol=args.protocol\n    )\n    # \u53d6\u5f97\u8a13\u7df4\u968e\u6bb5\u6240\u9700\u7684 tables\uff0c\u63a5\u8457\u5408\u4f75\u3001\u9810\u8655\u7406\u6240\u6709 tables \u3002\n    table_names_train = ['posts_train', 'post_shared_train', 'post_comment_created_train',\n                         'post_liked_train', 'post_collected_train']\n    tables_train = preprocessing.get_tables(engine, table_names_train)\n    total_df_train = preprocessing.merge_tables(tables_train, table_names_train, how='left')\n    total_df_train = preprocessing.preprocess_total_df(total_df_train, \n                                                       has_like_count_36_hour=True)\n    # \u958b\u59cb\u8a13\u7df4\u6a21\u578b\n    preprocessing.print_info(\"TRAINING START!\")\n    # STEP 1: \u5efa\u7acb Pipeline\n    cachedir = mkdtemp()\n    pipe = Pipeline(steps=[('resampler', 'passthrough'),\n                           # ('columntransformer', 'passthrough'),\n                           ('classifier', 'passthrough')],\n                    memory=cachedir)\n    # poly_cols = ['shared_count', 'comment_count', 'liked_count', 'collected_count']\n    # col_trans = make_column_transformer((OneHotEncoder(dtype='int'), ['weekday']),\n    #                                     (PolynomialFeatures(include_bias=False), poly_cols),\n    #                                     remainder='passthrough')\n    # STEP 2: \u8a2d\u5b9a\u8d85\u53c3\u6578\u7a7a\u9593\u4ee5\u53ca\u8861\u91cf\u6307\u6a19\uff0c\u5efa\u7acb GridsearchCV\n    param_grid_ada = {\n        'resampler': ['passthrough', SMOTE(), NearMiss()],\n        # 'columntransformer': ['passthrough', col_trans],\n        'classifier': [AdaBoostClassifier()],\n        'classifier__n_estimators': [90, 100, 110, 120],\n        'classifier__base_estimator': [DecisionTreeClassifier(max_depth=1), \n                                       DecisionTreeClassifier(max_depth=2),\n                                       DecisionTreeClassifier(max_depth=3)]\n    }\n    param_grid_gb = {\n        'resampler': ['passthrough', SMOTE(), NearMiss()],\n        # 'columntransformer': ['passthrough', col_trans],\n        'classifier': [GradientBoostingClassifier(), XGBClassifier()],\n        'classifier__n_estimators': [90, 100, 110, 120],\n        'classifier__learning_rate': [0.025, 0.05, 0.1]\n    }\n    param_grid = [param_grid_ada, param_grid_gb]\n    scoring = {\n        'precision': 'precision',\n        'recall': 'recall',\n        'specificity': make_scorer(specificity_score),\n        'balanced_accuracy': 'balanced_accuracy',\n        'f1_score': 'f1',\n    }\n    grid_search = GridSearchCV(pipe, param_grid=param_grid, scoring=scoring, refit='f1_score', \n                               n_jobs=-1, cv=3, return_train_score=True)\n    # STEP 3: \u641c\u5c0b\u6700\u4f73\u8d85\u53c3\u6578\u7d44\u5408\u4e26\u5370\u51fa\u6240\u9700\u6642\u9593\n    start_time = time()\n    grid_search.fit(total_df_train.drop('is_trending', axis=1), total_df_train['is_trending'])\n    preprocessing.print_info(f\"GRID SEARCH: {time()-start_time:.2f} secs\")\n    # STEP 4: \u5c07\u6700\u4f73\u6a21\u578b\u548c\u4ea4\u53c9\u9a57\u8b49\u7d50\u679c\u5132\u5b58\u8d77\u4f86\n    output_path = PurePath(f'{args.output_path}')\n    model_name, results_name = PurePath('best_model.h5'), PurePath('cv_results.csv')\n    dump(grid_search.best_estimator_, str(output_path/model_name))\n    cv_results = pd.DataFrame(grid_search.cv_results_)\n    cv_results.to_csv(str(output_path/results_name), index=False, encoding='utf8')\n    rmtree(cachedir)\n    preprocessing.print_info(\"DONE!\")\n</pre> def main(args):     # \u53d6\u5f97\u9023\u7dda\u5f15\u64ce     engine = preprocessing.get_connector(         user=args.user,         password=args.password,         host=args.host,         port=args.port,         database=args.database,         protocol=args.protocol     )     # \u53d6\u5f97\u8a13\u7df4\u968e\u6bb5\u6240\u9700\u7684 tables\uff0c\u63a5\u8457\u5408\u4f75\u3001\u9810\u8655\u7406\u6240\u6709 tables \u3002     table_names_train = ['posts_train', 'post_shared_train', 'post_comment_created_train',                          'post_liked_train', 'post_collected_train']     tables_train = preprocessing.get_tables(engine, table_names_train)     total_df_train = preprocessing.merge_tables(tables_train, table_names_train, how='left')     total_df_train = preprocessing.preprocess_total_df(total_df_train,                                                         has_like_count_36_hour=True)     # \u958b\u59cb\u8a13\u7df4\u6a21\u578b     preprocessing.print_info(\"TRAINING START!\")     # STEP 1: \u5efa\u7acb Pipeline     cachedir = mkdtemp()     pipe = Pipeline(steps=[('resampler', 'passthrough'),                            # ('columntransformer', 'passthrough'),                            ('classifier', 'passthrough')],                     memory=cachedir)     # poly_cols = ['shared_count', 'comment_count', 'liked_count', 'collected_count']     # col_trans = make_column_transformer((OneHotEncoder(dtype='int'), ['weekday']),     #                                     (PolynomialFeatures(include_bias=False), poly_cols),     #                                     remainder='passthrough')     # STEP 2: \u8a2d\u5b9a\u8d85\u53c3\u6578\u7a7a\u9593\u4ee5\u53ca\u8861\u91cf\u6307\u6a19\uff0c\u5efa\u7acb GridsearchCV     param_grid_ada = {         'resampler': ['passthrough', SMOTE(), NearMiss()],         # 'columntransformer': ['passthrough', col_trans],         'classifier': [AdaBoostClassifier()],         'classifier__n_estimators': [90, 100, 110, 120],         'classifier__base_estimator': [DecisionTreeClassifier(max_depth=1),                                         DecisionTreeClassifier(max_depth=2),                                        DecisionTreeClassifier(max_depth=3)]     }     param_grid_gb = {         'resampler': ['passthrough', SMOTE(), NearMiss()],         # 'columntransformer': ['passthrough', col_trans],         'classifier': [GradientBoostingClassifier(), XGBClassifier()],         'classifier__n_estimators': [90, 100, 110, 120],         'classifier__learning_rate': [0.025, 0.05, 0.1]     }     param_grid = [param_grid_ada, param_grid_gb]     scoring = {         'precision': 'precision',         'recall': 'recall',         'specificity': make_scorer(specificity_score),         'balanced_accuracy': 'balanced_accuracy',         'f1_score': 'f1',     }     grid_search = GridSearchCV(pipe, param_grid=param_grid, scoring=scoring, refit='f1_score',                                 n_jobs=-1, cv=3, return_train_score=True)     # STEP 3: \u641c\u5c0b\u6700\u4f73\u8d85\u53c3\u6578\u7d44\u5408\u4e26\u5370\u51fa\u6240\u9700\u6642\u9593     start_time = time()     grid_search.fit(total_df_train.drop('is_trending', axis=1), total_df_train['is_trending'])     preprocessing.print_info(f\"GRID SEARCH: {time()-start_time:.2f} secs\")     # STEP 4: \u5c07\u6700\u4f73\u6a21\u578b\u548c\u4ea4\u53c9\u9a57\u8b49\u7d50\u679c\u5132\u5b58\u8d77\u4f86     output_path = PurePath(f'{args.output_path}')     model_name, results_name = PurePath('best_model.h5'), PurePath('cv_results.csv')     dump(grid_search.best_estimator_, str(output_path/model_name))     cv_results = pd.DataFrame(grid_search.cv_results_)     cv_results.to_csv(str(output_path/results_name), index=False, encoding='utf8')     rmtree(cachedir)     preprocessing.print_info(\"DONE!\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    # \u53d6\u5f97\u89e3\u6790\u5668\u5be6\u9ad4\u4e26\u89e3\u6790\u547d\u4ee4\u5217\u53c3\u6578\n    parser = get_training_parser()\n    args = parser.parse_args()\n    # \u78ba\u4fdd\u8f38\u51fa\u8def\u5f91\u6b63\u78ba\n    assert Path(f'{args.output_path}').is_dir(), \"Output directory doesn't exist.\"\n    # \u532f\u5165\u5167\u5efa\u5957\u4ef6\n    from tempfile import mkdtemp\n    from shutil import rmtree\n    from time import time\n    # \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6\n    import pandas as pd\n    from xgboost.sklearn import XGBClassifier\n    from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import GridSearchCV\n    from sklearn.preprocessing import PolynomialFeatures, OneHotEncoder\n    from sklearn.compose import make_column_transformer\n    from sklearn.metrics import make_scorer\n    from imblearn.pipeline import Pipeline\n    from imblearn.metrics import specificity_score\n    from imblearn.over_sampling import SMOTE\n    from imblearn.under_sampling import NearMiss\n    from joblib import dump\n    # \u532f\u5165\u81ea\u884c\u7dad\u8b77\u7684\u5957\u4ef6\n    import preprocessing\n    main(args)\n</pre> if __name__ == '__main__':     # \u53d6\u5f97\u89e3\u6790\u5668\u5be6\u9ad4\u4e26\u89e3\u6790\u547d\u4ee4\u5217\u53c3\u6578     parser = get_training_parser()     args = parser.parse_args()     # \u78ba\u4fdd\u8f38\u51fa\u8def\u5f91\u6b63\u78ba     assert Path(f'{args.output_path}').is_dir(), \"Output directory doesn't exist.\"     # \u532f\u5165\u5167\u5efa\u5957\u4ef6     from tempfile import mkdtemp     from shutil import rmtree     from time import time     # \u532f\u5165\u7b2c\u4e09\u65b9\u5957\u4ef6     import pandas as pd     from xgboost.sklearn import XGBClassifier     from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier     from sklearn.tree import DecisionTreeClassifier     from sklearn.model_selection import GridSearchCV     from sklearn.preprocessing import PolynomialFeatures, OneHotEncoder     from sklearn.compose import make_column_transformer     from sklearn.metrics import make_scorer     from imblearn.pipeline import Pipeline     from imblearn.metrics import specificity_score     from imblearn.over_sampling import SMOTE     from imblearn.under_sampling import NearMiss     from joblib import dump     # \u532f\u5165\u81ea\u884c\u7dad\u8b77\u7684\u5957\u4ef6     import preprocessing     main(args)"},{"location":"side-projects/dcard-hw/docs/1-summary/","title":"\u6458\u8981","text":"<pre><code>$ tree\n.\n\u251c\u2500\u2500 eda_evaluation.ipynb\uff1a\u7528\u4f86\u532f\u51fa\u5716\u793a\u7684\u7b46\u8a18\u672c\n\u251c\u2500\u2500 outputs\n\u2502   \u251c\u2500\u2500 best_model.h5\uff1a\u8a13\u7df4\u904e\u5f8c\u5f97\u5230\u7684\u6700\u4f73\u6a21\u578b\n\u2502   \u251c\u2500\u2500 cv_results.csv\uff1a\u4ea4\u53c9\u9a57\u8b49\u7d50\u679c\n\u2502   \u2514\u2500\u2500 output.csv\uff1a\u516c\u958b\u8cc7\u6599\u96c6\u7684\u9810\u6e2c\u7d50\u679c\n\u251c\u2500\u2500 predict.py\uff1a\u9810\u6e2c\u7528\u7684 utility\n\u251c\u2500\u2500 preprocessing.py\uff1a\u5169\u500b utilities \u5171\u7528\u7684\u51fd\u5f0f\uff0c\u5305\u62ec\u8cc7\u6599\u5eab\u9023\u7dda\u3001\u524d\u8655\u7406\u7b49\n\u251c\u2500\u2500 requirement.txt\uff1aPython \u6240\u9700\u5957\u4ef6\u53ca\u5176\u7248\u672c\u6e05\u55ae\n\u2514\u2500\u2500 training.py\uff1a\u8a13\u7df4\u7528\u7684 utility\n</code></pre> <p>\u8a13\u7df4\u96c6\u7684\u6587\u7ae0\u6db5\u84cb\u65e5\u671f\u7bc4\u570d\u5f9e 2019 \u5e74\u7684 4 \u6708 1 \u65e5\u958b\u59cb\uff0c\u6301\u7e8c\u5230\u540c\u5e74 10 \u6708\u5e95\uff0c\u5171 7 \u500b\u6708\u5de6\u53f3\u3002\u7e3d\u7bc7\u6578\u6709 79.3 \u842c\u7bc7\u5de6\u53f3\uff0c\u5176\u4e2d\u7d04\u6709 2.32% \u7684\u6587\u7ae0\u662f\u71b1\u9580\u6587\u7ae0\uff0c\u7d04\u83ab\u662f 1.8 \u842c\u7bc7\u3002\u900f\u904e\u63a2\u7d22\u6027\u8cc7\u6599\u5206\u6790\uff0c\u6211\u5011\u767c\u73fe\u8b8a\u6578\u4e4b\u9593\u7684\u76f8\u95dc\u6027\u666e\u904d\u504f\u9ad8\uff0c\u4e14\u5728\u4ec0\u9ebc\u6642\u9593\u9ede\u767c\u6587\u78ba\u5be6\u6703\u5f71\u97ff\u71b1\u9580\u6587\u7ae0\u7684\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u3002</p> <p>\u6211\u5011\u6c7a\u5b9a\u4ee5\u300c\u4e0d\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a\u300d\u7684\u300c\u4e8c\u5143\u5206\u985e\u6a21\u578b\u300d\u4f5c\u70ba\u6211\u5011\u7684\u4e3b\u8981\u5167\u5bb9\uff0c\u4e26\u4e14\u805a\u7126\u5728\u4e0d\u5e73\u8861\u8cc7\u6599\u96c6\u7684\u8655\u7406\u3001tree-based \u96c6\u6210\u6a21\u578b\u548c\u5f8c\u7e8c\u8a0e\u8ad6\u4e0a\u3002\u5728\u8a13\u7df4\u904e\u7a0b\u4e2d\uff0c\u4e3b\u8981\u53ef\u5206\u70ba\u4e09\u500b\u968e\u6bb5\uff1a 1. \u91cd\u62bd\u6a23\uff08resampling\uff09 2. \u6b04\u4f4d\u8f49\u63db\uff08column transformation\uff09 3. \u5206\u985e\uff08classification\uff09</p> <p>\u7d93\u7531\u5617\u8a66\uff0c\u6211\u5011\u6c7a\u5b9a\u7701\u7565\u4e86\u300c\u7279\u5fb5\u8f49\u63db\u300d\u968e\u6bb5\uff0c\u6700\u7d42\u5171\u6709 108 \u7a2e\u7d44\u5408\u9700\u8981\u5617\u8a66\uff0c\u900f\u904e <code>GridSearchCV</code> \u627e\u5c0b\u6700\u4f73\u7d44\u5408\uff0c\u8a2d\u5b9a <code>cv=3</code>\u3002</p> <p>\u4ee5 f1-score \u4f5c\u70ba\u6a21\u578b\u8861\u91cf\u6307\u6a19\uff0c\u6700\u4f73\u6a21\u578b\u662f\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u7684 <code>AdaBoostClassifier</code>\uff0c\u5167\u90e8\u5171\u6709 100 \u68f5\u6a39\u6df1\u9650\u5236\u70ba 2 \u5c64\u7684\u6c7a\u7b56\u6a39\uff0c\u4ea4\u53c9\u9a57\u8b49\u7684\u5e73\u5747 f1-score \u662f 0.56\u3002\u5176\u5728\u516c\u958b\u6e2c\u8a66\u96c6\u7684 f1-score \u5247\u662f 0.53\u3002\u5be6\u9a57\u904e\u7a0b\u6709\u5e7e\u500b\u7d50\u8ad6\uff1a - \u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u78ba\u5be6\u6703\u5c0d f1-score \u9020\u6210\u5f71\u97ff\u3002 - \u91cd\u62bd\u6a23\u7b56\u7565\u78ba\u5be6\u80fd\u6355\u6349\u5230\u5be6\u969b\u4e0a\u70ba\u71b1\u9580\u7684\u6587\u7ae0\uff0c\u4f46\u53d6\u800c\u4ee3\u4e4b\u7684\u5c31\u662f\u6211\u5011\u4e0d\u592a\u80fd\u76f8\u4fe1\u5b83\u6240\u9810\u6e2c\u7684\u71b1\u9580\u6587\u7ae0\uff0c\u5be6\u969b\u4e0a\u78ba\u5be6\u4e5f\u662f\u71b1\u9580\u6587\u7ae0\u3002 - \u5728\u300cSMOTE \u91cd\u62bd\u6a23\u7b56\u7565\u300d\u4ee5\u53ca\u300c\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u300d\u7684\u60c5\u6cc1\u5e95\u4e0b\uff0c\u4e0d\u540c\u7684\u5206\u985e\u5668\u9078\u64c7\u4e26\u4e0d\u6703\u9020\u6210 f1-score \u5927\u5e45\u5ea6\u7684\u8b8a\u5316\u3002 - \u4e0d\u540c\u7684\u5206\u985e\u5668\u9078\u64c7\u5c0d f1-score \u9020\u6210\u7684\u5f71\u97ff\u4e26\u4e0d\u5927\u3002</p> <p>\u6700\u5f8c\u6211\u5011\u4e5f\u8a0e\u8ad6\u4e86\u5e7e\u500b\u53ef\u80fd\u7684\u672a\u4f86\u65b9\u5411\uff0c\u5305\u62ec\u8003\u616e\u5176\u5b83\u91cd\u62bd\u6a23\u6280\u8853\u3001\u5176\u5b83\u8861\u91cf\u6307\u6a19\u3001\u5e8f\u5217\u8cc7\u8a0a\u7b49\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/","title":"\u63a2\u7d22\u6027\u8cc7\u6599\u5206\u6790 (EDA)","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u62ff\u5230\u8cc7\u6599\u96c6\u6642\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u89c0\u5bdf\u8cc7\u6599\u96c6\u7684\u76f8\u95dc\u8cc7\u8a0a\uff0c\u5305\u62ec\u5404 tables \u7684\u8cc7\u6599\u7b46\u6578\u3001\u6b04\u4f4d\u7b49\u3002\u4ee5\u4e0b\u662f 2020/04/13 \u66f4\u65b0\u904e\u5f8c\u7684\u8cc7\u6599\u96c6\u76f8\u95dc\u8cc7\u8a0a\uff1a</p> <pre><code>posts_train                \u7e3d\u5171\u6709   793,751 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\nposts_test                 \u7e3d\u5171\u6709   225,986 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_shared_train          \u7e3d\u5171\u6709   304,260 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_shared_test           \u7e3d\u5171\u6709    83,376 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_comment_created_train \u7e3d\u5171\u6709 2,372,228 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_comment_created_test  \u7e3d\u5171\u6709   607,251 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_liked_train           \u7e3d\u5171\u6709 3,395,903 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_liked_test            \u7e3d\u5171\u6709   908,910 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_collected_train       \u7e3d\u5171\u6709 1,235,126 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_collected_test        \u7e3d\u5171\u6709   275,073 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\n</code></pre> <p>\u4e3b\u8981\u53ef\u5206\u70ba\u8a13\u7df4\u96c6\u548c\u6e2c\u8a66\u96c6\u5169\u985e\u3002\u70ba\u907f\u514d data leakage\uff0c\u5728\u9032\u884c EDA \u6642\u50c5\u80fd\u89c0\u5bdf\u8a13\u7df4\u96c6\uff0c\u56e0\u6b64\u6211\u5011\u5148\u628a\u6e2c\u8a66\u96c6\u6709\u95dc\u7684 tables \u5148\u64f1\u7f6e\u5728\u4e00\u65c1\uff0c\u4e0d\u4e88\u4ee5\u8a0e\u8ad6\u3002</p> <p>\u8a13\u7df4\u96c6\u7684\u6587\u7ae0\u6db5\u84cb\u65e5\u671f\u7bc4\u570d\u5f9e 2019 \u5e74\u7684 4 \u6708 1 \u65e5\u958b\u59cb\uff0c\u6301\u7e8c\u5230\u540c\u5e74 10 \u6708\u5e95\uff0c\u5171 7 \u500b\u6708\u5de6\u53f3\u3002\u7e3d\u7bc7\u6578\u6709 79.3 \u842c\u7bc7\u5de6\u53f3\u3002\u6211\u5011\u7684\u76ee\u7684\u5c31\u662f\u8981\u5efa\u7acb\u4e00\u500b\u9810\u6e2c\u6a21\u578b\uff0c\u6839\u64da\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u5e8f\u5217\u8cc7\u6599\uff0c\u5305\u62ec\u4e86\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u3001\u6536\u85cf\u6578\uff0c\u53bb\u9810\u6e2c\u767c\u6587 36 \u5c0f\u6642\u5167\u662f\u5426\u80fd\u9054\u5230 1,000 \u9846\u611b\u5fc3\uff0c\u5373\u300c\u71b1\u9580\u6587\u7ae0\u300d\u3002</p> <p>\u8a13\u7df4\u96c6\u7576\u4e2d\u7d04\u6709 2.32% \u7684\u6587\u7ae0\u662f\u71b1\u9580\u6587\u7ae0\uff0c\u7d04\u83ab\u662f 1.8 \u842c\u7bc7\u3002\u5f88\u660e\u986f\u5730\uff0c\u8a13\u7df4\u96c6\u662f\u4e0d\u5e73\u8861\u7684\u8cc7\u6599\u96c6\uff08imbalanced dataset\uff09\u3002\u56e0\u6b64\uff0c\u5728\u8cc7\u6599\u524d\u8655\u7406\u968e\u6bb5\u53ef\u80fd\u9700\u8981\u8003\u616e over/undersampling \u7684\u65b9\u6cd5\u3002\u4e0d\u50c5\u5982\u6b64\uff0c\u5728\u6700\u5f8c\u7684\u8a55\u4f30\u968e\u6bb5\u4e5f\u8981\u8a0e\u8ad6\u5176\u5b83\u53ef\u80fd\u7684\u5206\u985e\u6210\u6548\u6307\u6a19\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_1","title":"\u554f\u984c\u5b9a\u7fa9","text":"<p>\u6839\u64da\u984c\u76ee\uff0c\u6b64\u4efd\u4f5c\u696d\u4e3b\u8981\u53ef\u4ee5\u6709\u56db\u7a2e\u505a\u6cd5\uff0c\u4e5f\u5c31\u662f\u300c\u8003\u4e0d\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a\u300d\u548c\u300c\u8ff4\u6b78\u9810\u6e2c\uff0f\u4e8c\u5143\u5206\u985e\u300d\u9019\u5169\u500b\u8ef8\u5ea6\u7684\u4ea4\u53c9\u7d44\u5408\u3002\u53ef\u80fd\u7684\u4f5c\u6cd5\u5982\u4e0b\uff1a</p> \u8ff4\u6b78\u9810\u6e2c \u4e8c\u5143\u5206\u985e \u8003\u616e\u5e8f\u5217\u8cc7\u8a0a \u5faa\u74b0\u5f0fNN\uff08RNN, GRU  etc.\uff09  \u50b3\u7d71TS\u554f\u984c\uff08ARMA, ARIMA etc.\uff09 \u540c\u5de6 \u4e0d\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a Poisson \u8ff4\u6b78, SVM, tree-based \u6a21\u578b etc. Logistic \u8ff4\u6b78, SVM, tree-based \u6a21\u578b etc. <p>\u6700\u4f73\u7d44\u5408\u80af\u5b9a\u662f\u300c\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a\u300d\u548c\u300c\u8ff4\u6b78\u9810\u6e2c\u300d\uff0c\u6839\u64da\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u6578\u3001\u8a55\u8ad6\u6578\u7b49\u6b04\u4f4d\u7684\u300c\u6642\u9593\u8da8\u52e2\u300d\uff0c\u53bb\u9810\u6e2c\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u300c\u611b\u5fc3\u7e3d\u6578\u300d\uff0c\u6700\u5f8c\u518d\u6839\u64da\u95a5\u503c\uff08\u611b\u5fc3\u7e3d\u6578\u5927\u65bc\u7b49\u65bc 1,000 \u7b49\uff09\u5224\u65b7\u662f\u5426\u70ba\u300c\u71b1\u9580\u6587\u7ae0\u300d\u3002</p> <p>\u7136\u800c\uff0c\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u5c07\u554f\u984c\u7c21\u5316\u6210\u4e0d\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a\u7684\u4e8c\u5143\u5206\u985e\u554f\u984c\uff0c\u4e5f\u5c31\u662f\u5c07\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u6578\u3001\u8a55\u8ad6\u6578\u7b49\u6b04\u4f4d\u500b\u5225\u52a0\u7e3d\u8d77\u4f86\uff0c\u5efa\u7acb\u500b\u4e8c\u5143\u5206\u985e\u6a21\u578b\uff0c\u9810\u6e2c\u6587\u7ae0\u662f\u5426\u70ba\u300c\u71b1\u9580\u6587\u7ae0\u300d\u3002</p> <p>\u56e0\u6642\u9593\u8003\u91cf\u4ee5\u53ca\u5831\u544a\u5b8c\u6574\u6027\uff0c\u6211\u5011\u6c7a\u5b9a\u4ee5\u300c\u4e0d\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a\u300d\u7684\u300c\u4e8c\u5143\u5206\u985e\u6a21\u578b\u300d\u4f5c\u70ba\u6211\u5011\u4e3b\u8981\u7684\u5167\u5bb9\uff0c\u4e26\u4e14\u805a\u7126\u5728\u4e0d\u5e73\u8861\u8cc7\u6599\u96c6\u7684\u8655\u7406\u3001tree-based \u6a21\u578b\u548c\u5f8c\u7e8c\u8a0e\u8ad6\u4e0a\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_2","title":"\u8b8a\u6578\u9593\u7684\u7dda\u6027\u95dc\u4fc2","text":"<p>\u6211\u5011\u53ef\u4ee5\u5c07\u8cc7\u6599\u96c6\u7c21\u5316\u6210\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u5206\u4eab\u7e3d\u6578\u3001\u8a55\u8ad6\u7e3d\u6578\u3001\u611b\u5fc3\u7e3d\u6578\u548c\u6536\u85cf\u7e3d\u6578\uff0c\u4e26\u900f\u904e\u76f8\u95dc\u4fc2\u6578\u5716\u71b1\u9ede\u5716 (heatmap)\uff0c\u89c0\u5bdf\u5b83\u5011\u5f7c\u6b64\u4e4b\u9593\u548c\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u7684\u95dc\u4fc2\u5427\uff1a</p> <p></p> <p>Info</p> <p>\u5f9e\u9019\u5f35\u5716\u53ef\u4ee5\u767c\u73fe\u5e7e\u4ef6\u4e8b\uff1a</p> <ul> <li>\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u8207 10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u5448\u73fe\u4e2d\u5ea6\u7dda\u6027\u6b63\u76f8\u95dc\uff08.58\uff09\uff1b\u8207\u5206\u4eab\u7e3d\u6578\u3001\u6536\u85cf\u7e3d\u6578\u5448\u73fe\u4e2d\u5ea6\u7dda\u6027\u6b63\u76f8\u95dc\uff08.36\uff09\uff1b\u8207\u8a55\u8ad6\u7e3d\u6578\u5448\u73fe\u4f4e\u5ea6\u7dda\u6027\u6b63\u76f8\u95dc\uff08.17\uff09\u3002</li> <li>\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u8207\u5206\u4eab\u7e3d\u6578\u3001\u6536\u85cf\u7e3d\u6578\u5448\u73fe\u4e2d\u5ea6\u7dda\u6027\u6b63\u76f8\u95dc\uff0c\u76f8\u95dc\u4fc2\u6578\u5206\u5225\u70ba .63 \u548c .61\u3002</li> <li>\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u5206\u4eab\u7e3d\u6578\u548c\u6536\u85cf\u7e3d\u6578\u5448\u73fe\u4e2d\u5ea6\u7dda\u6027\u6b63\u76f8\u95dc\uff08.48\uff09\u3002</li> </ul> <p>\u8b1b\u767d\u8a71\u6587\uff0c\u5c31\u662f\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u6578\u8d8a\u591a\uff0c\u666e\u904d\u4e5f\u53ef\u4ee5\u89c0\u5bdf\u5230\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u5206\u4eab\u6578\u3001\u6536\u85cf\u6578\u8d8a\u591a\uff1b\u7136\u800c\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\uff0c\u6bd4\u8d77\u5176\u5b83\u8b8a\u6578\uff0c\u9084\u662f\u8207\u767c\u6587 10 \u5c0f\u6642\u5167\u6240\u5f97\u5230\u7684\u611b\u5fc3\u6578\u8f03\u76f8\u95dc\u3002\u6587\u7ae0\u7684\u8a55\u8ad6\u591a\u5be1\u666e\u904d\u4e0a\u4e0d\u6703\u8207\u767c\u6587 36 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\u6709\u592a\u5927\u7684\u76f8\u95dc\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_3","title":"\u5404\u9805\u6307\u6a19\u71b1\u9ede\u5716","text":"<p>Danger</p> <p>\u70ba\u907f\u514d\u66b4\u9732\u904e\u591a Dcard \u7684\u5546\u696d\u8cc7\u8a0a\uff0c\u5716\u4e2d\u90fd\u4e0d\u986f\u793a\u8272\u689d\uff08<code>cbar=False</code>\uff09\uff0c\u53ea\u986f\u793a\u76f8\u5c0d\u95dc\u4fc2\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_4","title":"\u767c\u6587\u7e3d\u6578","text":"<p>\u518d\u4f86\uff0c\u6211\u5011\u4f86\u89c0\u5bdf\u5728\u4e0d\u540c\u7684\u6642\u9593\u5340\u6bb5\u4e4b\u4e0b\u7684\u767c\u6587\u7e3d\u6578\u662f\u5426\u6709\u6240\u4e0d\u540c\uff1a</p> <p></p> <p>\u6a6b\u8ef8\u662f 24 \u5c0f\u6642\uff0c\u7e31\u8ef8\u662f\u661f\u671f\u4e00\u81f3\u661f\u671f\u65e5\u3002</p> <p>Info</p> <p>\u6211\u5011\u53ef\u4ee5\u89c0\u5bdf\u5230\u5e7e\u500b\u73fe\u8c61\uff1a</p> <ul> <li>\u4e0d\u8ad6\u5e73\u65e5\u6216\u5047\u65e5\uff0c\u767c\u6587\u591a\u96c6\u4e2d\u65bc\u4e2d\u5348\u3001\u4e0b\u5348\u3001\u508d\u665a\u6642\u6bb5\uff0812:00 - 18:00\uff09\uff0c\u5e73\u65e5\u7565\u9ad8\u65bc\u5047\u65e5\u3002</li> <li>\u6b21\u9ad8\u7684\u767c\u6587\u71b1\u9580\u6642\u6bb5\u662f\u5e73\u65e5\u7684\u65e9\u4e0a\u6642\u6bb5\uff0805:00 - 12:00\uff09\u3002</li> <li>\u4e0d\u8ad6\u5e73\u65e5\u6216\u5047\u65e5\uff0c\u665a\u4e0a\u6642\u6bb5\uff0818:00 - 01:00\uff09\u7684\u767c\u6587\u6578\u7e3d\u662f\u76f8\u5c0d\u8f03\u5c11\u3002</li> </ul> <p>\u9019\u4e9b\u73fe\u8c61\u4e5f\u7b97\u662f\u5408\u60c5\u5408\u7406\uff0c\u5927\u5b78\u751f\u4e3b\u8981\u767c\u6587\u90fd\u662f\u96c6\u4e2d\u5728\u767d\u5929\uff0c\u665a\u4e0a\u53ef\u80fd\u6709\u4e8b\u8981\u5fd9\uff0c\u6240\u4ee5\u767c\u6587\u6578\u8f03\u5c11\u3002\u552f\u4e00\u6bd4\u8f03\u4e0d\u5408\u7406\u7684\u662f\u70ba\u4ec0\u9ebc\u6e05\u6668\u6642\u6bb5\u767c\u6587\u6578\u4e5f\u4e0d\u7b97\u5c11\uff1f\uff08\u521d\u6b65\u63a8\u4f30\u6709\u53ef\u80fd\u662f\u5404\u5bb6\u516c\u53f8\u9700\u8981\u8d95\u5728\u5927\u5b78\u751f\u8d77\u5e8a\u524d\u767c\u6587\uff0c\u56e0\u6b64\u56fa\u5b9a\u6703\u5728\u51cc\u6668\u767c\u6587\uff09</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_5","title":"\u71b1\u9580\u6587\u7ae0\u6bd4\u4f8b","text":"<p>\u89c0\u5bdf\u5b8c\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u767c\u6587\u7e3d\u6578\u5f8c\uff0c\u6211\u5011\u63a5\u8457\u60f3\u8981\u77e5\u9053\u5728\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u71b1\u9580\u6587\u7ae0\u6bd4\u4f8b\u5982\u4f55\uff1f\u662f\u5426\u5728\u67d0\u4e9b\u6642\u6bb5\u4e0b\u767c\u6587\uff0c\u66f4\u5bb9\u6613\u6210\u70ba\u71b1\u9580\u6587\u7ae0\uff1f</p> <p></p> <p>Info</p> <p>\u6211\u5011\u53ef\u4ee5\u767c\u73fe\uff0c\u5728\u665a\u9593\u6642\u6bb5\u548c\u5047\u65e5\u51cc\u6668\u6642\u6bb5\u7684\u767c\u6587\uff0c\u6703\u6709\u6bd4\u8f03\u9ad8\u7684\u6bd4\u4f8b\u662f\u71b1\u9580\u6587\u7ae0\uff0c\u521d\u6b65\u63a8\u4f30\u662f\u56e0\u70ba\u4f7f\u7528\u8005\u901a\u5e38\u90fd\u5728\u9019\u6642\u5019\u6d3b\u7d61\u3002\u900f\u904e\u71b1\u9ede\u5716\u53ef\u4ee5\u77e5\u9053\uff0c\u71b1\u9580\u6587\u7ae0\u7684\u6bd4\u4f8b\u78ba\u5be6\u6703\u56e0\u70ba\u4e0d\u540c\u6642\u6bb5\u4e0b\u800c\u6709\u6240\u4e0d\u540c\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#10","title":"\u524d 10 \u5c0f\u6642\u5167\u7684\u5e73\u5747\u611b\u5fc3\u7e3d\u6578","text":"<p>\u6211\u5011\u63a5\u8457\u4f86\u89c0\u5bdf\u5728\u4e0d\u540c\u6642\u6bb5\u4e0b\u7684\u767c\u6587\uff0c\u5176 10 \u5c0f\u6642\u5167\u7684\u5e73\u5747\u611b\u5fc3\u6578\u662f\u5426\u6709\u6240\u4e0d\u540c\uff1f</p> <p></p> <p>Info</p> <p>\u6211\u5011\u53ef\u4ee5\u89c0\u5bdf\u5230\u5169\u500b\u73fe\u8c61\uff1a</p> <ul> <li>\u5f9e\u665a\u4e0a\u5ef6\u7e8c\u81f3\u65e9\u4e0a\u6642\u6bb5\u7684\u767c\u6587\uff0821:00 - 11:00\uff09\uff0c10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\uff0c\u5e73\u5747\u800c\u8a00\u666e\u904d\u8f03\u591a\u3002</li> <li>\u5f9e\u4e2d\u5348\u5ef6\u7e8c\u81f3\u665a\u4e0a\u6642\u6bb5\u7684\u767c\u6587\uff0811:00 - 21:00\uff09\uff0c10 \u5c0f\u6642\u5167\u7684\u611b\u5fc3\u7e3d\u6578\uff0c\u5e73\u5747\u800c\u8a00\u666e\u904d\u8f03\u5c11\uff0c\u5c24\u5176\u662f\u5728\u508d\u665a\u3001\u665a\u9910\u6642\u6bb5\u3002</li> </ul> <p>\u6703\u6709\u5982\u6b64\u7684\u5dee\u7570\u521d\u6b65\u63a8\u4f30\u662f\u56e0\u70ba\u508d\u665a\u3001\u665a\u9910\u6642\u6bb5\u662f\u5927\u5b78\u751f\u4e0b\u8ab2\u3001\u5403\u98ef\u7684\u6642\u6bb5\uff0c\u8f03\u5c11\u4eba\u6703\u700f\u89bdDcard\uff1b\u800c\u665a\u9593\u662f\u5927\u5b78\u751f\u6d3b\u7d61\u7684\u6642\u6bb5\uff0c\u6703\u6709\u8f03\u591a\u4eba\u4f7f\u7528 Dard\uff1b\u800c\u51cc\u6668\u767c\u6587\u8f03\u5c11\uff0c\u9694\u5929\u65e9\u4e0a\u5927\u5b78\u751f\u901a\u5e38\u4e5f\u80fd\u770b\u5230\u51cc\u6668\u7684\u767c\u6587\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#36","title":"\u524d 36 \u5c0f\u6642\u5167\u7684\u5e73\u5747\u611b\u5fc3\u7e3d\u6578","text":"<p>\u6211\u5011\u6700\u5f8c\u5247\u662f\u4f86\u770b\u770b\u5728\u4e0d\u540c\u6642\u6bb5\u4e0b\u767c\u6587\uff0c\u5176 36 \u5c0f\u6642\u5167\u7684\u5e73\u5747\u611b\u5fc3\u6578\u662f\u5426\u6709\u6240\u4e0d\u540c\uff1f</p> <p></p> <p>\u5927\u81f4\u4e0a\u7684\u8da8\u52e2\u90fd\u8ddf\u524d\u9762\u4e00\u81f4\uff0c\u56e0\u6b64\u4e0d\u591a\u505a\u8d05\u8ff0\u3002</p>"},{"location":"side-projects/dcard-hw/docs/2-eda/#_6","title":"\u5c0f\u7d50","text":"<p>Info</p> <p>\u5927\u81f4\u4e0a\u767c\u73fe\u5169\u4ef6\u4e8b\uff1a</p> <ul> <li>\u8b8a\u6578\u4e4b\u9593\u7684\u76f8\u95dc\u6027\u666e\u904d\u504f\u9ad8\uff0c\u82e5\u5728\u7279\u5fb5\u5de5\u7a0b\u6642\uff0c\u5c07\u9019\u4e9b\u6b04\u4f4d\u7d93\u904e\u591a\u9805\u5f0f\u8f49\u63db\uff08<code>PolynomialFeatures</code>\uff09\u7684\u8a71\uff0c\u6548\u679c\u53ef\u80fd\u4e26\u4e0d\u5982\u9810\u671f\u3002</li> <li>\u5728\u4ec0\u9ebc\u6642\u9593\u9ede\u767c\u6587\u78ba\u5be6\u6703\u5f71\u97ff\u71b1\u9580\u6587\u7ae0\u7684\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u611b\u5fc3\u6578\u3002\u5fc5\u9808\u5c07\u5176\u8cc7\u8a0a\u7d0d\u5165\u6a21\u578b\u8003\u616e\u4e4b\u4e2d\u3002</li> </ul>"},{"location":"side-projects/dcard-hw/docs/3-training/","title":"\u7279\u5fb5\u5de5\u7a0b","text":"<p>\u7d93\u904e\u63a2\u7d22\u6027\u8cc7\u6599\u5206\u6790\u5f8c\uff0c\u6211\u5011\u5c0d\u8a13\u7df4\u96c6\u53c8\u66f4\u8a8d\u8b58\u4e86\u4e9b\u3002\u5728\u9032\u884c\u7279\u5fb5\u5de5\u7a0b\u524d\uff0c\u6211\u5011\u6703\u5148\u5c07\u6211\u5011\u7684\u8a13\u7df4\u96c6\u521d\u6b65\u6574\u7406\u6210\u4ee5\u4e0b\u683c\u5f0f\uff1a <pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 793751 entries, 0 to 793750\nData columns (total 8 columns):\npost_key           793751 non-null object\nshared_count       793751 non-null int64\ncomment_count      793751 non-null int64\nlike_count         793751 non-null int64\ncollected_count    793751 non-null int64\nweekday            793751 non-null int64\nhour               793751 non-null int64\nis_trending        793751 non-null int64\ndtypes: bool(1), int64(6), object(1)\nmemory usage: 43.1+ MB\n</code></pre></p> <p>\u800c\u5728\u672c\u7bc0\u88e1\u6211\u5011\u6703\u8ac7\u5230\u6574\u500b data pipeline \u904e\u7a0b\u5c07\u6703\u4f7f\u7528\u5230\u7684\u6280\u8853\u548c\u6a21\u578b\uff0c\u5305\u62ec\u4e86 over/undersampling\uff0c\u591a\u9805\u5f0f\u8f49\u63db\u3001One-hot \u7de8\u78bc\u548c Tree-based \u6a21\u578b\u3002</p> <p>Info</p> <p>\u5728\u8a13\u7df4\u904e\u7a0b\u4e2d\uff0c\u4e3b\u8981\u53ef\u5206\u70ba\u4e09\u500b\u968e\u6bb5\uff1a</p> <ol> <li>\u91cd\u62bd\u6a23\uff08resampling\uff09</li> <li>\u6b04\u4f4d\u8f49\u63db\uff08column transformation\uff09</li> <li>\u5206\u985e\uff08classification\uff09</li> </ol> <p>\u5be6\u969b\u4e0a\uff0c\u6211\u5011\u53ef\u5c07\u4e0a\u8ff0\u7684\u4e09\u500b\u968e\u6bb5\u8868\u793a\u70ba\u4ee5\u4e0b\u7684 <code>Pipeline</code> \u5be6\u9ad4\uff1a</p> <p><pre><code>cachedir = mkdtemp()\npipe = Pipeline(steps=[('resampler', 'passthrough'),\n                       # ('columntransformer', 'passthrough'),\n                       ('classifier', 'passthrough')],\n                memory=cachedir)\n</code></pre> \u5728\u6bcf\u500b\u968e\u6bb5\u6211\u5011\u90fd\u6703\u9078\u64c7\u5169\u5230\u4e09\u7a2e\u4e0d\u540c\u4f5c\u6cd5\u548c\u5e7e\u7d44\u8d85\u53c3\u6578\u8a2d\u5b9a\uff0c\u8a66\u5716\u627e\u51fa\u6700\u4f73\u7d44\u5408\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#stage-1","title":"\u4e0d\u5e73\u8861\u8cc7\u6599\u96c6\u7684\u8655\u7406\uff08STAGE 1\uff09","text":"<p>\u9996\u5148\uff0c\u8003\u616e\u4e00\u500b\u4e8c\u5143\u5206\u985e\u554f\u984c\uff0c\u4e0d\u5e73\u8861\u8cc7\u6599\u96c6\u6307\u7684\u662f\u5206\u985e\u76ee\u6a19\uff08$y$\uff09\u7d55\u5927\u591a\u6578\u5c6c\u65bc\u67d0\u7a2e\u985e\u5225\uff08\u7a31\u70ba majority\uff09\uff0c\u50c5\u6709\u5c11\u90e8\u5206\u5c6c\u65bc\u53e6\u7a2e\u985e\u5225\uff08\u7a31\u70ba minority\uff09\u3002</p> <p>\u9762\u5c0d\u4e0d\u5e73\u8861\u8cc7\u6599\u96c6\u6642\uff0c\u82e5\u662f\u4e0d\u9032\u884c\u4efb\u4f55\u8655\u7406\u5c31\u76f4\u63a5\u9032\u884c\u8a13\u7df4\uff0c\u5247\u5f88\u6709\u53ef\u80fd\u7522\u51fa\u4e00\u500b\u5e36\u6709\u504f\u898b\u7684\uff08biased\uff09\u6a21\u578b\uff0c\u4e0d\u5206\u9752\u7d05\u7682\u767d\u5730\u9810\u6e2c\u7d55\u5927\u90e8\u5206\u6a23\u672c\u70ba majority \u985e\u5225\uff0c\u800c\u5ffd\u7565\u4e86 minority \u6a23\u672c\u7684\u6709\u7528\u8cc7\u8a0a\u3002</p> <p>\u4e00\u7a2e\u53ef\u80fd\u7684\u89e3\u6c7a\u8fa6\u6cd5\u5c31\u662f\u91cd\u62bd\u6a23\uff08resampling\uff09\uff0c\u53c8\u53ef\u5206\u70ba oversampling \u548c undersampling \u5169\u7a2e\uff1a</p> <ul> <li>Oversampling \u662f\u589e\u52a0 minority \u6a23\u672c\u5728\u8cc7\u6599\u96c6\u7684\u6bd4\u4f8b\u3002</li> <li>Undersampling \u5247\u662f\u6e1b\u5c11 majority \u6a23\u672c\u5728\u8cc7\u6599\u96c6\u7684\u6bd4\u4f8b\u3002</li> </ul> <p>\u5169\u7a2e\u65b9\u6cd5\u90fd\u80fd\u4f7f\u5f97\u6a21\u578b\u5728\u8a13\u7df4\u968e\u6bb5\u6642\uff0c\u66f4\u807d\u53d6 minority \u6a23\u672c\u7684\u610f\u898b\u3002\u6700\u76f4\u89c0\u7684\u4f5c\u6cd5\u5c31\u662f\u900f\u904e\u300c\u96a8\u6a5f\u62bd\u6a23\u300d\uff0c\u522a\u53bb majority \u6a23\u672c\u6216\u589e\u52a0 minority \u6a23\u672c\u3002</p> <p>\u5be6\u969b\u4e0a\uff0c<code>imblearn</code> \u5957\u4ef6\u6b63\u63d0\u4f9b\u4e86 <code>RandomOverSampler</code> \u548c <code>RandomUnderSampler</code> \u4f9b\u6211\u5011\u4f7f\u7528\u3002\u4e0d\u50c5\u5982\u6b64\uff0c\u5b83\u4e5f\u63d0\u4f9b\u4e86\u5176\u5b83\u7684\u91cd\u62bd\u6a23\u65b9\u6cd5\u7684\u5be6\u4f5c\uff0c\u5176\u4e2d\u6211\u5011\u6703\u4f7f\u7528\u5230 <code>SMOTE</code> \u548c <code>NearMiss</code> \u5169\u7a2e\u3002\u4ee5\u4e0b\u662f\u7c21\u4ecb\uff1a</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#smote","title":"SMOTE","text":"<p>SMOTE\uff08Synthetic Minority Oversampling Technique\uff09\u662f oversampling \u6280\u8853\u7684\u4e00\u7a2e\uff0c\u5b83\u6703\u5728 minority \u6a23\u672c\u4e4b\u9593\u5408\u6210\u65b0\u7684 minority \u6a23\u672c\uff0c\u5f9e\u800c\u589e\u52a0 minority \u985e\u5225\u7684\u6bd4\u4f8b\u3002\u793a\u610f\u5716\u5982\u4e0b\u6240\u793a\uff1a</p> <p> \u5716\u7247\u4f86\u6e90</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#nearmiss","title":"NearMiss","text":"<p>NearMiss \u5247\u662f undersampling \u6280\u8853\u7684\u4e00\u7a2e\uff0c\u5171\u6709\u4e09\u7a2e\u7248\u672c\uff0c\u5176\u4e2d\u6211\u5011\u53ea\u63d0\u7b2c\u4e00\u7248\u3002NearMiss-1 \u6703\u8a08\u7b97\u6240\u6709 majority \u6a23\u672c\u524d $k$ \u500b minority nearest neighbors \u7684\u5e73\u5747\u8ddd\u96e2\uff0c\u522a\u53bb\u90a3\u4e9b\u6700\u9760\u8fd1 minority \u6a23\u672c\u7684 majority \u6a23\u672c\uff0c\u76f4\u5230\u5169\u7a2e\u985e\u5225\u7684\u6bd4\u4f8b\u70ba 1\uff1a1\u3002\u793a\u610f\u5716\u5982\u4e0b\uff1a  \u5716\u7247\u4f86\u6e90</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#one-hot-stage-2","title":"\u591a\u9805\u5f0f\u8f49\u63db\u548c One-hot \u7de8\u78bc\uff08STAGE 2\uff09","text":"<p>\u63a5\u8457\uff0c\u6211\u5011\u900f\u904e <code>sklearn</code> \u7684 <code>PolynomialFeatures</code> \u548c <code>OneHotEncoder</code>\uff0c\u66ff\u4e0d\u540c\u6b04\u4f4d\u505a\u7279\u5fb5\u8f49\u63db\uff1a</p> <ul> <li>\u91dd\u5c0d <code>shared_count</code>, <code>comment_count</code>, <code>liked_count</code>, <code>collected_count</code> \u56db\u500b\u7279\u5fb5\uff0c\u6211\u5011\u6703\u9032\u884c\u4e8c\u6b21\u65b9\u7684\u591a\u9805\u5f0f\u8f49\u63db\uff0c\u8a66\u5716\u6355\u6349\u7279\u5fb5\u7684\u975e\u7dda\u6027\u95dc\u4fc2\u548c\u5f7c\u6b64\u4e4b\u9593\u7684\u4ea4\u4e92\u4f5c\u7528\u3002</li> <li>\u91dd\u5c0d <code>weekday</code> \u7279\u5fb5\uff0c\u6703\u5f9e\u6574\u6578\u578b\u614b\uff08<code>0</code> - <code>6</code>\uff0c\u4f9d\u5e8f\u4ee3\u8868\u661f\u671f\u4e00\u81f3\u661f\u671f\u516d\uff09\u8f49\u63db\u6210 one-hot \u683c\u5f0f\uff0c\u4f8b\u5982 <code>[1, 0, 0, 0, 0, 0, 0]</code> \u4ee3\u8868\u7684\u662f\u661f\u671f\u4e00\u3002</li> </ul>"},{"location":"side-projects/dcard-hw/docs/3-training/#tree-based-stage-3","title":"Tree-based \u96c6\u6210\u6a21\u578b\uff08STAGE 3\uff09","text":"<p>\u6700\u5f8c\uff0c\u5206\u985e\u6a21\u578b\u6211\u5011\u4e3b\u8981\u4ee5 tree-based \u7684\u96c6\u6210\uff08ensemble\uff09\u6a21\u578b\u4f5c\u70ba\u6211\u5011\u7684\u4e3b\u8981\u9078\u64c7\uff0e\u9019\u7576\u4e2d\u5305\u62ec\u4e86 <code>AdaBoostClassifier</code>, <code>GradientBoostingClassifier</code> \u548c <code>XGBClassifier</code>\u3002\u4e3b\u8981\u6709\u5e7e\u9ede\u8003\u91cf\uff1a</p> <ul> <li>\u5c0d\u7279\u5fb5\u7684\u55ae\u8abf\u6027\u8f49\u63db\uff08monotonic transformation\uff09\u5177\u6709\u4e0d\u8b8a\u6027\uff08invariant\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u6e1b\u5c11\u8a31\u591a\u7279\u5fb5\u8f49\u63db\u7684\u5de5\u4f5c\u3002</li> <li>\u4e5f\u56e0\u70ba\u6e1b\u5c11\u8a31\u591a\u7279\u5fb5\u8f49\u63db\uff0c\u56e0\u6b64\u6a21\u578b\u7684\u53ef\u89e3\u91cb\u6027\u9ad8\uff0c\u5c0d\u7279\u5fb5\u7684\u7406\u89e3\u4e5f\u76f8\u5c0d\u597d\u7406\u89e3\u3002</li> <li>\u9762\u5c0d\u5927\u578b\u4e14\u8907\u96dc\u7684\u8cc7\u6599\u96c6\u6642\uff0c\u6a21\u578b\u6210\u6548\u597d\uff0c\u6642\u5e38\u662f Kaggle \u7684\u5e38\u52dd\u8ecd\uff08\u7279\u6307 <code>XGBoost</code>, <code>LightGBM</code>, <code>CatBoost</code> \u5957\u4ef6\uff09\u3002</li> </ul> <p>\u96c6\u6210\u5b78\u7fd2\uff08ensemble learning\uff09\u4e3b\u8981\u53ef\u5206\u70ba\u5169\u7a2e\uff1aBagging\uff08bootstrap aggregating\uff09\u548c Boosting\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#bagging","title":"Bagging","text":"<p>Bagging \u6700\u6709\u540d\u7684\u4e00\u7a2e\u61c9\u7528\u5c31\u662f\u96a8\u6a5f\u68ee\u6797\uff08random forest\uff09\uff0c\u6a21\u578b\u5167\u6703\u5efa\u7acb\u591a\u9846\u6c7a\u7b56\u6a39\uff0c\u4e26\u900f\u904e\u81ea\u52a9\u5f0f\u62bd\u6a23\u6cd5\uff08bootstrap sampling\uff09\u548c\u96a8\u6a5f\u6311\u9078\u67d0\u5e7e\u500b\u7279\u5fb5\u6b04\u4f4d\uff0c\u8b93\u6bcf\u9846\u6a39\u53ea\u5b78\u7fd2\u5230\u5c40\u90e8\u7279\u5fb5\uff0c\u6700\u5f8c\u6574\u5408\u6240\u6709\u6c7a\u7b56\u6a39\u7684\u89c0\u9ede\uff0c\u505a\u51fa\u6700\u5f8c\u9810\u6e2c\u7d50\u679c\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#boosting","title":"Boosting","text":""},{"location":"side-projects/dcard-hw/docs/3-training/#adaptive-boosting","title":"Adaptive Boosting","text":"<p>Boosting \u7684\u61c9\u7528\u76f8\u5c0d Bagging \u5247\u591a\u4e86\u8a31\u591a\uff0c\u6700\u521d\u671f\u7684\u5c31\u662f Adaptive boosting\uff08AdaBoost\uff09\uff0c\u5b83\u7684\u6838\u5fc3\u6982\u5ff5\u662f\u4f9d\u5e8f\u5efa\u7acb $T$ \u500b\u5f31\u5b78\u7fd2\u5668\uff08weak learner\uff09$h_t(x)$\uff0c\u6bcf\u500b\u6a21\u578b\u6703\u66f4\u95dc\u6ce8\u5728\u524d\u500b\u6a21\u578b\u5206\u985e\u932f\u8aa4\u7684\u90a3\u4e9b\u6a23\u672c\u4e0a\u3002\u4e0d\u50c5\u5982\u6b64\uff0c\u6bcf\u500b\u6a21\u578b\u90fd\u5c07\u6703\u88ab\u8ce6\u4e88\u4e00\u500b\u6a21\u578b\u6b0a\u91cd $\\alpha_t$\uff0c\u8a72\u6b0a\u91cd\u5fc5\u9808\u53cd\u6620\u5169\u4ef6\u4e8b\uff1a</p> <ul> <li>\u6a21\u578b\u6b0a\u91cd\u8d8a\u9ad8\uff0c\u4ee3\u8868\u8a72\u6a21\u578b\u6548\u679c\u8f03\u597d\u3002</li> <li>\u6a21\u578b\u6b0a\u91cd\u8d8a\u4f4e\uff0c\u4ee3\u8868\u8a72\u6a21\u578b\u6548\u679c\u8f03\u5dee\u3002</li> </ul> <p>\u5982\u6b64\u4e00\u4f86\uff0c\u6700\u7d42\u6a21\u578b $H(x)$ \u5c31\u662f\u8490\u96c6\u9019 $T$ \u500b\u5f31\u5b78\u7fd2\u5668\uff08weak learner\uff09\u7684\u89c0\u9ede\uff0c\u505a\u51fa\u6700\u7d42\u5206\u985e\u3002\u8a73\u7d30\u5167\u5bb9\u53ef\u53c3\u8003\u6211\u904e\u53bb\u6240\u505a\u7684\u9019\u7bc7\u7b46\u8a18\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#gradient-boosting","title":"Gradient Boosting","text":"<p>\u68af\u5ea6\u63d0\u5347\u6280\u8853\u901a\u5e38\u6703\u8207\u6c7a\u7b56\u6a39\u642d\u914d\u4f7f\u7528\uff0c\u5b83\u7684\u6838\u5fc3\u6982\u5ff5\u662f\u4f9d\u5e8f\u5efa\u7acb $T$ \u500b\u6a21\u578b $h_t(x)$\uff0c\u6bcf\u500b\u968e\u6bb5\u7684\u6a21\u578b\u90fd\u662f\u5728\u9810\u6e2c\u524d\u500b\u968e\u6bb5\u6240\u6709\u6a23\u672c\u7684\u68af\u5ea6\u65b9\u5411\uff08\u865b\u64ec\u6b98\u5dee\uff09\u3002\u6700\u7d42\u6a21\u578b $H(x)$ \u5c31\u662f\u5c07\u524d\u5e7e\u500b\u6a21\u578b\u52a0\u7e3d\u8d77\u4f86\uff08additive model\uff09\uff0c\u505a\u51fa\u6700\u7d42\u5206\u985e\u3002\u8a73\u7d30\u6578\u5b78\u5f0f\u63a8\u5c0e\u53ef\u53c3\u8003\u6211\u904e\u53bb\u6240\u505a\u7684\u9019\u7bc7\u7b46\u8a18\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#extreme-gradient-boosting","title":"Extreme Gradient Boosting","text":"<p>XGBoost \u662f\u57fa\u65bc\u68af\u5ea6\u63d0\u5347\u6280\u8853\u7684\u4e00\u500b\u5957\u4ef6\uff0c\u5176\u4e2d\u53c8\u505a\u4e86\u76f8\u7576\u591a\u7684\u512a\u5316\uff0c\u5305\u62ec weighted quantile sketch, parallel learning, cache-aware access \u7b49\u3002\u8a73\u7d30\u5167\u5bb9\u53ef\u53c3\u8003\u9019\u7bc7\u8ad6\u6587\u3002</p>"},{"location":"side-projects/dcard-hw/docs/3-training/#hyperparameter-optimization","title":"\u8d85\u53c3\u6578\u512a\u5316\uff08Hyperparameter Optimization\uff09","text":"<p>\u5927\u81f4\u4e0a\u77ad\u89e3\u8a13\u7df4\u904e\u7a0b\u5c07\u6703\u4f7f\u7528\u7684\u6280\u8853\u5f8c\uff0c\u6211\u5011\u8981\u958b\u59cb\u8a2d\u5b9a\u6bcf\u500b\u968e\u6bb5\u53ef\u80fd\u7684\u4f5c\u6cd5\u53ca\u5176\u8d85\u53c3\u6578\u7d44\u5408\u3002\u6574\u7406\u5982\u4e0b\uff1a</p> <p>Resampler - <code>passthrough</code>\uff1a\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u3002 - <code>NearMiss</code>\uff1a\u4f7f\u7528\u9810\u8a2d\u53c3\u6578\u3002 - <code>SMOTE</code>\uff1a\u4f7f\u7528\u9810\u8a2d\u53c3\u6578\u3002</p> <p>Column Transformer - <code>passthrough</code>\uff1a\u4e0d\u505a\u4efb\u4f55\u7279\u5fb5\u8f49\u63db\u3002 - <code>col_trans</code>\uff1a\u91dd\u5c0d\u4e0d\u540c\u6b04\u4f4d\u9032\u884c\u4e8c\u9805\u5f0f\u8f49\u63db\u548c one-hot \u7de8\u78bc\u3002</p> <p>Classifier - <code>AdaBoostClassifier</code>\uff1a\u4f7f\u7528\u9810\u8a2d\u53c3\u6578\uff0c\u5176\u4e2d\u53c8\u6703\u8a2d\u5b9a\u6a39\u6df1\u9650\u5236\u5728 <code>[1, 2, 3]</code> \u5c64\u3002 - <code>GradientBoostingClassifier</code>, <code>XGBClassifier</code>\uff1a\u4f7f\u7528\u9810\u8a2d\u53c3\u6578\uff0c\u5176\u4e2d\u53c8\u6703\u8a2d\u5b9a\u5b78\u7fd2\u7387\u5728 <code>[0.025, 0.05, 0.1]</code>\u3002</p> <p>\u4e0d\u8ad6\u54ea\u500b\u5206\u985e\u5668\uff0c\u6211\u5011\u90fd\u6703\u8a2d\u5b9a\u5176\u5167\u90e8\u6709 <code>[90, 100, 110 , 120]</code> \u68f5\u6c7a\u7b56\u6a39\u3002\u4e26\u4e14\u53e6\u5916\u8a2d\u5b9a\u7d30\u90e8\u7684\u8d85\u53c3\u6578\uff1a</p> <p>\u4e09\u500b\u968e\u6bb5\u4ea4\u53c9\u4e0b\u4f86\u5171\u6709 216 \u7a2e\u7d44\u5408\u9700\u8981\u5617\u8a66\uff0c\u500b\u6578\u6709\u9ede\u904e\u591a\uff0c\u6211\u5011\u6642\u9593\u4e26\u4e0d\u5920\u3002\u5be6\u9a57\u4e0b\u4f86\uff0c\u7d93\u904e\u7279\u5fb5\u8f49\u63db\u7684\u6a21\u578b\u666e\u904d\u6548\u679c\u4e0d\u597d\uff0c\u521d\u6b65\u63a8\u4f30\u662f\u56e0\u70ba\u524d\u9762 EDA \u6240\u63d0\u5230\u7684\uff0c\u8b8a\u6578\u4e4b\u9593\u7684\u76f8\u95dc\u6027\u666e\u904d\u504f\u9ad8\uff0c\u7d93\u904e\u4e8c\u6b21\u65b9\u591a\u9805\u5f0f\u8f49\u63db\u5176\u5be6\u6210\u6548\u4e26\u4e0d\u9ad8\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u964d\u4f4e\u6210\u6548\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u5011\u6c7a\u5b9a\u7701\u7565\u4e86\u300c\u7279\u5fb5\u8f49\u63db\u300d\u968e\u6bb5\uff0c\u6700\u7d42\u5171\u6709 108 \u7a2e\u7d44\u5408\u9700\u8981\u5617\u8a66\uff0c\u900f\u904e <code>GridSearchCV</code> \u627e\u5c0b\u6700\u4f73\u7d44\u5408\uff0c\u8a2d\u5b9a <code>cv=3</code>\u3002</p> <p>\u53c3\u6578\u7d44\u5408\u7684\u7a0b\u5f0f\u78bc\u53c3\u8003\u5982\u4e0b\uff1a <pre><code># poly_cols = ['shared_count', 'comment_count', 'liked_count', 'collected_count']\n# col_trans = make_column_transformer((OneHotEncoder(dtype='int'), ['weekday']),\n#                                     (PolynomialFeatures(include_bias=False), poly_cols),\n#                                     remainder='passthrough')\nparam_grid_ada = {\n    'resampler': ['passthrough', SMOTE(), NearMiss()],\n    # 'columntransformer': ['passthrough', col_trans],\n    'classifier': [AdaBoostClassifier()],\n    'classifier__n_estimators': [90, 100, 110, 120],\n    'classifier__base_estimator': [DecisionTreeClassifier(max_depth=1), \n                                   DecisionTreeClassifier(max_depth=2),\n                                   DecisionTreeClassifier(max_depth=3)]\n}\nparam_grid_gb = {\n    'resampler': ['passthrough', SMOTE(), NearMiss()],\n    # 'columntransformer': ['passthrough', col_trans],\n    'classifier': [GradientBoostingClassifier(), XGBClassifier()],\n    'classifier__n_estimators': [90, 100, 110, 120],\n    'classifier__learning_rate': [0.025, 0.05, 0.1]\n}\nparam_grid = [param_grid_ada, param_grid_gb]\n</code></pre></p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/","title":"\u7d50\u679c\u8207\u8a0e\u8ad6","text":""},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_2","title":"\u8861\u91cf\u6307\u6a19","text":"<p>\u8a0e\u8ad6\u7d50\u679c\u4e4b\u524d\uff0c\u6211\u5011\u5148\u56de\u9867\u4e00\u4e9b\u4e8c\u5143\u5206\u985e\u6703\u4f7f\u7528\u7684\u8861\u91cf\u6307\u6a19\uff0c\u4e26\u4ee5\u4f5c\u696d\u4f5c\u70ba\u4f8b\u5b50\u8aaa\u660e\uff1a</p> Actual\uff3cPredicted Negative Positive Negative $\\color{red}{\\text{TN}}$ $\\color{blue}{\\text{FP}}$ Positive $\\color{green}{\\text{FN}}$ $\\color{orange}{\\text{TP}}$ <p>$\\text{Precision}$\uff1a\u8861\u91cf\u7684\u662f\u6a21\u578b\u9810\u6e2c\u70ba\u71b1\u9580\u7684\u90a3\u4e9b\u6587\u7ae0\u7576\u4e2d\uff0c\u6709\u591a\u5c11\u6bd4\u4f8b\u5be6\u969b\u4e0a\u771f\u7684\u662f\u71b1\u9580\u6587\u7ae0\uff1f\u6307\u6a19\u8d8a\u5927\u4ee3\u8868\u8d8a\u80fd\u76f8\u4fe1\u6a21\u578b\u7684\u71b1\u9580\u6587\u7ae0\u9810\u6e2c\u7d50\u679c\u3002\u8a08\u7b97\u5982\u4e0b\uff1a $$ \\text{Precision} = \\frac{\\color{orange}{\\text{TP}}}{\\color{blue}{\\text{FP}} + \\color{orange}{\\text{TP}}} $$</p> <p>$\\text{Recall}$\uff1a\u8861\u91cf\u7684\u662f\u5be6\u969b\u4e0a\u662f\u71b1\u9580\u7684\u90a3\u4e9b\u6587\u7ae0\u7576\u4e2d\uff0c\u6709\u591a\u5c11\u6bd4\u4f8b\u88ab\u6a21\u578b\u9810\u6e2c\u51fa\u4f86\uff1f\u901a\u5e38\u53c8\u88ab\u7a31\u70ba True Positive Rate\uff08TPR\uff09\u6216 Sensitivity\u3002\u6307\u6a19\u8d8a\u5927\u4ee3\u8868\u6a21\u578b\u8d8a\u80fd\u6355\u6349\u5230\u5be6\u969b\u4e0a\u70ba\u71b1\u9580\u7684\u6587\u7ae0\u3002\u8a08\u7b97\u5982\u4e0b\uff1a $$ \\text{Recall} = \\dfrac{\\color{orange}{\\text{TP}}}{\\color{green}{\\text{FN}} + \\color{orange}{\\text{TP}}} $$ </p> <p>$\\text{Specificity}$\uff1a\u8861\u91cf\u7684\u662f\u5be6\u969b\u4e0a\u4e0d\u662f\u71b1\u9580\u7684\u90a3\u4e9b\u6587\u7ae0\u7576\u4e2d\uff0c\u6709\u591a\u5c11\u6bd4\u4f8b\u88ab\u6a21\u578b\u9810\u6e2c\u51fa\u4f86\uff1f\u901a\u5e38\u53c8\u88ab\u7a31\u70ba True Negative Rate\uff08TNR\uff09\u3002\u6307\u6a19\u8d8a\u5927\u4ee3\u8868\u6a21\u578b\u8d8a\u80fd\u6355\u6349\u5230\u5be6\u969b\u4e0a\u70ba\u975e\u71b1\u9580\u7684\u6587\u7ae0\u3002\u8a08\u7b97\u5982\u4e0b\uff1a $$ \\text{Specificity} = \\dfrac{\\color{red}{\\text{TN}}}{\\color{red}{\\text{TN}}+\\color{blue}{\\text{FP}}} $$</p> <p>$\\text{F1-score}$\uff1a$\\text{Precision}$ \u548c $\\text{Recall}$ \u7684\u7d9c\u5408\u6027\u6307\u6a19\uff0c\u4ecb\u65bc $0$ \u5230 $1$ \u4e4b\u9593\uff0c\u8d8a\u5927\u8d8a\u597d\u3002\u8a08\u7b97\u5982\u4e0b\uff1a $$ \\text{F1-score} = \\dfrac{2 \\cdot \\text{Precision} \\cdot \\text{Recall}}{\\text{Precision} + \\text{Recall}} $$</p> <p>$\\text{Balanced Acc.}$\uff1a $\\text{TPR}$ \u548c $\\text{TNR}$ \u7684\u7d9c\u5408\u6027\u6307\u6a19\uff0c\u4ecb\u65bc $0$ \u5230 $1$ \u4e4b\u9593\uff0c\u8d8a\u5927\u8d8a\u597d\u3002\u8a08\u7b97\u5982\u4e0b\u3002 $$ \\text{Balanced Acc.} = \\dfrac{\\text{TNR} + \\text{TPR}}{2} $$</p> <p>\u900f\u904e <code>GridSearchCV</code> \u641c\u5c0b\u6700\u4f73\u53c3\u6578\u7d44\u5408\u6642\uff0c\u6211\u5011\u4e5f\u6703\u540c\u6642\u7d00\u9304\u4e0a\u8ff0\u9019\u4e94\u500b\u6307\u6a19\uff0c\u6700\u7d42\u4f9d\u64da f1-score \u6311\u9078\u6700\u4f73\u7d44\u5408\u3002\u7a0b\u5f0f\u78bc\u53c3\u8003\u5982\u4e0b\uff1a <pre><code>scoring = {\n    'precision': 'precision',\n    'recall': 'recall',\n    'specificity': make_scorer(specificity_score),\n    'balanced_accuracy': 'balanced_accuracy',\n    'f1_score': 'f1',\n}\ngrid_search = GridSearchCV(pipe, param_grid=param_grid, scoring=scoring, refit='f1_score', \n                           n_jobs=-1, cv=3, return_train_score=True)\n</code></pre></p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_3","title":"\u5be6\u9a57\u7d50\u679c","text":"<p>Info</p> <p>\u6700\u4f73\u6a21\u578b\u662f\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u7684 <code>AdaBoostClassifier</code>\uff0c\u5167\u90e8\u5171\u6709 100 \u68f5\u6a39\u6df1\u9650\u5236\u70ba 2 \u5c64\u7684\u6c7a\u7b56\u6a39\uff0c\u4ea4\u53c9\u9a57\u8b49\u7684\u5e73\u5747 f1-score \u662f 0.56\u3002\u5176\u5728\u516c\u958b\u6e2c\u8a66\u96c6\u7684 f1-score \u5247\u662f 0.53\u3002\u9810\u6e2c\u7684\u8a73\u7d30\u8cc7\u8a0a\u53c3\u8003\u5982\u4e0b\uff1a</p> <p></p> Note <pre><code>===================GETTING CONNECTOR START!==================\n============================DONE!============================\n====================GETTING TABLES START!====================\nposts_test                 \u7e3d\u5171\u6709   225,986 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_shared_test           \u7e3d\u5171\u6709    83,376 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_comment_created_test  \u7e3d\u5171\u6709   607,251 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_liked_test            \u7e3d\u5171\u6709   908,910 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\npost_collected_test        \u7e3d\u5171\u6709   275,073 \u7b46\u8cc7\u6599\u548c 3 \u500b\u6b04\u4f4d\n============================DONE!============================\n====================MERGING TABLES START!====================\n============================DONE!============================\n================PREPROCESSING TOTAL_DF START!================\n============================DONE!============================\n==================PREDICTING TESTSET START!==================\nf1-score     = 0.53\nbalanced acc = 0.70\n\n            precision    recall  f1-score   support\n\n        0       0.99      1.00      0.99    221479\n        1       0.75      0.40      0.53      4507\n\n    accuracy                           0.99    225986\nmacro avg       0.87      0.70      0.76    225986\nweighted avg       0.98      0.99      0.98    225986\n\n============================DONE!============================\n</code></pre> <p>\u63a5\u8457\u6211\u5011\u5c31\u4f86\u770b\u770b\u5be6\u9a57\u7d50\u679c\u5427\u3002\uff08\u4ee5\u4e0b\u6240\u6709\u5716\u793a\u7686\u70ba\u5728\u4ea4\u53c9\u9a57\u8b49\u6642\u8a08\u7b97\u800c\u4f86\uff0c\u4e26\u975e\u6574\u500b\u8a13\u7df4\u96c6\u6216\u516c\u958b\u6e2c\u8a66\u96c6\u4e0a\u3002\uff09</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#resampler","title":"Resampler","text":"<p>\u9996\u5148\u6211\u5011\u4f86\u770b\u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u662f\u5426\u6703\u5c0d f1-score \u9020\u6210\u5f71\u97ff\uff1f </p> <p>Info</p> <p>\u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u78ba\u5be6\u6703\u5c0d f1-score \u9020\u6210\u5f71\u97ff\uff1a</p> <ul> <li>NearMiss\uff08undersampling\uff09\u7684 f1-score \u6700\u4f4e\uff1a\u521d\u6b65\u63a8\u4f30\u662f\u56e0\u70ba\u522a\u9664\u904e\u591a\u975e\u71b1\u9580\u6587\u7ae0\uff0c\u640d\u5931\u592a\u591a majority \u985e\u5225\u7684\u8cc7\u8a0a\u3002</li> <li>SMOTE\uff08oversampling\uff09\u7684 f1-score \u5c45\u4e2d\u3002</li> <li>\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u7684 f1-score \u6700\u9ad8\u3002</li> </ul> <p>\u63a5\u8457\u6211\u5011\u60f3\u8981\u63a2\u7a76\u5176\u539f\u56e0\uff0c\u65bc\u662f\u6211\u5011\u89c0\u5bdf\u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u5230\u5e95\u5c0d precision \u548c recall \u9020\u6210\u4ec0\u9ebc\u5f71\u97ff\uff1f</p> <p></p> <p>Info</p> <ul> <li>NearMiss \u548c SMOTE \u5169\u7a2e\u91cd\u62bd\u6a23\u7b56\u7565\u5927\u5927\u589e\u52a0\u6a21\u578b\u5c0d minority \u985e\u5225\u7684\u91cd\u8996\uff0c\u56e0\u800c\u5728 recall \u7684\u8868\u73fe\u4e0a\u5206\u5225\u80fd\u6709 0.91, 0.95 \u7684\u826f\u597d\u8868\u73fe\u3002\u7136\u800c\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u5c31\u662f\u72a7\u7272\u6389\u4e86 precision \u7684\u8868\u73fe\uff0c\u5206\u5225\u53ea\u6709 0.07 \u548c 0.20\u3002</li> <li>\u63db\u53e5\u8a71\u8aaa\uff0c\u91cd\u62bd\u6a23\u7b56\u7565\u78ba\u5be6\u80fd\u6355\u6349\u5230\u5be6\u969b\u4e0a\u70ba\u71b1\u9580\u7684\u6587\u7ae0\uff0c\u4f46\u53d6\u800c\u4ee3\u4e4b\u7684\u5c31\u662f\u6211\u5011\u4e0d\u592a\u80fd\u76f8\u4fe1\u5b83\u6240\u9810\u6e2c\u7684\u71b1\u9580\u6587\u7ae0\uff0c\u5be6\u969b\u4e0a\u78ba\u5be6\u4e5f\u662f\u71b1\u9580\u6587\u7ae0\u3002</li> </ul> <p>\u66f4\u9032\u4e00\u6b65\u5730\uff0c\u6211\u5011\u60f3\u89c0\u5bdf\u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u662f\u5426\u6703\u8207\u4e0d\u540c\u7684\u5206\u985e\u5668\u6709\u4ea4\u4e92\u4f5c\u7528\uff0c\u9032\u800c\u5f71\u97ff f1-score\uff1f</p> <p></p> <p>Info</p> <ul> <li>\u5728\u300cSMOTE \u91cd\u62bd\u6a23\u7b56\u7565\u300d\u4ee5\u53ca\u300c\u4e0d\u505a\u4efb\u4f55\u91cd\u62bd\u6a23\u300d\u7684\u60c5\u6cc1\u5e95\u4e0b\uff0c\u4e0d\u540c\u7684\u5206\u985e\u5668\u4e26\u4e0d\u6703\u9020\u6210 f1-score \u5927\u5e45\u5ea6\u7684\u8b8a\u5316\u3002</li> <li>\u7136\u800c\uff0c\u5728 NearMiss \u91cd\u62bd\u6a23\u7b56\u7565\u7684\u60c5\u6cc1\u5e95\u4e0b\uff0c <code>XGBClassifier</code> \u7684 f1-score \u6700\u9ad8\uff080.18\uff09\uff0c\u800c <code>AdaBoostClassifier</code> \u6700\u4f4e\uff080.07\uff09\u3002<ul> <li><code>AdaBoostClassifier</code> \u6700\u4f4e\u662f\u56e0\u70ba\u5b83\u672c\u8eab\u90fd\u662f\u5f31\u5206\u985e\u5668\uff0c\u56e0\u6b64\u6c92\u8fa6\u6cd5\u5728 majority \u8cc7\u8a0a\u904e\u5c11\u7684\u60c5\u6cc1\u4e0b\u505a\u51fa\u6709\u6548\u7684\u5206\u985e\u3002</li> <li><code>XGBClassifier</code> \u9084\u52dd\u904e <code>GradientBoostingClassifier</code> \u662f\u56e0\u70ba\u5b83\u662f\u512a\u5316\u904e\u5f8c\u7684 GBDT\uff0c\u7406\u6240\u7576\u7136\u6beb\u4e0d\u610f\u5916\u3002</li> </ul> </li> </ul>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#classifier","title":"Classifier","text":"<p>\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u5011\u540c\u6a23\u4e5f\u4f86\u770b\u770b\u4e0d\u540c\u7684\u5206\u985e\u5668\u662f\u5426\u6703\u5c0d f1-score \u9020\u6210\u5f71\u97ff\uff1f</p> <p></p> <p>Info</p> <ul> <li>\u4e0d\u540c\u7684\u5206\u985e\u5668\u5c0d f1-score \u9020\u6210\u7684\u5f71\u97ff\u4e26\u4e0d\u5927\uff0c\u5e73\u5747\u800c\u8a00 <code>XGBClassifier</code> \u5206\u6578\u6700\u9ad8\uff080.35\uff09\uff0c\u6e90\u81ea\u65bc NearMiss \u91cd\u62bd\u6a23\u7b56\u7565\u5e95\u4e0b\u7684\u5206\u6578\u8f03\u9ad8\u6240\u5c0e\u81f4\u3002</li> </ul> <p>\u63a5\u8457\uff0c\u6211\u5011\u4f86\u770b\u770b\u4e09\u7a2e\u96c6\u6210\u6a21\u578b\u7684\u5167\u90e8\u5206\u985e\u5668\u591a\u5be1\u662f\u5426\u6703\u5f71\u97ff f1-score\uff1f</p> <p></p> <p>\u5f88\u660e\u986f\u5730\uff0c\u4e26\u4e0d\u592a\u6703\u5f71\u97ff\u3002\u4e0d\u50c5\u5982\u6b64\uff0c\u82e5\u662f\u9032\u4e00\u6b65\u5730\u89c0\u5bdf <code>AdaBoostClassifier</code> \u7684\u6a39\u6df1\u9650\u5236\u548c\u53e6\u5916\u5169\u7a2e\u6a21\u578b\u7684\u5b78\u7fd2\u7387\u8a2d\u5b9a\uff0c\u540c\u6a23\u53ef\u4ee5\u767c\u73fe\u5c0d f1-score \u7684\u5f71\u97ff\u4e26\u4e0d\u5927\uff08\u7701\u7565\u5176\u5716\u793a\uff09\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_4","title":"\u5f8c\u7e8c\u767c\u5c55","text":"<p>\u5be6\u9a57\u7d50\u679c\u5927\u81f4\u5982\u4e0a\uff0c\u56e0\u6642\u9593\u8003\u91cf\u4e26\u672a\u52a0\u5165\u5176\u5b83\u5617\u8a66\u3002\u56e0\u6b64\u5c07\u672a\u4f86\u53ef\u80fd\u65b9\u5411\u7d71\u6574\u65bc\u6b64\uff1a</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_5","title":"\u8003\u616e\u5176\u5b83\u91cd\u62bd\u6a23\u6280\u8853","text":"<p>\u91cd\u62bd\u6a23\u6280\u8853\u78ba\u5be6\u80fd\u589e\u52a0\u6a21\u578b\u5c0d minority \u985e\u5225\u7684\u91cd\u8996\uff0c\u96d6\u5be6\u9a57\u7d50\u679c\u4e0d\u76e1\u7406\u60f3\uff0c\u4f46\u6211\u5011\u53ef\u4ee5\u6301\u7e8c\u5617\u8a66\u5fae\u8abf\u5176\u8d85\u53c3\u6578\uff0c\u751a\u81f3\u8003\u616e\u5176\u5b83\u91cd\u62bd\u6a23\u6280\u8853\u3002\u53ef\u80fd\u7684\u65b9\u5411\u53ef\u53c3\u8003 <code>imblearn</code> \u5957\u4ef6\u7684 User Guide \u7684 \"Over-sampling\" \u548c \"Under-sampling\"\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_6","title":"\u8003\u616e\u5176\u5b83\u8861\u91cf\u6307\u6a19","text":"<p>\u4f5c\u696d\u8981\u6c42\u4ee5 f1-score \u4f5c\u70ba\u6a21\u578b\u8861\u91cf\u6307\u6a19\u3002\u7136\u800c\uff0c\u5982\u679c\u5c07 balanced accuracy \u4f5c\u70ba\u6211\u5011\u7684\u6a21\u578b\u8861\u91cf\u6307\u6a19\uff0c\u6700\u4f73\u6a21\u578b\u5247\u6703\u662f\u900f\u904e SMOTE \u91cd\u62bd\u6a23\u7b56\u7565\u4f86\u8a13\u7df4\uff0c\u5167\u90e8\u64c1\u6709 120 \u500b\u5206\u985e\u5668\u7684\u3001\u5b78\u7fd2\u7387\u70ba 0.1 \u7684 <code>GradientBoostingClassifier</code> \u6a21\u578b\uff0c\u5176 balanced accuracy \u70ba 0.93\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e0d\u540c\u7684\u91cd\u62bd\u6a23\u7b56\u7565\u5c0d balanced accuracy \u7684\u5f71\u97ff\uff1a</p> <p></p> <p>Info</p> <p>\u53ef\u4ee5\u767c\u73fe SMOTE \u91cd\u62bd\u6a23\u7b56\u7565\u7684 balanced accuracy \u6700\u9ad8\u3002\u82e5\u6211\u5011\u6a21\u578b\u7684\u76ee\u7684\u662f\u521d\u6b65\u7be9\u9078\u90a3\u4e9b\u53ef\u80fd\u70ba\u71b1\u9580\u7684\u6587\u7ae0\uff0c\u9001\u5165\u5f8c\u7e8c\u7684\u5de5\u4f5c\u6d41\uff0c\u90a3\u9ebc\u6216\u8a31\u53ef\u4ee5\u8003\u616e balanced accuracy \u4f5c\u70ba\u6211\u5011\u7684\u6a21\u578b\u8861\u91cf\u6307\u6a19\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_7","title":"\u8003\u616e\u5176\u5b83\u7279\u5fb5\u8f49\u63db\u548c\u5206\u985e\u5668","text":"<p>\u5be6\u9a57\u7576\u4e2d\u6211\u5011\u53ea\u8003\u616e\u7684 tree-based \u7684\u96c6\u6210\u6a21\u578b\uff0c\u5b83\u8b93\u6211\u5011\u4e0d\u9700\u8981\u505a\u904e\u591a\u7684\u7279\u5fb5\u8f49\u63db\u5373\u53ef\u5efa\u6a21\u3002\u7136\u800c\uff0c\u6211\u5011\u53ef\u4ee5\u5f80\u53e6\u500b\u65b9\u5411\u5617\u8a66\uff1a\u8003\u616e logistic \u8ff4\u6b78\u3001\u652f\u6301\u5411\u91cf\u6a5f\u3001Poisson \u8ff4\u6b78\u7b49\u6a21\u578b\uff0c\u52a0\u4e0a\u64cd\u4f5c\u5f97\u5b9c\u7684\u7279\u5fb5\u8f49\u63db\uff0c\u4f8b\u5982\u5c07<code>weekday</code> \u548c <code>hour</code> \u8003\u616e\u8f49\u63db\u6210\u5faa\u74b0\u7684\uff08circular\uff09\u5ea7\u6a19\uff08\u53ef\u53c3\u8003\u9019\u7bc7\u8cbc\u6587\u7684\u4f5c\u6cd5\uff09\uff0c\u9032\u800c\u63d0\u5347\u6a21\u578b\u6210\u6548\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_8","title":"\u8003\u616e\u5e8f\u5217\u8cc7\u8a0a","text":"<p>\u5be6\u9a57\u7576\u4e2d\u6211\u5011\u5ffd\u7565\u4e86\u767c\u6587 10 \u5c0f\u6642\u5167\u7684\u5206\u4eab\u6578\u3001\u8a55\u8ad6\u6578\u3001\u611b\u5fc3\u6578\u548c\u6536\u85cf\u6578\u7684\u300c\u6642\u9593\u8da8\u52e2\u300d\u3002\u5176\u4e2d\u4e00\u7a2e\u53ef\u80fd\u7684\u65b9\u5411\u662f\u5efa\u7acb\u5faa\u74b0\u5f0f\u795e\u7d93\u7db2\u8def\uff08RNN, LSTM, GRU \u7b49...\uff09\uff0c\u6355\u6349\u5176\u300c\u6642\u9593\u8da8\u52e2\u300d\u548c\u8b8a\u6578\u9593\u7684\u975e\u7dda\u6027\u95dc\u4fc2\u3002</p> <p>\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u5c07\u56db\u7a2e\u8a08\u6b21\u6b04\u4f4d\u6574\u5408\u6210 4 \u7dad\u7684\u5411\u91cf\uff08\u4f8b\u5982 <code>[4, 23, 17, 0]</code> \u4ee3\u8868 4 \u500b\u5206\u4eab\u6578\u3001 23 \u500b\u8a55\u8ad6\u6578\uff0c\u4f9d\u6b64\u985e\u63a8\uff09\uff0c\u5e8f\u5217\u9577\u5ea6\u70ba 10 \u3002\u56e0\u6b64\u6bcf\u4e00\u7bc7\u6587\u7ae0\u7684\u6642\u9593\u5e8f\u5217\u8cc7\u8a0a\u5c31\u662f\u500b <code>(10, 4)</code> \u7684\u77e9\u9663\uff0c\u63a5\u8457\u9001\u5165\u6a21\u578b\u8a13\u7df4\u5373\u53ef\u3002</p> <p>\u95dc\u65bc LSTM \u7684\u6a21\u578b\u7d30\u7bc0\u53ef\u53c3\u8003\u6211\u904e\u53bb\u6240\u505a\u7684\u7b46\u8a18\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_9","title":"\u8003\u616e\u5176\u5b83\u8d85\u53c3\u6578\u512a\u5316\u65b9\u6cd5","text":"<p>\u5be6\u9a57\u7576\u4e2d\u6211\u5011\u662f\u4f7f\u7528 <code>sklearn</code> \u5957\u4ef6\u7684 <code>GridSearchCV</code> \u505a\u8d85\u53c3\u6578\u512a\u5316\u3002\u7136\u800c\uff0c\u6211\u5011\u53ef\u4ee5\u8003\u616e\u53e6\u500b <code>RandomizedSearchCV</code>\uff0c\u5728\u5927\u91cf\u8d85\u53c3\u6578\u7d44\u5408\u9700\u8981\u512a\u5316\u6642\u6216\u8a31\u662f\u500b\u4e0d\u932f\u7684\u9078\u64c7\uff0c\u8a73\u7d30\u5167\u5bb9\u53ef\u53c3\u8003 2012 JMLR \u7684\u9019\u7bc7\u8ad6\u6587\u3002</p> <p>\u4e0d\u50c5\u5982\u6b64\uff0c\u751a\u81f3\u53ef\u4ee5\u8003\u616e <code>optuna</code> \u6216 <code>hyperopt</code> \u6240\u63d0\u4f9b\u7684\u8c9d\u6c0f\u512a\u5316\uff08bayesian optimization\uff09\u5be6\u4f5c\u3002\u8a73\u7d30\u5167\u5bb9\u53ef\u53c3\u8003\u9019\u90e8\u5f71\u7247\uff0c\u5169\u500b\u5957\u4ef6\u7684\u6bd4\u8f03\u53ef\u4ee5\u53c3\u8003\u9019\u7bc7\u6587\u7ae0\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#_10","title":"\u8003\u616e\u6587\u672c\u8cc7\u6599\u548c\u4f7f\u7528\u8005\u700f\u89bd\u884c\u70ba","text":"<p>\u6b64\u6b21\u4f5c\u696d\u4e26\u672a\u63d0\u4f9b\u6587\u672c\u8cc7\u6599\u548c\u4f7f\u7528\u8005\u700f\u89bd\u884c\u70ba\uff0c\u800c\u627e\u51fa\u6f5b\u85cf\u71b1\u9580\u6587\u7ae0\u7684\u771f\u6b63\u76ee\u7684\u662f\u300c\u66f4\u7cbe\u6e96\u7684\u63a8\u85a6\u6587\u7ae0\u7d66\u4f7f\u7528\u8005\u300d\u3002\u56e0\u6b64\uff0c\u53ef\u8003\u616e\u52a0\u5165 Latent Dirichlet Allocation\uff08LDA\uff09 \u4e3b\u984c\u6a21\u578b\uff0c\u8c50\u5bcc\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u984c\u8cc7\u8a0a\u3002\u95dc\u65bc LDA \u4e3b\u984c\u6a21\u578b\u7684\u7d30\u7bc0\u53ef\u53c3\u8003\u6211\u904e\u53bb\u6240\u505a\u7684\u7c21\u5831\u3002</p> <p>\u4e0d\u50c5\u5982\u6b64\uff0c\u6211\u5011\u751a\u81f3\u53ef\u4ee5\u7d50\u5408\u4f7f\u7528\u8005\u700f\u89bd\u884c\u70ba\uff0c\u505a\u51fa\u66f4\u7cbe\u7dfb\u7684\u500b\u4eba\u5316\u6587\u672c\u63a8\u85a6\u3002\u8a73\u7d30\u5167\u5bb9\u53ef\u53c3\u8003\u9019\u90e8\u5f71\u7247\u548c\u9019\u7bc7\u8ad6\u6587\u3002</p>"},{"location":"side-projects/dcard-hw/docs/4-evaluation/#tags-dcard","title":"tags: <code>dcard</code>","text":""},{"location":"side-projects/dcard-hw/docs/5-resampling/","title":"Resampling","text":""},{"location":"side-projects/dcard-hw/docs/5-resampling/#over-sampling","title":"Over Sampling","text":""},{"location":"side-projects/dcard-hw/docs/5-resampling/#under-sampling","title":"Under Sampling","text":""},{"location":"side-projects/restful-apis-with-flask/","title":"RESTful APIs with Flask","text":"<p>This repository documents my journey of learning how to build RESTful APIs using Flask. It includes step-by-step implementations of various concepts, from basic API design principles to advanced features like authentication, database integration, deployment, and third-party integrations. </p> <p>The content is based on two Udemy courses: \"REST APIs with Flask and Python\" and \"Advanced REST APIs with Flask and Python\". Each section highlights key topics, tools, and techniques, making it a comprehensive resource for anyone looking to learn Flask for API development.</p> <p></p> <p>Certificate</p> <p></p> <p>Certificate</p>"},{"location":"side-projects/restful-apis-with-flask/#about-this-project","title":"About This Project","text":"<p>The goal of this project is to: - Learn and experiment with Flask for building RESTful APIs. - Understand best practices for API design and implementation. - Explore integrations with databases, authentication, and other web technologies.</p>"},{"location":"side-projects/restful-apis-with-flask/#features","title":"Features","text":"<ul> <li>RESTful API Design: Follows REST principles for clean and scalable APIs.</li> <li>Flask Framework: Built using Flask for simplicity and flexibility.</li> <li>Database Integration: Includes examples of working with databases like SQLite or SQLAlchemy.</li> <li>Authentication: Demonstrates how to secure APIs with authentication mechanisms.</li> <li>Error Handling: Implements robust error handling for better user experience.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/#how-to-use-this-repository","title":"How to Use This Repository","text":"<p>Feel free to browse the code, read the documentation, and run the examples. If you're new to Flask or REST APIs, this project can serve as a learning resource.</p>"},{"location":"side-projects/restful-apis-with-flask/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Clone the repository:     <pre><code>gh repo clone your-username/rest-apis-with-flask\ncd rest-apis-with-flask\n</code></pre></p> </li> <li> <p>Install dependencies:     <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run the application:     <pre><code>python app.py\n</code></pre></p> </li> </ol> <p>Thank you for visiting, and I hope you find this project helpful!</p>"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom blacklist import BLACKLIST\nfrom resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\n</pre> from db import db from blacklist import BLACKLIST from resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout from resources.item import Item, ItemList from resources.store import Store, StoreList In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///data.db\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature\napp.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [\n    \"access\",\n    \"refresh\",\n]  # allow blacklisting for access and refresh tokens\napp.secret_key = \"kcl\"  # could do app.config['JWT_SECRET_KEY'] if we prefer\napi = Api(app)\n</pre> app = Flask(__name__) app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///data.db\" app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False app.config[\"PROPAGATE_EXCEPTIONS\"] = True app.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature app.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [     \"access\",     \"refresh\", ]  # allow blacklisting for access and refresh tokens app.secret_key = \"kcl\"  # could do app.config['JWT_SECRET_KEY'] if we prefer api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return (\n        decrypted_token[\"jti\"] in BLACKLIST\n    )  # Here we blacklist particular JWTs that have been created in the past.\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return (         decrypted_token[\"jti\"] in BLACKLIST     )  # Here we blacklist particular JWTs that have been created in the past. In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section1/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Dict, List, Union\n</pre> from typing import Dict, List, Union In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>ItemJSON = Dict[str, Union[int, str, float]]\n</pre> ItemJSON = Dict[str, Union[int, str, float]] In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    price = db.Column(db.Float(precision=2))\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"))\n    store = db.relationship(\"StoreModel\")\n\n    def __init__(self, name: str, price: float, store_id: int):\n        self.name = name\n        self.price = price\n        self.store_id = store_id\n\n    def json(self) -&gt; ItemJSON:\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"price\": self.price,\n            \"store_id\": self.store_id,\n        }\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), unique=True)     price = db.Column(db.Float(precision=2))      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"))     store = db.relationship(\"StoreModel\")      def __init__(self, name: str, price: float, store_id: int):         self.name = name         self.price = price         self.store_id = store_id      def json(self) -&gt; ItemJSON:         return {             \"id\": self.id,             \"name\": self.name,             \"price\": self.price,             \"store_id\": self.store_id,         }      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Dict, List, Union\n</pre> from typing import Dict, List, Union In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom models.item import ItemJSON\n</pre> from db import db from models.item import ItemJSON In\u00a0[\u00a0]: Copied! <pre>StoreJSON = Dict[str, Union[int, str, List[ItemJSON]]]\n</pre> StoreJSON = Dict[str, Union[int, str, List[ItemJSON]]] In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    def __init__(self, name: str):\n        self.name = name\n\n    def json(self) -&gt; StoreJSON:\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"items\": [item.json() for item in self.items.all()],\n        }\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      def __init__(self, name: str):         self.name = name      def json(self) -&gt; StoreJSON:         return {             \"id\": self.id,             \"name\": self.name,             \"items\": [item.json() for item in self.items.all()],         }      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Dict, Union\n</pre> from typing import Dict, Union In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>UserJSON = Dict[str, Union[int, str]]\n</pre> UserJSON = Dict[str, Union[int, str]] In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n    password = db.Column(db.String(80))\n\n    def __init__(self, username: str, password: str):\n        self.username = username\n        self.password = password\n\n    def json(self) -&gt; UserJSON:\n        return {\"id\": self.id, \"username\": self.username}\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), unique=True)     password = db.Column(db.String(80))      def __init__(self, username: str, password: str):         self.username = username         self.password = password      def json(self) -&gt; UserJSON:         return {\"id\": self.id, \"username\": self.username}      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section1/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\nfrom models.item import ItemModel\n</pre> from flask_restful import Resource, reqparse from flask_jwt_extended import jwt_required, fresh_jwt_required from models.item import ItemModel In\u00a0[\u00a0]: Copied! <pre>BLANK_ERROR = \"'{}' cannot be blank.\"\nNAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while inserting the item.\"\nITEM_NOT_FOUND = \"Item not found.\"\nITEM_DELETED = \"Item deleted.\"\n</pre> BLANK_ERROR = \"'{}' cannot be blank.\" NAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while inserting the item.\" ITEM_NOT_FOUND = \"Item not found.\" ITEM_DELETED = \"Item deleted.\" In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument(\n        \"price\", type=float, required=True, help=BLANK_ERROR.format('price')\n    )\n    parser.add_argument(\n        \"store_id\", type=int, required=True, help=BLANK_ERROR.format('store_id')\n    )\n\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item.json(), 200\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):\n        if ItemModel.find_by_name(name):\n            return (\n                {\"message\": NAME_ALREADY_EXISTS.format(name)},\n                400,\n            )\n\n        data = Item.parser.parse_args()\n\n        item = ItemModel(name, **data)\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return item.json(), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": ITEM_DELETED}, 200\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    def put(cls, name):\n        data = Item.parser.parse_args()\n\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = data[\"price\"]\n        else:\n            item = ItemModel(name, **data)\n\n        item.save_to_db()\n\n        return item.json(), 200\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument(         \"price\", type=float, required=True, help=BLANK_ERROR.format('price')     )     parser.add_argument(         \"store_id\", type=int, required=True, help=BLANK_ERROR.format('store_id')     )      @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item.json(), 200         return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):         if ItemModel.find_by_name(name):             return (                 {\"message\": NAME_ALREADY_EXISTS.format(name)},                 400,             )          data = Item.parser.parse_args()          item = ItemModel(name, **data)          try:             item.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return item.json(), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": ITEM_DELETED}, 200         return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     def put(cls, name):         data = Item.parser.parse_args()          item = ItemModel.find_by_name(name)          if item:             item.price = data[\"price\"]         else:             item = ItemModel(name, **data)          item.save_to_db()          return item.json(), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": [item.json() for item in ItemModel.find_all()]}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": [item.json() for item in ItemModel.find_all()]}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom models.store import StoreModel\n</pre> from flask_restful import Resource from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while creating the store.\"\nSTORE_NOT_FOUND = \"Store not found.\"\nSTORE_DELETED = \"Store deleted.\"\n</pre> NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while creating the store.\" STORE_NOT_FOUND = \"Store not found.\" STORE_DELETED = \"Store deleted.\" In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store.json()\n        return {\"message\": STORE_NOT_FOUND}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return (\n                {\"message\": NAME_ALREADY_EXISTS.format(name)},\n                400,\n            )\n\n        store = StoreModel(name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return store.json(), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n\n        return {\"message\": STORE_DELETED}\n</pre> class Store(Resource):     @classmethod     def get(cls, name):         store = StoreModel.find_by_name(name)         if store:             return store.json()         return {\"message\": STORE_NOT_FOUND}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return (                 {\"message\": NAME_ALREADY_EXISTS.format(name)},                 400,             )          store = StoreModel(name)         try:             store.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return store.json(), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()          return {\"message\": STORE_DELETED} In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": [x.json() for x in StoreModel.find_all()]}\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": [x.json() for x in StoreModel.find_all()]}"},{"location":"side-projects/restful-apis-with-flask/advanced/section1/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\nfrom models.user import UserModel\nfrom blacklist import BLACKLIST\n</pre> from flask_restful import Resource, reqparse from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) from models.user import UserModel from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>BLANK_ERROR = \"'{}' cannot be blank.\"\nUSER_ALREADY_EXISTS = \"A user with that username already exists.\"\nCREATED_SUCCESSFULLY = \"User created successfully.\"\nUSER_NOT_FOUND = \"User not found.\"\nUSER_DELETED = \"User deleted.\"\nINVALID_CREDENTIALS = \"Invalid credentials!\"\nUSER_LOGGED_OUT = \"User &lt;id={}&gt; successfully logged out.\"\n</pre> BLANK_ERROR = \"'{}' cannot be blank.\" USER_ALREADY_EXISTS = \"A user with that username already exists.\" CREATED_SUCCESSFULLY = \"User created successfully.\" USER_NOT_FOUND = \"User not found.\" USER_DELETED = \"User deleted.\" INVALID_CREDENTIALS = \"Invalid credentials!\" USER_LOGGED_OUT = \"User  successfully logged out.\" In\u00a0[\u00a0]: Copied! <pre>_user_parser = reqparse.RequestParser()\n_user_parser.add_argument(\n    \"username\", type=str, required=True, help=BLANK_ERROR.format('username')\n)\n_user_parser.add_argument(\n    \"password\", type=str, required=True, help=BLANK_ERROR.format('password')\n)\n</pre> _user_parser = reqparse.RequestParser() _user_parser.add_argument(     \"username\", type=str, required=True, help=BLANK_ERROR.format('username') ) _user_parser.add_argument(     \"password\", type=str, required=True, help=BLANK_ERROR.format('password') ) In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        data = _user_parser.parse_args()\n\n        if UserModel.find_by_username(data[\"username\"]):\n            return {\"message\": USER_ALREADY_EXISTS}, 400\n\n        user = UserModel(**data)\n        user.save_to_db()\n\n        return {\"message\": CREATED_SUCCESSFULLY}, 201\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         data = _user_parser.parse_args()          if UserModel.find_by_username(data[\"username\"]):             return {\"message\": USER_ALREADY_EXISTS}, 400          user = UserModel(**data)         user.save_to_db()          return {\"message\": CREATED_SUCCESSFULLY}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    \"\"\"\n    This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the\n    sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.\n    \"\"\"\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n        return user.json(), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n        user.delete_from_db()\n        return {\"message\": USER_DELETED}, 200\n</pre> class User(Resource):     \"\"\"     This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the     sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.     \"\"\"     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404         return user.json(), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404         user.delete_from_db()         return {\"message\": USER_DELETED}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = _user_parser.parse_args()\n\n        user = UserModel.find_by_username(data[\"username\"])\n\n        # this is what the `authenticate()` function did in security.py\n        if user and safe_str_cmp(user.password, data[\"password\"]):\n            # identity= is what the identity() function did in security.py\u2014now stored in the JWT\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n\n        return {\"message\": INVALID_CREDENTIALS}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         data = _user_parser.parse_args()          user = UserModel.find_by_username(data[\"username\"])          # this is what the `authenticate()` function did in security.py         if user and safe_str_cmp(user.password, data[\"password\"]):             # identity= is what the identity() function did in security.py\u2014now stored in the JWT             access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200          return {\"message\": INVALID_CREDENTIALS}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom marshmallow import ValidationError\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from marshmallow import ValidationError In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom db import db\nfrom blacklist import BLACKLIST\nfrom resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\n</pre> from ma import ma from db import db from blacklist import BLACKLIST from resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout from resources.item import Item, ItemList from resources.store import Store, StoreList In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///data.db\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature\napp.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [\n    \"access\",\n    \"refresh\",\n]  # allow blacklisting for access and refresh tokens\napp.secret_key = \"kcl\"  # could do app.config['JWT_SECRET_KEY'] if we prefer\napi = Api(app)\n</pre> app = Flask(__name__) app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///data.db\" app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False app.config[\"PROPAGATE_EXCEPTIONS\"] = True app.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature app.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [     \"access\",     \"refresh\", ]  # allow blacklisting for access and refresh tokens app.secret_key = \"kcl\"  # could do app.config['JWT_SECRET_KEY'] if we prefer api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):  # except ValidationError as err\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):  # except ValidationError as err     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return (\n        decrypted_token[\"jti\"] in BLACKLIST\n    )  # Here we blacklist particular JWTs that have been created in the past.\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return (         decrypted_token[\"jti\"] in BLACKLIST     )  # Here we blacklist particular JWTs that have been created in the past. In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section2/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n    price = db.Column(db.Float(precision=2), nullable=False)\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)\n    store = db.relationship(\"StoreModel\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)     price = db.Column(db.Float(precision=2), nullable=False)      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)     store = db.relationship(\"StoreModel\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section2/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from flask_restful import Resource from flask import request from flask_jwt_extended import jwt_required, fresh_jwt_required from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>NAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while inserting the item.\"\nITEM_NOT_FOUND = \"Item not found.\"\nITEM_DELETED = \"Item deleted.\"\n</pre> NAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while inserting the item.\" ITEM_NOT_FOUND = \"Item not found.\" ITEM_DELETED = \"Item deleted.\" In\u00a0[\u00a0]: Copied! <pre>item_schema = ItemSchema()\nitem_list_schema = ItemSchema(many=True)\n</pre> item_schema = ItemSchema() item_list_schema = ItemSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item_schema.dump(item), 200\n\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):  # /item/chair\n        if ItemModel.find_by_name(name):\n            return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400\n\n        item_json = request.get_json()  # price, store_id\n        item_json['name'] = name\n\n        item = item_schema.load(item_json)  # ItemModel object\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return item_schema.dump(item), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": ITEM_DELETED}, 200\n\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    def put(cls, name: str):\n        item_json = request.get_json()  # price, store_id\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = item_json[\"price\"]\n        else:\n            item_json['name'] = name\n            item = item_schema.load(item_json)  # ItemModel object\n\n        item.save_to_db()\n\n        return item_schema.dump(item), 200\n</pre> class Item(Resource):     @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item_schema.dump(item), 200          return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):  # /item/chair         if ItemModel.find_by_name(name):             return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400          item_json = request.get_json()  # price, store_id         item_json['name'] = name          item = item_schema.load(item_json)  # ItemModel object          try:             item.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return item_schema.dump(item), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": ITEM_DELETED}, 200          return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     def put(cls, name: str):         item_json = request.get_json()  # price, store_id         item = ItemModel.find_by_name(name)          if item:             item.price = item_json[\"price\"]         else:             item_json['name'] = name             item = item_schema.load(item_json)  # ItemModel object          item.save_to_db()          return item_schema.dump(item), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom models.store import StoreModel\nfrom schemas.store import StoreSchema\n</pre> from flask_restful import Resource from models.store import StoreModel from schemas.store import StoreSchema In\u00a0[\u00a0]: Copied! <pre>NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while creating the store.\"\nSTORE_NOT_FOUND = \"Store not found.\"\nSTORE_DELETED = \"Store deleted.\"\n</pre> NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while creating the store.\" STORE_NOT_FOUND = \"Store not found.\" STORE_DELETED = \"Store deleted.\" In\u00a0[\u00a0]: Copied! <pre>store_schema = StoreSchema()\nstore_list_schema = StoreSchema(many=True)\n</pre> store_schema = StoreSchema() store_list_schema = StoreSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store_schema.dump(store), 200\n\n        return {\"message\": STORE_NOT_FOUND}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400\n\n        store = StoreModel(name=name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return store_schema.dump(store), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n            return {'message': STORE_DELETED}, 200\n\n        return {\"message\": STORE_NOT_FOUND}, 404\n</pre> class Store(Resource):     @classmethod     def get(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             return store_schema.dump(store), 200          return {\"message\": STORE_NOT_FOUND}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400          store = StoreModel(name=name)         try:             store.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return store_schema.dump(store), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()             return {'message': STORE_DELETED}, 200          return {\"message\": STORE_NOT_FOUND}, 404 In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\nfrom models.user import UserModel\nfrom schemas.user import UserSchema\nfrom blacklist import BLACKLIST\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) from models.user import UserModel from schemas.user import UserSchema from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>USER_ALREADY_EXISTS = \"A user with that username already exists.\"\nCREATED_SUCCESSFULLY = \"User created successfully.\"\nUSER_NOT_FOUND = \"User not found.\"\nUSER_DELETED = \"User deleted.\"\nINVALID_CREDENTIALS = \"Invalid credentials!\"\nUSER_LOGGED_OUT = \"User &lt;id={}&gt; successfully logged out.\"\n</pre> USER_ALREADY_EXISTS = \"A user with that username already exists.\" CREATED_SUCCESSFULLY = \"User created successfully.\" USER_NOT_FOUND = \"User not found.\" USER_DELETED = \"User deleted.\" INVALID_CREDENTIALS = \"Invalid credentials!\" USER_LOGGED_OUT = \"User  successfully logged out.\" In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)  # UserModel object\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": USER_ALREADY_EXISTS}, 400\n\n        user.save_to_db()\n\n        return {\"message\": CREATED_SUCCESSFULLY}, 201\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)  # UserModel object          if UserModel.find_by_username(user.username):             return {\"message\": USER_ALREADY_EXISTS}, 400          user.save_to_db()          return {\"message\": CREATED_SUCCESSFULLY}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n\n        user.delete_from_db()\n        return {\"message\": USER_DELETED}, 200\n</pre> class User(Resource):     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404          user.delete_from_db()         return {\"message\": USER_DELETED}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_created = user_schema.load(user_json)  # UserModel object\n\n        user = UserModel.find_by_username(user_created.username)\n\n        if user and safe_str_cmp(user.password, user_created.password):\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n\n        return {\"message\": INVALID_CREDENTIALS}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_created = user_schema.load(user_json)  # UserModel object          user = UserModel.find_by_username(user_created.username)          if user and safe_str_cmp(user.password, user_created.password):             access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200          return {\"message\": INVALID_CREDENTIALS}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section2/schemas/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.item import ItemModel\nfrom models.store import StoreModel\n</pre> from ma import ma from models.item import ItemModel from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ItemModel\n        load_only = ('store',)\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class ItemSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ItemModel         load_only = ('store',)         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/schemas/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.store import StoreModel\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from ma import ma from models.store import StoreModel from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>class StoreSchema(ma.SQLAlchemyAutoSchema):\n    items = ma.Nested(ItemSchema, many=True)\n\n    class Meta:\n        model = StoreModel\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class StoreSchema(ma.SQLAlchemyAutoSchema):     items = ma.Nested(ItemSchema, many=True)      class Meta:         model = StoreModel         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section2/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.user import UserModel\n</pre> from ma import ma from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = ('password',)\n        dump_only = ('id',)\n        load_instance = True\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = ('password',)         dump_only = ('id',)         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom marshmallow import ValidationError\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from marshmallow import ValidationError In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom db import db\nfrom blacklist import BLACKLIST\nfrom resources.user import (\n    UserRegister,\n    UserLogin,\n    User,\n    TokenRefresh,\n    UserLogout,\n    UserConfirm,\n)\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\n</pre> from ma import ma from db import db from blacklist import BLACKLIST from resources.user import (     UserRegister,     UserLogin,     User,     TokenRefresh,     UserLogout,     UserConfirm, ) from resources.item import Item, ItemList from resources.store import Store, StoreList In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature\napp.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [\n    \"access\",\n    \"refresh\",\n]  # allow blacklisting for access and refresh tokens\napp.secret_key = os.environ.get(\"APP_SECRET_KEY\")  # could do app.config['JWT_SECRET_KEY'] if we prefer\napi = Api(app)\n</pre> app = Flask(__name__) app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\") app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False app.config[\"PROPAGATE_EXCEPTIONS\"] = True app.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature app.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [     \"access\",     \"refresh\", ]  # allow blacklisting for access and refresh tokens app.secret_key = os.environ.get(\"APP_SECRET_KEY\")  # could do app.config['JWT_SECRET_KEY'] if we prefer api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):  # except ValidationError as err\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):  # except ValidationError as err     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return (\n        decrypted_token[\"jti\"] in BLACKLIST\n    )  # Here we blacklist particular JWTs that have been created in the past.\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return (         decrypted_token[\"jti\"] in BLACKLIST     )  # Here we blacklist particular JWTs that have been created in the past. In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\napi.add_resource(UserConfirm, \"/user_confirm/&lt;int:user_id&gt;\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") api.add_resource(UserConfirm, \"/user_confirm/\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section3/libs/mailgun/","title":"Mailgun","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nfrom typing import List\n</pre> import os from typing import List In\u00a0[\u00a0]: Copied! <pre>from requests import Response, post\n</pre> from requests import Response, post In\u00a0[\u00a0]: Copied! <pre>FAILED_LOAD_API_KEY = \"Failed to load Mailgun API key\"\nFAILED_LOAD_DOMAIN = \"Failed to load Mailgun domain\"\nERROR_SENDING_EMAIL = \"Error in sending confirmation email, user registration failed.\"\n</pre> FAILED_LOAD_API_KEY = \"Failed to load Mailgun API key\" FAILED_LOAD_DOMAIN = \"Failed to load Mailgun domain\" ERROR_SENDING_EMAIL = \"Error in sending confirmation email, user registration failed.\" In\u00a0[\u00a0]: Copied! <pre>class MailgunExcpetion(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\n</pre> class MailgunExcpetion(Exception):     def __init__(self, message: str):         super().__init__(message) In\u00a0[\u00a0]: Copied! <pre>class Mailgun:\n    MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None\n    MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None\n\n    FROM_TITLE = 'Stores REST API'\n    FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'\n\n    @classmethod\n    def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:\n        if cls.MAILGUN_DOMAIN is None:\n            raise MailgunExcpetion(FAILED_LOAD_DOMAIN)\n\n        if cls.MAILGUN_API_KEY is None:\n            raise MailgunExcpetion(FAILED_LOAD_API_KEY)\n\n        response =  post(\n            f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",\n            auth=(\"api\", cls.MAILGUN_API_KEY),\n            data={\n                \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",\n                \"to\": email,\n                \"subject\": subject,\n                \"text\": text,\n                \"html\": html,\n            },\n        )\n\n        if response.status_code != 200:\n            raise MailgunExcpetion(ERROR_SENDING_EMAIL)\n\n        return response\n</pre> class Mailgun:     MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None     MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None      FROM_TITLE = 'Stores REST API'     FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'      @classmethod     def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:         if cls.MAILGUN_DOMAIN is None:             raise MailgunExcpetion(FAILED_LOAD_DOMAIN)          if cls.MAILGUN_API_KEY is None:             raise MailgunExcpetion(FAILED_LOAD_API_KEY)          response =  post(             f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",             auth=(\"api\", cls.MAILGUN_API_KEY),             data={                 \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",                 \"to\": email,                 \"subject\": subject,                 \"text\": text,                 \"html\": html,             },         )          if response.status_code != 200:             raise MailgunExcpetion(ERROR_SENDING_EMAIL)          return response"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section3/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n    price = db.Column(db.Float(precision=2), nullable=False)\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)\n    store = db.relationship(\"StoreModel\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)     price = db.Column(db.Float(precision=2), nullable=False)      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)     store = db.relationship(\"StoreModel\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import request, url_for\nfrom requests import Response\nfrom db import db\nfrom libs.mailgun import Mailgun\n</pre> from flask import request, url_for from requests import Response from db import db from libs.mailgun import Mailgun In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n    email = db.Column(db.String(80), nullable=False, unique=True)\n    activated = db.Column(db.Boolean, default=False)\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @classmethod\n    def find_by_email(cls, email: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(email=email).first()\n\n    def send_confirmation_email(self) -&gt; Response:\n        # http:127.0.0.1:5000 + /user_confirm/1\n        link = request.url_root[:-1] + url_for(\"userconfirm\", user_id=self.id)\n        subject = 'Registraction confirmation'\n        text = f'Please click the link to confirm your registration: {link}'\n        html = f'&lt;html&gt;Please click the link to confirm your registration: &lt;a href=\"{link}\"&gt;{link}&lt;/a&gt;&lt;/html&gt;'\n\n        return Mailgun.send_email([self.email], subject, text, html)\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)     email = db.Column(db.String(80), nullable=False, unique=True)     activated = db.Column(db.Boolean, default=False)      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      @classmethod     def find_by_email(cls, email: str) -&gt; \"UserModel\":         return cls.query.filter_by(email=email).first()      def send_confirmation_email(self) -&gt; Response:         # http:127.0.0.1:5000 + /user_confirm/1         link = request.url_root[:-1] + url_for(\"userconfirm\", user_id=self.id)         subject = 'Registraction confirmation'         text = f'Please click the link to confirm your registration: {link}'         html = f'Please click the link to confirm your registration: {link}'          return Mailgun.send_email([self.email], subject, text, html)      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section3/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from flask_restful import Resource from flask import request from flask_jwt_extended import jwt_required, fresh_jwt_required from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>NAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while inserting the item.\"\nITEM_NOT_FOUND = \"Item not found.\"\nITEM_DELETED = \"Item deleted.\"\n</pre> NAME_ALREADY_EXISTS = \"An item with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while inserting the item.\" ITEM_NOT_FOUND = \"Item not found.\" ITEM_DELETED = \"Item deleted.\" In\u00a0[\u00a0]: Copied! <pre>item_schema = ItemSchema()\nitem_list_schema = ItemSchema(many=True)\n</pre> item_schema = ItemSchema() item_list_schema = ItemSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item_schema.dump(item), 200\n\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):  # /item/chair\n        if ItemModel.find_by_name(name):\n            return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400\n\n        item_json = request.get_json()  # price, store_id\n        item_json['name'] = name\n\n        item = item_schema.load(item_json)  # ItemModel object\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return item_schema.dump(item), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": ITEM_DELETED}, 200\n\n        return {\"message\": ITEM_NOT_FOUND}, 404\n\n    @classmethod\n    def put(cls, name: str):\n        item_json = request.get_json()  # price, store_id\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = item_json[\"price\"]\n        else:\n            item_json['name'] = name\n            item = item_schema.load(item_json)  # ItemModel object\n\n        item.save_to_db()\n\n        return item_schema.dump(item), 200\n</pre> class Item(Resource):     @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item_schema.dump(item), 200          return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):  # /item/chair         if ItemModel.find_by_name(name):             return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400          item_json = request.get_json()  # price, store_id         item_json['name'] = name          item = item_schema.load(item_json)  # ItemModel object          try:             item.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return item_schema.dump(item), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": ITEM_DELETED}, 200          return {\"message\": ITEM_NOT_FOUND}, 404      @classmethod     def put(cls, name: str):         item_json = request.get_json()  # price, store_id         item = ItemModel.find_by_name(name)          if item:             item.price = item_json[\"price\"]         else:             item_json['name'] = name             item = item_schema.load(item_json)  # ItemModel object          item.save_to_db()          return item_schema.dump(item), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom models.store import StoreModel\nfrom schemas.store import StoreSchema\n</pre> from flask_restful import Resource from models.store import StoreModel from schemas.store import StoreSchema In\u00a0[\u00a0]: Copied! <pre>NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\"\nERROR_INSERTING = \"An error occurred while creating the store.\"\nSTORE_NOT_FOUND = \"Store not found.\"\nSTORE_DELETED = \"Store deleted.\"\n</pre> NAME_ALREADY_EXISTS = \"A store with name '{}' already exists.\" ERROR_INSERTING = \"An error occurred while creating the store.\" STORE_NOT_FOUND = \"Store not found.\" STORE_DELETED = \"Store deleted.\" In\u00a0[\u00a0]: Copied! <pre>store_schema = StoreSchema()\nstore_list_schema = StoreSchema(many=True)\n</pre> store_schema = StoreSchema() store_list_schema = StoreSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store_schema.dump(store), 200\n\n        return {\"message\": STORE_NOT_FOUND}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400\n\n        store = StoreModel(name=name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": ERROR_INSERTING}, 500\n\n        return store_schema.dump(store), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n            return {'message': STORE_DELETED}, 200\n\n        return {\"message\": STORE_NOT_FOUND}, 404\n</pre> class Store(Resource):     @classmethod     def get(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             return store_schema.dump(store), 200          return {\"message\": STORE_NOT_FOUND}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return {\"message\": NAME_ALREADY_EXISTS.format(name)}, 400          store = StoreModel(name=name)         try:             store.save_to_db()         except:             return {\"message\": ERROR_INSERTING}, 500          return store_schema.dump(store), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()             return {'message': STORE_DELETED}, 200          return {\"message\": STORE_NOT_FOUND}, 404 In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>import traceback\n</pre> import traceback In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request, make_response, render_template\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\n</pre> from flask_restful import Resource from flask import request, make_response, render_template from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) In\u00a0[\u00a0]: Copied! <pre>from models.user import UserModel\nfrom schemas.user import UserSchema\nfrom blacklist import BLACKLIST\nfrom libs.mailgun import MailgunExcpetion\n</pre> from models.user import UserModel from schemas.user import UserSchema from blacklist import BLACKLIST from libs.mailgun import MailgunExcpetion In\u00a0[\u00a0]: Copied! <pre>USER_ALREADY_EXISTS = \"A user with that username already exists.\"\nEMAIL_ALREADY_EXISTS = \"A user with that email already exists.\"\nUSER_NOT_FOUND = \"User not found.\"\nUSER_DELETED = \"User deleted.\"\nINVALID_CREDENTIALS = \"Invalid credentials!\"\nNOT_CONFIRMED_ERROR = \"You have not confirmed registration, please check your email &lt;{}&gt;.\"\nUSER_LOGGED_OUT = \"User &lt;id={}&gt; successfully logged out.\"\nUSER_CONFIRMED = \"User confirmed.\"\nFAILED_TO_CREATE = \"Internal server error. Failed to create user.\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfully, an email with an activation link has been sent to your email address, please check.\"\n</pre> USER_ALREADY_EXISTS = \"A user with that username already exists.\" EMAIL_ALREADY_EXISTS = \"A user with that email already exists.\" USER_NOT_FOUND = \"User not found.\" USER_DELETED = \"User deleted.\" INVALID_CREDENTIALS = \"Invalid credentials!\" NOT_CONFIRMED_ERROR = \"You have not confirmed registration, please check your email &lt;{}&gt;.\" USER_LOGGED_OUT = \"User  successfully logged out.\" USER_CONFIRMED = \"User confirmed.\" FAILED_TO_CREATE = \"Internal server error. Failed to create user.\" SUCCESS_REGISTER_MESSAGE = \"Account created successfully, an email with an activation link has been sent to your email address, please check.\" In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)  # UserModel object\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": USER_ALREADY_EXISTS}, 400\n\n        if UserModel.find_by_email(user.email):\n            return {\"message\": EMAIL_ALREADY_EXISTS}, 400\n\n        try:\n            user.save_to_db()\n            user.send_confirmation_email()\n            return {\"message\": SUCCESS_REGISTER_MESSAGE}, 201\n        except MailgunExcpetion as err:\n            user.delete_from_db()\n            return {'message': str(err)}, 500\n        except:\n            traceback.print_exc()\n            return {'message': FAILED_TO_CREATE}, 500\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)  # UserModel object          if UserModel.find_by_username(user.username):             return {\"message\": USER_ALREADY_EXISTS}, 400          if UserModel.find_by_email(user.email):             return {\"message\": EMAIL_ALREADY_EXISTS}, 400          try:             user.save_to_db()             user.send_confirmation_email()             return {\"message\": SUCCESS_REGISTER_MESSAGE}, 201         except MailgunExcpetion as err:             user.delete_from_db()             return {'message': str(err)}, 500         except:             traceback.print_exc()             return {'message': FAILED_TO_CREATE}, 500 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": USER_NOT_FOUND}, 404\n\n        user.delete_from_db()\n        return {\"message\": USER_DELETED}, 200\n</pre> class User(Resource):     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": USER_NOT_FOUND}, 404          user.delete_from_db()         return {\"message\": USER_DELETED}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_created = user_schema.load(user_json, partial=('email',))  # UserModel object\n\n        user = UserModel.find_by_username(user_created.username)\n\n        if user and safe_str_cmp(user.password, user_created.password):\n            if user.activated:\n                access_token = create_access_token(identity=user.id, fresh=True)\n                refresh_token = create_refresh_token(user.id)\n                return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n            return {'message': NOT_CONFIRMED_ERROR.format(user.username)}, 400\n        return {\"message\": INVALID_CREDENTIALS}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_created = user_schema.load(user_json, partial=('email',))  # UserModel object          user = UserModel.find_by_username(user_created.username)          if user and safe_str_cmp(user.password, user_created.password):             if user.activated:                 access_token = create_access_token(identity=user.id, fresh=True)                 refresh_token = create_refresh_token(user.id)                 return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200             return {'message': NOT_CONFIRMED_ERROR.format(user.username)}, 400         return {\"message\": INVALID_CREDENTIALS}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": USER_LOGGED_OUT.format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserConfirm(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': USER_NOT_FOUND}, 404\n\n        user.activated = True\n        user.save_to_db()\n        headers = {'Content-Type': 'text/html'}\n        return make_response(render_template(\"confirmation_page.html\", email=user.username), 200, headers)\n</pre> class UserConfirm(Resource):     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {'message': USER_NOT_FOUND}, 404          user.activated = True         user.save_to_db()         headers = {'Content-Type': 'text/html'}         return make_response(render_template(\"confirmation_page.html\", email=user.username), 200, headers)"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section3/schemas/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.item import ItemModel\nfrom models.store import StoreModel\n</pre> from ma import ma from models.item import ItemModel from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ItemModel\n        load_only = ('store',)\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class ItemSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ItemModel         load_only = ('store',)         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/schemas/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.store import StoreModel\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from ma import ma from models.store import StoreModel from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>class StoreSchema(ma.SQLAlchemyAutoSchema):\n    items = ma.Nested(ItemSchema, many=True)\n\n    class Meta:\n        model = StoreModel\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class StoreSchema(ma.SQLAlchemyAutoSchema):     items = ma.Nested(ItemSchema, many=True)      class Meta:         model = StoreModel         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section3/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.user import UserModel\n</pre> from ma import ma from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = ('password',)\n        dump_only = ('id', 'activated')\n        load_instance = True\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = ('password',)         dump_only = ('id', 'activated')         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom marshmallow import ValidationError\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from marshmallow import ValidationError In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom db import db\nfrom blacklist import BLACKLIST\nfrom resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\nfrom resources.confirmation import Confirmation, ConfirmationByUser\n</pre> from ma import ma from db import db from blacklist import BLACKLIST from resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout from resources.item import Item, ItemList from resources.store import Store, StoreList from resources.confirmation import Confirmation, ConfirmationByUser In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature\napp.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [\n    \"access\",\n    \"refresh\",\n]  # allow blacklisting for access and refresh tokens\napp.secret_key = os.environ.get(\"APP_SECRET_KEY\")  # could do app.config['JWT_SECRET_KEY'] if we prefer\napi = Api(app)\n</pre> app = Flask(__name__) app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\") app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False app.config[\"PROPAGATE_EXCEPTIONS\"] = True app.config[\"JWT_BLACKLIST_ENABLED\"] = True  # enable blacklist feature app.config[\"JWT_BLACKLIST_TOKEN_CHECKS\"] = [     \"access\",     \"refresh\", ]  # allow blacklisting for access and refresh tokens app.secret_key = os.environ.get(\"APP_SECRET_KEY\")  # could do app.config['JWT_SECRET_KEY'] if we prefer api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):  # except ValidationError as err\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):  # except ValidationError as err     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return (\n        decrypted_token[\"jti\"] in BLACKLIST\n    )  # Here we blacklist particular JWTs that have been created in the past.\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return (         decrypted_token[\"jti\"] in BLACKLIST     )  # Here we blacklist particular JWTs that have been created in the past. In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\napi.add_resource(Confirmation, \"/user_confirmation/&lt;string:confirmation_id&gt;\")\napi.add_resource(ConfirmationByUser, \"/confirmation/user/&lt;int:user_id&gt;\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") api.add_resource(Confirmation, \"/user_confirmation/\") api.add_resource(ConfirmationByUser, \"/confirmation/user/\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section4/libs/mailgun/","title":"Mailgun","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nfrom typing import List\n</pre> import os from typing import List In\u00a0[\u00a0]: Copied! <pre>from requests import Response, post\n</pre> from requests import Response, post In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\n</pre> from libs.strings import gettext In\u00a0[\u00a0]: Copied! <pre>class MailgunExcpetion(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\n</pre> class MailgunExcpetion(Exception):     def __init__(self, message: str):         super().__init__(message) In\u00a0[\u00a0]: Copied! <pre>class Mailgun:\n    MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None\n    MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None\n\n    FROM_TITLE = 'Stores REST API'\n    FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'\n\n    @classmethod\n    def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:\n        if cls.MAILGUN_DOMAIN is None:\n            raise MailgunExcpetion(gettext(\"mailgun_failed_load_domain\"))\n\n        if cls.MAILGUN_API_KEY is None:\n            raise MailgunExcpetion(gettext(\"mailgun_failed_load_api_key\"))\n\n        response =  post(\n            f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",\n            auth=(\"api\", cls.MAILGUN_API_KEY),\n            data={\n                \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",\n                \"to\": email,\n                \"subject\": subject,\n                \"text\": text,\n                \"html\": html,\n            },\n        )\n\n        if response.status_code != 200:\n            raise MailgunExcpetion(gettext(\"mailgun_error_send_email\"))\n\n        return response\n</pre> class Mailgun:     MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None     MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None      FROM_TITLE = 'Stores REST API'     FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'      @classmethod     def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:         if cls.MAILGUN_DOMAIN is None:             raise MailgunExcpetion(gettext(\"mailgun_failed_load_domain\"))          if cls.MAILGUN_API_KEY is None:             raise MailgunExcpetion(gettext(\"mailgun_failed_load_api_key\"))          response =  post(             f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",             auth=(\"api\", cls.MAILGUN_API_KEY),             data={                 \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",                 \"to\": email,                 \"subject\": subject,                 \"text\": text,                 \"html\": html,             },         )          if response.status_code != 200:             raise MailgunExcpetion(gettext(\"mailgun_error_send_email\"))          return response"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/libs/strings/","title":"Strings","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nlibs.strings\n\nBy default, use `en-gb.json` file inside `strings` top-level folder.\n\nIf language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`\n\"\"\"\nimport json\n</pre> \"\"\" libs.strings  By default, use `en-gb.json` file inside `strings` top-level folder.  If language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()` \"\"\" import json In\u00a0[\u00a0]: Copied! <pre>default_locale = \"en-gb\"\ncached_strings = {}\n</pre> default_locale = \"en-gb\" cached_strings = {} In\u00a0[\u00a0]: Copied! <pre>def refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\n</pre> def refresh():     global cached_strings     with open(f\"strings/{default_locale}.json\") as f:         cached_strings = json.load(f) In\u00a0[\u00a0]: Copied! <pre>def gettext(name):\n    return cached_strings[name]\n</pre> def gettext(name):     return cached_strings[name] In\u00a0[\u00a0]: Copied! <pre>refresh()\n</pre> refresh()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section4/models/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>from uuid import uuid4\nfrom time import time\n</pre> from uuid import uuid4 from time import time In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>CONFIRMATION_EXPIRATION_DELTA = 1800  # 30 mins\n</pre> CONFIRMATION_EXPIRATION_DELTA = 1800  # 30 mins In\u00a0[\u00a0]: Copied! <pre>class ConfirmationModel(db.Model):\n    __tablename__ = \"confirmations\"\n\n    id = db.Column(db.String(50), primary_key=True)\n    expire_at = db.Column(db.Integer, nullable=False)\n    confirmed = db.Column(db.Boolean, nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n\n    user = db.relationship(\"UserModel\")\n\n    def __init__(self, user_id: int, **kwargs):\n        super().__init__(**kwargs)\n        self.user_id = user_id\n        self.id = uuid4().hex\n        self.expire_at = int(time()) + CONFIRMATION_EXPIRATION_DELTA\n        self.confirmed = False\n\n    @classmethod\n    def find_by_id(cls, _id: str) -&gt; \"ConfirmationModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @property\n    def expired(self) -&gt; bool:\n        return time() &gt; self.expire_at\n\n    def force_to_expire(self) -&gt; None:\n        if not self.expired:\n            self.expire_at = int(time())\n            self.save_to_db()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ConfirmationModel(db.Model):     __tablename__ = \"confirmations\"      id = db.Column(db.String(50), primary_key=True)     expire_at = db.Column(db.Integer, nullable=False)     confirmed = db.Column(db.Boolean, nullable=False)     user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)      user = db.relationship(\"UserModel\")      def __init__(self, user_id: int, **kwargs):         super().__init__(**kwargs)         self.user_id = user_id         self.id = uuid4().hex         self.expire_at = int(time()) + CONFIRMATION_EXPIRATION_DELTA         self.confirmed = False      @classmethod     def find_by_id(cls, _id: str) -&gt; \"ConfirmationModel\":         return cls.query.filter_by(id=_id).first()      @property     def expired(self) -&gt; bool:         return time() &gt; self.expire_at      def force_to_expire(self) -&gt; None:         if not self.expired:             self.expire_at = int(time())             self.save_to_db()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n    price = db.Column(db.Float(precision=2), nullable=False)\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)\n    store = db.relationship(\"StoreModel\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)     price = db.Column(db.Float(precision=2), nullable=False)      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)     store = db.relationship(\"StoreModel\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from requests import Response\nfrom flask import request, url_for\n</pre> from requests import Response from flask import request, url_for In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom libs.mailgun import Mailgun\nfrom models.confirmation import ConfirmationModel\n</pre> from db import db from libs.mailgun import Mailgun from models.confirmation import ConfirmationModel In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n    email = db.Column(db.String(80), nullable=False, unique=True)\n\n    confirmation = db.relationship(\n        \"ConfirmationModel\", lazy=\"dynamic\", cascade=\"all, delete-orphan\"\n    )\n\n    @property\n    def most_recent_confirmation(self) -&gt; \"ConfirmationModel\":\n        return self.confirmation.order_by(db.desc(ConfirmationModel.expire_at)).first()\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @classmethod\n    def find_by_email(cls, email: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(email=email).first()\n\n    def send_confirmation_email(self) -&gt; Response:\n        # http:127.0.0.1:5000 + /confirmation/as23jkv87n312hfg2k4n8eg3p3\n        link = request.url_root[:-1] + url_for(\n            \"confirmation\", confirmation_id=self.most_recent_confirmation.id\n        )\n        subject = 'Registration confirmation'\n        text = f'Please click the link to confirm your registration: {link}'\n        html = f'&lt;html&gt;Please click the link to confirm your registration: &lt;a href=\"{link}\"&gt;{link}&lt;/a&gt;&lt;/html&gt;'\n\n        return Mailgun.send_email([self.email], subject, text, html)\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)     email = db.Column(db.String(80), nullable=False, unique=True)      confirmation = db.relationship(         \"ConfirmationModel\", lazy=\"dynamic\", cascade=\"all, delete-orphan\"     )      @property     def most_recent_confirmation(self) -&gt; \"ConfirmationModel\":         return self.confirmation.order_by(db.desc(ConfirmationModel.expire_at)).first()      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      @classmethod     def find_by_email(cls, email: str) -&gt; \"UserModel\":         return cls.query.filter_by(email=email).first()      def send_confirmation_email(self) -&gt; Response:         # http:127.0.0.1:5000 + /confirmation/as23jkv87n312hfg2k4n8eg3p3         link = request.url_root[:-1] + url_for(             \"confirmation\", confirmation_id=self.most_recent_confirmation.id         )         subject = 'Registration confirmation'         text = f'Please click the link to confirm your registration: {link}'         html = f'Please click the link to confirm your registration: {link}'          return Mailgun.send_email([self.email], subject, text, html)      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section4/resources/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>import traceback\nfrom time import time\n</pre> import traceback from time import time In\u00a0[\u00a0]: Copied! <pre>from flask import make_response, render_template\nfrom flask_restful import Resource\n</pre> from flask import make_response, render_template from flask_restful import Resource In\u00a0[\u00a0]: Copied! <pre>from libs.mailgun import MailgunExcpetion\nfrom libs.strings import gettext\nfrom models.confirmation import ConfirmationModel\nfrom models.user import UserModel\nfrom schemas.confirmation import ConfirmationSchema\n</pre> from libs.mailgun import MailgunExcpetion from libs.strings import gettext from models.confirmation import ConfirmationModel from models.user import UserModel from schemas.confirmation import ConfirmationSchema In\u00a0[\u00a0]: Copied! <pre>confirmation_schema = ConfirmationSchema()\n</pre> confirmation_schema = ConfirmationSchema() In\u00a0[\u00a0]: Copied! <pre>class Confirmation(Resource):\n    @classmethod\n    def get(cls, confirmation_id: str):\n        \"\"\"Return confirmation HTML page.\"\"\"\n        confirmation = ConfirmationModel.find_by_id(confirmation_id)\n        if not confirmation:\n            return {'message', gettext(\"confirmation_not_found\")}, 404\n\n        if confirmation.expired:\n            return {'message', gettext(\"confirmation_link_expired\")}, 400\n\n        if confirmation.confirmed:\n            return {'message', gettext(\"confirmation_already_confirmed\")}, 400\n\n        confirmation.confirmed = True\n        confirmation.save_to_db()\n\n        headers = {'Content-Type': 'text/html'}\n        return make_response(\n            render_template(\"confirmation_page.html\", email=confirmation.user.email),\n            200,\n            headers,\n        )\n</pre> class Confirmation(Resource):     @classmethod     def get(cls, confirmation_id: str):         \"\"\"Return confirmation HTML page.\"\"\"         confirmation = ConfirmationModel.find_by_id(confirmation_id)         if not confirmation:             return {'message', gettext(\"confirmation_not_found\")}, 404          if confirmation.expired:             return {'message', gettext(\"confirmation_link_expired\")}, 400          if confirmation.confirmed:             return {'message', gettext(\"confirmation_already_confirmed\")}, 400          confirmation.confirmed = True         confirmation.save_to_db()          headers = {'Content-Type': 'text/html'}         return make_response(             render_template(\"confirmation_page.html\", email=confirmation.user.email),             200,             headers,         ) In\u00a0[\u00a0]: Copied! <pre>class ConfirmationByUser(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        \"\"\"Return confirmations for a given user. User for testing.\"\"\"\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': gettext(\"user_not_found\")}, 404\n\n        return (\n            {\n                'current_time': int(time()),\n                \"confirmation\": [\n                    confirmation_schema.dump(each)\n                    for each in user.confirmation.order_by(ConfirmationModel.expire_at)\n                ],\n            },\n            200,\n        )\n\n    @classmethod\n    def post(cls, user_id: int):\n        \"\"\"Resend confirmation email.\"\"\"\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': gettext(\"user_not_found\")}, 404\n\n        try:\n            confirmation = user.most_recent_confirmation\n            if confirmation:\n                if confirmation.confirmed:\n                    return {'message': gettext(\"confirmation_already_confirmed\")}, 400\n                confirmation.force_to_expire()\n\n            new_confirmation = ConfirmationModel(user_id)\n            new_confirmation.save_to_db()\n            user.send_confirmation_email()\n            return {'message': gettext(\"confirmation_resend_successful\")}, 201\n        except MailgunExcpetion as err:\n            return {'message': str(err)}, 500\n        except:\n            traceback.print_exc()\n            return {'message': gettext(\"confirmation_resend_fail\")}, 500\n</pre> class ConfirmationByUser(Resource):     @classmethod     def get(cls, user_id: int):         \"\"\"Return confirmations for a given user. User for testing.\"\"\"         user = UserModel.find_by_id(user_id)         if not user:             return {'message': gettext(\"user_not_found\")}, 404          return (             {                 'current_time': int(time()),                 \"confirmation\": [                     confirmation_schema.dump(each)                     for each in user.confirmation.order_by(ConfirmationModel.expire_at)                 ],             },             200,         )      @classmethod     def post(cls, user_id: int):         \"\"\"Resend confirmation email.\"\"\"         user = UserModel.find_by_id(user_id)         if not user:             return {'message': gettext(\"user_not_found\")}, 404          try:             confirmation = user.most_recent_confirmation             if confirmation:                 if confirmation.confirmed:                     return {'message': gettext(\"confirmation_already_confirmed\")}, 400                 confirmation.force_to_expire()              new_confirmation = ConfirmationModel(user_id)             new_confirmation.save_to_db()             user.send_confirmation_email()             return {'message': gettext(\"confirmation_resend_successful\")}, 201         except MailgunExcpetion as err:             return {'message': str(err)}, 500         except:             traceback.print_exc()             return {'message': gettext(\"confirmation_resend_fail\")}, 500"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import request\nfrom flask_restful import Resource\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\n</pre> from flask import request from flask_restful import Resource from flask_jwt_extended import jwt_required, fresh_jwt_required In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from libs.strings import gettext from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>item_schema = ItemSchema()\nitem_list_schema = ItemSchema(many=True)\n</pre> item_schema = ItemSchema() item_list_schema = ItemSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item_schema.dump(item), 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):  # /item/chair\n        if ItemModel.find_by_name(name):\n            return {\"message\": gettext(\"item_name_exists\").format(name)}, 400\n\n        item_json = request.get_json()  # price, store_id\n        item_json['name'] = name\n\n        item = item_schema.load(item_json)  # ItemModel object\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": gettext(\"item_error_inserting\")}, 500\n\n        return item_schema.dump(item), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": gettext(\"item_deleted\")}, 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    def put(cls, name: str):\n        item_json = request.get_json()  # price, store_id\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = item_json[\"price\"]\n        else:\n            item_json['name'] = name\n            item = item_schema.load(item_json)  # ItemModel object\n\n        item.save_to_db()\n\n        return item_schema.dump(item), 200\n</pre> class Item(Resource):     @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item_schema.dump(item), 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):  # /item/chair         if ItemModel.find_by_name(name):             return {\"message\": gettext(\"item_name_exists\").format(name)}, 400          item_json = request.get_json()  # price, store_id         item_json['name'] = name          item = item_schema.load(item_json)  # ItemModel object          try:             item.save_to_db()         except:             return {\"message\": gettext(\"item_error_inserting\")}, 500          return item_schema.dump(item), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": gettext(\"item_deleted\")}, 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     def put(cls, name: str):         item_json = request.get_json()  # price, store_id         item = ItemModel.find_by_name(name)          if item:             item.price = item_json[\"price\"]         else:             item_json['name'] = name             item = item_schema.load(item_json)  # ItemModel object          item.save_to_db()          return item_schema.dump(item), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\n</pre> from flask_restful import Resource In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\nfrom models.store import StoreModel\nfrom schemas.store import StoreSchema\n</pre> from libs.strings import gettext from models.store import StoreModel from schemas.store import StoreSchema In\u00a0[\u00a0]: Copied! <pre>store_schema = StoreSchema()\nstore_list_schema = StoreSchema(many=True)\n</pre> store_schema = StoreSchema() store_list_schema = StoreSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store_schema.dump(store), 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return {\"message\": gettext(\"store_name_exists\").format(name)}, 400\n\n        store = StoreModel(name=name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": gettext(\"store_error_inserting\")}, 500\n\n        return store_schema.dump(store), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n            return {'message': gettext(\"store_deleted\")}, 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n</pre> class Store(Resource):     @classmethod     def get(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             return store_schema.dump(store), 200          return {\"message\": gettext(\"store_not_found\")}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return {\"message\": gettext(\"store_name_exists\").format(name)}, 400          store = StoreModel(name=name)         try:             store.save_to_db()         except:             return {\"message\": gettext(\"store_error_inserting\")}, 500          return store_schema.dump(store), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()             return {'message': gettext(\"store_deleted\")}, 200          return {\"message\": gettext(\"store_not_found\")}, 404 In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>import traceback\n</pre> import traceback In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) In\u00a0[\u00a0]: Copied! <pre>from libs.mailgun import MailgunExcpetion\nfrom libs.strings import gettext\nfrom models.user import UserModel\nfrom models.confirmation import ConfirmationModel\nfrom schemas.user import UserSchema\nfrom blacklist import BLACKLIST\n</pre> from libs.mailgun import MailgunExcpetion from libs.strings import gettext from models.user import UserModel from models.confirmation import ConfirmationModel from schemas.user import UserSchema from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)  # UserModel object\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": gettext(\"user_username_exists\")}, 400\n\n        if UserModel.find_by_email(user.email):\n            return {\"message\": gettext(\"user_email_exists\")}, 400\n\n        try:\n            user.save_to_db()\n            confirmation = ConfirmationModel(user.id)\n            confirmation.save_to_db()\n            user.send_confirmation_email()\n            return {\"message\": gettext(\"user_registered\")}, 201\n        except MailgunExcpetion as err:\n            user.delete_from_db()\n            return {'message': str(err)}, 500\n        except:\n            traceback.print_exc()\n            user.delete_from_db()\n            return {'message': gettext(\"user_error_creating\")}, 500\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)  # UserModel object          if UserModel.find_by_username(user.username):             return {\"message\": gettext(\"user_username_exists\")}, 400          if UserModel.find_by_email(user.email):             return {\"message\": gettext(\"user_email_exists\")}, 400          try:             user.save_to_db()             confirmation = ConfirmationModel(user.id)             confirmation.save_to_db()             user.send_confirmation_email()             return {\"message\": gettext(\"user_registered\")}, 201         except MailgunExcpetion as err:             user.delete_from_db()             return {'message': str(err)}, 500         except:             traceback.print_exc()             user.delete_from_db()             return {'message': gettext(\"user_error_creating\")}, 500 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        user.delete_from_db()\n        return {\"message\": gettext(\"user_deleted\")}, 200\n</pre> class User(Resource):     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          user.delete_from_db()         return {\"message\": gettext(\"user_deleted\")}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_created = user_schema.load(user_json, partial=('email',))  # UserModel object\n\n        user = UserModel.find_by_username(user_created.username)\n\n        if user and safe_str_cmp(user.password, user_created.password):\n            confirmation = user.most_recent_confirmation\n            if confirmation and confirmation.confirmed:\n                access_token = create_access_token(identity=user.id, fresh=True)\n                refresh_token = create_refresh_token(user.id)\n                return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n            return {'message': gettext(\"user_not_confirmed\").format(user.username)}, 400\n        return {\"message\": gettext(\"user_invalid_credentials\")}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_created = user_schema.load(user_json, partial=('email',))  # UserModel object          user = UserModel.find_by_username(user_created.username)          if user and safe_str_cmp(user.password, user_created.password):             confirmation = user.most_recent_confirmation             if confirmation and confirmation.confirmed:                 access_token = create_access_token(identity=user.id, fresh=True)                 refresh_token = create_refresh_token(user.id)                 return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200             return {'message': gettext(\"user_not_confirmed\").format(user.username)}, 400         return {\"message\": gettext(\"user_invalid_credentials\")}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section4/schemas/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.confirmation import ConfirmationModel\n</pre> from ma import ma from models.confirmation import ConfirmationModel In\u00a0[\u00a0]: Copied! <pre>class ConfirmationSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ConfirmationModel\n        load_only = (\"user\",)\n        dump_only = (\"id\", \"expire_at\", \"confirmed\")\n        include_fk = True\n        load_instance = True\n</pre> class ConfirmationSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ConfirmationModel         load_only = (\"user\",)         dump_only = (\"id\", \"expire_at\", \"confirmed\")         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/schemas/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.item import ItemModel\nfrom models.store import StoreModel\n</pre> from ma import ma from models.item import ItemModel from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ItemModel\n        load_only = ('store',)\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class ItemSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ItemModel         load_only = ('store',)         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/schemas/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.store import StoreModel\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from ma import ma from models.store import StoreModel from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>class StoreSchema(ma.SQLAlchemyAutoSchema):\n    items = ma.Nested(ItemSchema, many=True)\n\n    class Meta:\n        model = StoreModel\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class StoreSchema(ma.SQLAlchemyAutoSchema):     items = ma.Nested(ItemSchema, many=True)      class Meta:         model = StoreModel         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section4/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom marshmallow import pre_dump\nfrom models.user import UserModel\nfrom schemas.confirmation import ConfirmationSchema\n</pre> from ma import ma from marshmallow import pre_dump from models.user import UserModel from schemas.confirmation import ConfirmationSchema In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = ('password',)\n        dump_only = ('id', 'confirmation')\n        include_relationships = True\n        load_instance = True\n\n    @pre_dump\n    def _pre_dump(self, user: UserModel, many, **kwargs):\n        user.confirmation = [user.most_recent_confirmation]\n        return user\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = ('password',)         dump_only = ('id', 'confirmation')         include_relationships = True         load_instance = True      @pre_dump     def _pre_dump(self, user: UserModel, many, **kwargs):         user.confirmation = [user.most_recent_confirmation]         return user"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom flask_uploads import configure_uploads, patch_request_class\nfrom marshmallow import ValidationError\nfrom dotenv import load_dotenv\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from flask_uploads import configure_uploads, patch_request_class from marshmallow import ValidationError from dotenv import load_dotenv In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom db import db\nfrom blacklist import BLACKLIST\nfrom resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\nfrom resources.confirmation import Confirmation, ConfirmationByUser\nfrom resources.image import ImageUpload, Image, AvatarUpload, Avatar\nfrom libs.image_helper import IMAGE_SET\n</pre> from ma import ma from db import db from blacklist import BLACKLIST from resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout from resources.item import Item, ItemList from resources.store import Store, StoreList from resources.confirmation import Confirmation, ConfirmationByUser from resources.image import ImageUpload, Image, AvatarUpload, Avatar from libs.image_helper import IMAGE_SET In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\nload_dotenv(\".env\", verbose=True)\napp.config.from_object(\"default_config\")  # load `default_config.py` as a configuration settings\napp.config.from_envvar(\"APPLICATION_SETTINGS\")  # load [`default_config.py`, `config.py`] as a configuration settings\npatch_request_class(app, 10 * 1024 * 1024) # 10MB max size upload\nconfigure_uploads(app, IMAGE_SET)\napi = Api(app)\n</pre> app = Flask(__name__) load_dotenv(\".env\", verbose=True) app.config.from_object(\"default_config\")  # load `default_config.py` as a configuration settings app.config.from_envvar(\"APPLICATION_SETTINGS\")  # load [`default_config.py`, `config.py`] as a configuration settings patch_request_class(app, 10 * 1024 * 1024) # 10MB max size upload configure_uploads(app, IMAGE_SET) api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):  # except ValidationError as err\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):  # except ValidationError as err     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return (\n        decrypted_token[\"jti\"] in BLACKLIST\n    )  # Here we blacklist particular JWTs that have been created in the past.\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return (         decrypted_token[\"jti\"] in BLACKLIST     )  # Here we blacklist particular JWTs that have been created in the past. In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\napi.add_resource(Confirmation, \"/user_confirmation/&lt;string:confirmation_id&gt;\")\napi.add_resource(ConfirmationByUser, \"/confirmation/user/&lt;int:user_id&gt;\")\napi.add_resource(ImageUpload, \"/upload/image\")\napi.add_resource(Image, \"/image/&lt;string:filename&gt;\")\napi.add_resource(AvatarUpload, \"/upload/avatar\")\napi.add_resource(Avatar, \"/avatar/&lt;int:user_id&gt;\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") api.add_resource(Confirmation, \"/user_confirmation/\") api.add_resource(ConfirmationByUser, \"/confirmation/user/\") api.add_resource(ImageUpload, \"/upload/image\") api.add_resource(Image, \"/image/\") api.add_resource(AvatarUpload, \"/upload/avatar\") api.add_resource(Avatar, \"/avatar/\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    app.run(port=5000)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     app.run(port=5000)"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/config/","title":"Config","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>DEBUG = False\nSQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")\n</pre> DEBUG = False SQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/default_config/","title":"Default config","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>DEBUG = True\nSQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\"\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nPROPAGATE_EXCEPTIONS = True\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nUPLOADED_IMAGES_DEST = os.path.join('static', 'images')\nJWT_BLACKLIST_ENABLED = True\nJWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']\n</pre> DEBUG = True SQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\" SQLALCHEMY_TRACK_MODIFICATIONS = False PROPAGATE_EXCEPTIONS = True JWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"] SECRET_KEY = os.environ[\"APP_SECRET_KEY\"] UPLOADED_IMAGES_DEST = os.path.join('static', 'images') JWT_BLACKLIST_ENABLED = True JWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section6/libs/image_helper/","title":"Image helper","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nimport re\nfrom typing import Union\nfrom werkzeug.datastructures import FileStorage\n</pre> import os import re from typing import Union from werkzeug.datastructures import FileStorage In\u00a0[\u00a0]: Copied! <pre>from flask_uploads import UploadSet, IMAGES\n</pre> from flask_uploads import UploadSet, IMAGES In\u00a0[\u00a0]: Copied! <pre>IMAGE_SET = UploadSet(\"images\", IMAGES)  # set folder name and allowed extensions\n</pre> IMAGE_SET = UploadSet(\"images\", IMAGES)  # set folder name and allowed extensions In\u00a0[\u00a0]: Copied! <pre>def save_image(image: FileStorage, folder: str = None, name: str = None) -&gt; str:\n    return IMAGE_SET.save(image, folder, name)\n</pre> def save_image(image: FileStorage, folder: str = None, name: str = None) -&gt; str:     return IMAGE_SET.save(image, folder, name) In\u00a0[\u00a0]: Copied! <pre>def get_path(filename: str = None, folder: str = None) -&gt; str:\n    return IMAGE_SET.path(filename, folder)\n</pre> def get_path(filename: str = None, folder: str = None) -&gt; str:     return IMAGE_SET.path(filename, folder) In\u00a0[\u00a0]: Copied! <pre>def find_image_any_format(filename: str, folder: str) -&gt; Union[str, None]:\n    \"\"\"\n    Given a format-less filename, try to find the file by appending each of the allowed formats to the given\n    filename and check if the file exists\n    :param filename: formatless filename\n    :param folder: the relative folder in which to search\n    :return: the path of the image if exists, otherwise None\n    \"\"\"\n    for _format in IMAGES:  # look for existing avatar and delete it\n        avatar = f\"{filename}.{_format}\"\n        avatar_path = IMAGE_SET.path(filename=avatar, folder=folder)\n        if os.path.isfile(avatar_path):\n            return avatar_path\n    return None\n</pre> def find_image_any_format(filename: str, folder: str) -&gt; Union[str, None]:     \"\"\"     Given a format-less filename, try to find the file by appending each of the allowed formats to the given     filename and check if the file exists     :param filename: formatless filename     :param folder: the relative folder in which to search     :return: the path of the image if exists, otherwise None     \"\"\"     for _format in IMAGES:  # look for existing avatar and delete it         avatar = f\"{filename}.{_format}\"         avatar_path = IMAGE_SET.path(filename=avatar, folder=folder)         if os.path.isfile(avatar_path):             return avatar_path     return None In\u00a0[\u00a0]: Copied! <pre>def _retrieve_filename(file: Union[str, FileStorage]) -&gt; str:\n    \"\"\"\n    Make our filename related functions generic, able to deal with FileStorage object as well as filename str.\n    \"\"\"\n    if isinstance(file, FileStorage):\n        return file.filename\n    return file\n</pre> def _retrieve_filename(file: Union[str, FileStorage]) -&gt; str:     \"\"\"     Make our filename related functions generic, able to deal with FileStorage object as well as filename str.     \"\"\"     if isinstance(file, FileStorage):         return file.filename     return file In\u00a0[\u00a0]: Copied! <pre>def is_filename_safe(file: Union[str, FileStorage]) -&gt; bool:\n    \"\"\"\n    Check if a filename is secure according to our definition\n    - starts with a-z A-Z 0-9 at least one time\n    - only contains a-z A-Z 0-9 and _().-\n    - followed by a dot (.) and a allowed_format at the end\n    \"\"\"\n    filename = _retrieve_filename(file)\n\n    allowed_format = \"|\".join(IMAGES)\n    # format IMAGES into regex, eg: ('jpeg','png') --&gt; 'jpeg|png'\n    regex = f\"^[a-zA-Z0-9][a-zA-Z0-9_()-\\.]*\\.({allowed_format})$\"\n    return re.match(regex, filename) is not None\n</pre> def is_filename_safe(file: Union[str, FileStorage]) -&gt; bool:     \"\"\"     Check if a filename is secure according to our definition     - starts with a-z A-Z 0-9 at least one time     - only contains a-z A-Z 0-9 and _().-     - followed by a dot (.) and a allowed_format at the end     \"\"\"     filename = _retrieve_filename(file)      allowed_format = \"|\".join(IMAGES)     # format IMAGES into regex, eg: ('jpeg','png') --&gt; 'jpeg|png'     regex = f\"^[a-zA-Z0-9][a-zA-Z0-9_()-\\.]*\\.({allowed_format})$\"     return re.match(regex, filename) is not None In\u00a0[\u00a0]: Copied! <pre>def get_basename(file: Union[str, FileStorage]) -&gt; str:\n    \"\"\"\n    Return file's basename, for example\n    get_basename('some/folder/image.jpg') returns 'image.jpg'\n    \"\"\"\n    filename = _retrieve_filename(file)\n    return os.path.split(filename)[1]\n</pre> def get_basename(file: Union[str, FileStorage]) -&gt; str:     \"\"\"     Return file's basename, for example     get_basename('some/folder/image.jpg') returns 'image.jpg'     \"\"\"     filename = _retrieve_filename(file)     return os.path.split(filename)[1] In\u00a0[\u00a0]: Copied! <pre>def get_extension(file: Union[str, FileStorage]) -&gt; str:\n    \"\"\"\n    Return file's extension, for example\n    get_extension('image.jpg') returns '.jpg'\n    \"\"\"\n    filename = _retrieve_filename(file)\n    return os.path.splitext(filename)[1]\n</pre> def get_extension(file: Union[str, FileStorage]) -&gt; str:     \"\"\"     Return file's extension, for example     get_extension('image.jpg') returns '.jpg'     \"\"\"     filename = _retrieve_filename(file)     return os.path.splitext(filename)[1]"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/libs/mailgun/","title":"Mailgun","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nfrom typing import List\n</pre> import os from typing import List In\u00a0[\u00a0]: Copied! <pre>from requests import Response, post\n</pre> from requests import Response, post In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\n</pre> from libs.strings import gettext In\u00a0[\u00a0]: Copied! <pre>class MailgunExcpetion(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\n</pre> class MailgunExcpetion(Exception):     def __init__(self, message: str):         super().__init__(message) In\u00a0[\u00a0]: Copied! <pre>class Mailgun:\n    MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None\n    MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None\n\n    FROM_TITLE = 'Stores REST API'\n    FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'\n\n    @classmethod\n    def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:\n        if cls.MAILGUN_DOMAIN is None:\n            raise MailgunExcpetion(gettext(\"mailgun_failed_load_domain\"))\n\n        if cls.MAILGUN_API_KEY is None:\n            raise MailgunExcpetion(gettext(\"mailgun_failed_load_api_key\"))\n\n        response =  post(\n            f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",\n            auth=(\"api\", cls.MAILGUN_API_KEY),\n            data={\n                \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",\n                \"to\": email,\n                \"subject\": subject,\n                \"text\": text,\n                \"html\": html,\n            },\n        )\n\n        if response.status_code != 200:\n            raise MailgunExcpetion(gettext(\"mailgun_error_send_email\"))\n\n        return response\n</pre> class Mailgun:     MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\")  # can be None     MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\")  # can be None      FROM_TITLE = 'Stores REST API'     FROM_EMAIL = f'mailgun@{MAILGUN_DOMAIN}'      @classmethod     def send_email(cls, email: List[str], subject: str, text: str, html: str) -&gt; Response:         if cls.MAILGUN_DOMAIN is None:             raise MailgunExcpetion(gettext(\"mailgun_failed_load_domain\"))          if cls.MAILGUN_API_KEY is None:             raise MailgunExcpetion(gettext(\"mailgun_failed_load_api_key\"))          response =  post(             f\"https://api.mailgun.net/v3/{cls.MAILGUN_DOMAIN}/messages\",             auth=(\"api\", cls.MAILGUN_API_KEY),             data={                 \"from\": f\"{cls.FROM_TITLE} &lt;{cls.FROM_EMAIL}&gt;\",                 \"to\": email,                 \"subject\": subject,                 \"text\": text,                 \"html\": html,             },         )          if response.status_code != 200:             raise MailgunExcpetion(gettext(\"mailgun_error_send_email\"))          return response"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/libs/strings/","title":"Strings","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nlibs.strings\n\nBy default, use `en-gb.json` file inside `strings` top-level folder.\n\nIf language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`\n\"\"\"\nimport json\n</pre> \"\"\" libs.strings  By default, use `en-gb.json` file inside `strings` top-level folder.  If language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()` \"\"\" import json In\u00a0[\u00a0]: Copied! <pre>default_locale = \"en-gb\"\ncached_strings = {}\n</pre> default_locale = \"en-gb\" cached_strings = {} In\u00a0[\u00a0]: Copied! <pre>def refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\n</pre> def refresh():     global cached_strings     with open(f\"strings/{default_locale}.json\") as f:         cached_strings = json.load(f) In\u00a0[\u00a0]: Copied! <pre>def gettext(name):\n    return cached_strings[name]\n</pre> def gettext(name):     return cached_strings[name] In\u00a0[\u00a0]: Copied! <pre>refresh()\n</pre> refresh()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section6/models/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>from uuid import uuid4\nfrom time import time\n</pre> from uuid import uuid4 from time import time In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>CONFIRMATION_EXPIRATION_DELTA = 1800  # 30 mins\n</pre> CONFIRMATION_EXPIRATION_DELTA = 1800  # 30 mins In\u00a0[\u00a0]: Copied! <pre>class ConfirmationModel(db.Model):\n    __tablename__ = \"confirmations\"\n\n    id = db.Column(db.String(50), primary_key=True)\n    expire_at = db.Column(db.Integer, nullable=False)\n    confirmed = db.Column(db.Boolean, nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n\n    user = db.relationship(\"UserModel\")\n\n    def __init__(self, user_id: int, **kwargs):\n        super().__init__(**kwargs)\n        self.user_id = user_id\n        self.id = uuid4().hex\n        self.expire_at = int(time()) + CONFIRMATION_EXPIRATION_DELTA\n        self.confirmed = False\n\n    @classmethod\n    def find_by_id(cls, _id: str) -&gt; \"ConfirmationModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @property\n    def expired(self) -&gt; bool:\n        return time() &gt; self.expire_at\n\n    def force_to_expire(self) -&gt; None:\n        if not self.expired:\n            self.expire_at = int(time())\n            self.save_to_db()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ConfirmationModel(db.Model):     __tablename__ = \"confirmations\"      id = db.Column(db.String(50), primary_key=True)     expire_at = db.Column(db.Integer, nullable=False)     confirmed = db.Column(db.Boolean, nullable=False)     user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)      user = db.relationship(\"UserModel\")      def __init__(self, user_id: int, **kwargs):         super().__init__(**kwargs)         self.user_id = user_id         self.id = uuid4().hex         self.expire_at = int(time()) + CONFIRMATION_EXPIRATION_DELTA         self.confirmed = False      @classmethod     def find_by_id(cls, _id: str) -&gt; \"ConfirmationModel\":         return cls.query.filter_by(id=_id).first()      @property     def expired(self) -&gt; bool:         return time() &gt; self.expire_at      def force_to_expire(self) -&gt; None:         if not self.expired:             self.expire_at = int(time())             self.save_to_db()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n    price = db.Column(db.Float(precision=2), nullable=False)\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)\n    store = db.relationship(\"StoreModel\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)     price = db.Column(db.Float(precision=2), nullable=False)      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)     store = db.relationship(\"StoreModel\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from requests import Response\nfrom flask import request, url_for\n</pre> from requests import Response from flask import request, url_for In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom libs.mailgun import Mailgun\nfrom models.confirmation import ConfirmationModel\n</pre> from db import db from libs.mailgun import Mailgun from models.confirmation import ConfirmationModel In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n    email = db.Column(db.String(80), nullable=False, unique=True)\n\n    confirmation = db.relationship(\n        \"ConfirmationModel\", lazy=\"dynamic\", cascade=\"all, delete-orphan\"\n    )\n\n    @property\n    def most_recent_confirmation(self) -&gt; \"ConfirmationModel\":\n        return self.confirmation.order_by(db.desc(ConfirmationModel.expire_at)).first()\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @classmethod\n    def find_by_email(cls, email: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(email=email).first()\n\n    def send_confirmation_email(self) -&gt; Response:\n        # http:127.0.0.1:5000 + /confirmation/as23jkv87n312hfg2k4n8eg3p3\n        link = request.url_root[:-1] + url_for(\n            \"confirmation\", confirmation_id=self.most_recent_confirmation.id\n        )\n        subject = 'Registration confirmation'\n        text = f'Please click the link to confirm your registration: {link}'\n        html = f'&lt;html&gt;Please click the link to confirm your registration: &lt;a href=\"{link}\"&gt;{link}&lt;/a&gt;&lt;/html&gt;'\n\n        return Mailgun.send_email([self.email], subject, text, html)\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)     email = db.Column(db.String(80), nullable=False, unique=True)      confirmation = db.relationship(         \"ConfirmationModel\", lazy=\"dynamic\", cascade=\"all, delete-orphan\"     )      @property     def most_recent_confirmation(self) -&gt; \"ConfirmationModel\":         return self.confirmation.order_by(db.desc(ConfirmationModel.expire_at)).first()      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      @classmethod     def find_by_email(cls, email: str) -&gt; \"UserModel\":         return cls.query.filter_by(email=email).first()      def send_confirmation_email(self) -&gt; Response:         # http:127.0.0.1:5000 + /confirmation/as23jkv87n312hfg2k4n8eg3p3         link = request.url_root[:-1] + url_for(             \"confirmation\", confirmation_id=self.most_recent_confirmation.id         )         subject = 'Registration confirmation'         text = f'Please click the link to confirm your registration: {link}'         html = f'Please click the link to confirm your registration: {link}'          return Mailgun.send_email([self.email], subject, text, html)      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>import traceback\nfrom time import time\n</pre> import traceback from time import time In\u00a0[\u00a0]: Copied! <pre>from flask import make_response, render_template\nfrom flask_restful import Resource\n</pre> from flask import make_response, render_template from flask_restful import Resource In\u00a0[\u00a0]: Copied! <pre>from libs.mailgun import MailgunExcpetion\nfrom libs.strings import gettext\nfrom models.confirmation import ConfirmationModel\nfrom models.user import UserModel\nfrom schemas.confirmation import ConfirmationSchema\n</pre> from libs.mailgun import MailgunExcpetion from libs.strings import gettext from models.confirmation import ConfirmationModel from models.user import UserModel from schemas.confirmation import ConfirmationSchema In\u00a0[\u00a0]: Copied! <pre>confirmation_schema = ConfirmationSchema()\n</pre> confirmation_schema = ConfirmationSchema() In\u00a0[\u00a0]: Copied! <pre>class Confirmation(Resource):\n    @classmethod\n    def get(cls, confirmation_id: str):\n        \"\"\"Return confirmation HTML page.\"\"\"\n        confirmation = ConfirmationModel.find_by_id(confirmation_id)\n        if not confirmation:\n            return {'message', gettext(\"confirmation_not_found\")}, 404\n\n        if confirmation.expired:\n            return {'message', gettext(\"confirmation_link_expired\")}, 400\n\n        if confirmation.confirmed:\n            return {'message', gettext(\"confirmation_already_confirmed\")}, 400\n\n        confirmation.confirmed = True\n        confirmation.save_to_db()\n\n        headers = {'Content-Type': 'text/html'}\n        return make_response(\n            render_template(\"confirmation_page.html\", email=confirmation.user.email),\n            200,\n            headers,\n        )\n</pre> class Confirmation(Resource):     @classmethod     def get(cls, confirmation_id: str):         \"\"\"Return confirmation HTML page.\"\"\"         confirmation = ConfirmationModel.find_by_id(confirmation_id)         if not confirmation:             return {'message', gettext(\"confirmation_not_found\")}, 404          if confirmation.expired:             return {'message', gettext(\"confirmation_link_expired\")}, 400          if confirmation.confirmed:             return {'message', gettext(\"confirmation_already_confirmed\")}, 400          confirmation.confirmed = True         confirmation.save_to_db()          headers = {'Content-Type': 'text/html'}         return make_response(             render_template(\"confirmation_page.html\", email=confirmation.user.email),             200,             headers,         ) In\u00a0[\u00a0]: Copied! <pre>class ConfirmationByUser(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        \"\"\"Return confirmations for a given user. User for testing.\"\"\"\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': gettext(\"user_not_found\")}, 404\n\n        return (\n            {\n                'current_time': int(time()),\n                \"confirmation\": [\n                    confirmation_schema.dump(each)\n                    for each in user.confirmation.order_by(ConfirmationModel.expire_at)\n                ],\n            },\n            200,\n        )\n\n    @classmethod\n    def post(cls, user_id: int):\n        \"\"\"Resend confirmation email.\"\"\"\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': gettext(\"user_not_found\")}, 404\n\n        try:\n            confirmation = user.most_recent_confirmation\n            if confirmation:\n                if confirmation.confirmed:\n                    return {'message': gettext(\"confirmation_already_confirmed\")}, 400\n                confirmation.force_to_expire()\n\n            new_confirmation = ConfirmationModel(user_id)\n            new_confirmation.save_to_db()\n            user.send_confirmation_email()\n            return {'message': gettext(\"confirmation_resend_successful\")}, 201\n        except MailgunExcpetion as err:\n            return {'message': str(err)}, 500\n        except:\n            traceback.print_exc()\n            return {'message': gettext(\"confirmation_resend_fail\")}, 500\n</pre> class ConfirmationByUser(Resource):     @classmethod     def get(cls, user_id: int):         \"\"\"Return confirmations for a given user. User for testing.\"\"\"         user = UserModel.find_by_id(user_id)         if not user:             return {'message': gettext(\"user_not_found\")}, 404          return (             {                 'current_time': int(time()),                 \"confirmation\": [                     confirmation_schema.dump(each)                     for each in user.confirmation.order_by(ConfirmationModel.expire_at)                 ],             },             200,         )      @classmethod     def post(cls, user_id: int):         \"\"\"Resend confirmation email.\"\"\"         user = UserModel.find_by_id(user_id)         if not user:             return {'message': gettext(\"user_not_found\")}, 404          try:             confirmation = user.most_recent_confirmation             if confirmation:                 if confirmation.confirmed:                     return {'message': gettext(\"confirmation_already_confirmed\")}, 400                 confirmation.force_to_expire()              new_confirmation = ConfirmationModel(user_id)             new_confirmation.save_to_db()             user.send_confirmation_email()             return {'message': gettext(\"confirmation_resend_successful\")}, 201         except MailgunExcpetion as err:             return {'message': str(err)}, 500         except:             traceback.print_exc()             return {'message': gettext(\"confirmation_resend_fail\")}, 500"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/image/","title":"Image","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nimport traceback\n</pre> import os import traceback In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask_uploads import UploadNotAllowed\nfrom flask import send_file, request\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\n</pre> from flask_restful import Resource from flask_uploads import UploadNotAllowed from flask import send_file, request from flask_jwt_extended import jwt_required, get_jwt_identity In\u00a0[\u00a0]: Copied! <pre>from libs import image_helper\nfrom libs.strings import gettext\nfrom schemas.image import ImageSchema\n</pre> from libs import image_helper from libs.strings import gettext from schemas.image import ImageSchema In\u00a0[\u00a0]: Copied! <pre>image_schema = ImageSchema()\n</pre> image_schema = ImageSchema() In\u00a0[\u00a0]: Copied! <pre>class ImageUpload(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        \"\"\"\n        Used to upload an image file.\n        It uses JWT to retrieve user information and then saves the image to the uses's folder.\n        If there is a filename conflict, it appends a number at the end.\n        \"\"\"\n        data = image_schema.load(request.files)  # {'image': FileStorage}\n        user_id = get_jwt_identity()\n        folder = f\"user_{user_id}\"\n        try:\n            image_path = image_helper.save_image(data['image'], folder=folder)  # data['image'].filename + \"_1\"\n            basename = image_helper.get_basename(image_path)\n            return {'message': gettext(\"image_uploaded\").format(basename)}, 201\n        except UploadNotAllowed:\n            extension = image_helper.get_extension(data['image'])\n            return {'message': gettext(\"image_illegal_extension\").format(extension)}, 400\n</pre> class ImageUpload(Resource):     @classmethod     @jwt_required     def post(cls):         \"\"\"         Used to upload an image file.         It uses JWT to retrieve user information and then saves the image to the uses's folder.         If there is a filename conflict, it appends a number at the end.         \"\"\"         data = image_schema.load(request.files)  # {'image': FileStorage}         user_id = get_jwt_identity()         folder = f\"user_{user_id}\"         try:             image_path = image_helper.save_image(data['image'], folder=folder)  # data['image'].filename + \"_1\"             basename = image_helper.get_basename(image_path)             return {'message': gettext(\"image_uploaded\").format(basename)}, 201         except UploadNotAllowed:             extension = image_helper.get_extension(data['image'])             return {'message': gettext(\"image_illegal_extension\").format(extension)}, 400 In\u00a0[\u00a0]: Copied! <pre>class Image(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, filename: str):\n        \"\"\"\n        Returns the requested image if it exists. Looks up inside the logged in user's folder.\n        \"\"\"\n        user_id = get_jwt_identity()\n        folder = f\"user_{user_id}\"\n        if not image_helper.is_filename_safe(filename):\n            return {'message': gettext(\"image_illegal_file_name\").format(filename)}, 400\n\n        try:\n            return send_file(image_helper.get_path(filename, folder=folder))\n        except FileNotFoundError:\n            return {'message': gettext('image_not_found').format(filename)}, 404\n\n    @classmethod\n    @jwt_required\n    def delete(cls, filename: str):\n        user_id = get_jwt_identity()\n        folder = f\"user_{user_id}\"\n\n        if not image_helper.is_filename_safe(filename):\n            return {'message': gettext(\"image_illegal_file_name\").format(filename)}, 400\n\n        try:\n            os.remove(image_helper.get_path(filename, folder=folder))\n            return {'message': gettext('image_deleted').format(filename)}, 200\n        except FileNotFoundError:\n            return {'message': gettext('image_not_found').format(filename)}, 404\n        except:\n            traceback.print_exc()\n            return {'message': gettext('image_delete_failed')}, 500\n</pre> class Image(Resource):     @classmethod     @jwt_required     def get(cls, filename: str):         \"\"\"         Returns the requested image if it exists. Looks up inside the logged in user's folder.         \"\"\"         user_id = get_jwt_identity()         folder = f\"user_{user_id}\"         if not image_helper.is_filename_safe(filename):             return {'message': gettext(\"image_illegal_file_name\").format(filename)}, 400          try:             return send_file(image_helper.get_path(filename, folder=folder))         except FileNotFoundError:             return {'message': gettext('image_not_found').format(filename)}, 404      @classmethod     @jwt_required     def delete(cls, filename: str):         user_id = get_jwt_identity()         folder = f\"user_{user_id}\"          if not image_helper.is_filename_safe(filename):             return {'message': gettext(\"image_illegal_file_name\").format(filename)}, 400          try:             os.remove(image_helper.get_path(filename, folder=folder))             return {'message': gettext('image_deleted').format(filename)}, 200         except FileNotFoundError:             return {'message': gettext('image_not_found').format(filename)}, 404         except:             traceback.print_exc()             return {'message': gettext('image_delete_failed')}, 500 In\u00a0[\u00a0]: Copied! <pre>class AvatarUpload(Resource):\n    @classmethod\n    @jwt_required\n    def put(cls):\n        \"\"\"\n        This endpoint is used to upload user avatars. All avatars are named aftere user's ID.\n        Something like this: user_{id}.{ext}\n        Uploading a new avatar overwrites the existing one.\n        \"\"\"\n        data = image_schema.load(request.files)\n        filename = f\"user_{get_jwt_identity()}\"\n        folder = \"avatars\"\n        avatar_path = image_helper.find_image_any_format(filename, folder)\n        if avatar_path:\n            try:\n                os.remove(avatar_path)\n            except:\n                return {'message': gettext(\"avatar_delete_failed\")}, 500\n\n        try:\n            ext = image_helper.get_extension(data['image'].filename)\n            avatar = filename + ext\n            avatar_path = image_helper.save_image(\n                data['image'], folder=folder, name=avatar\n            )\n            basename = image_helper.get_basename(avatar_path)\n            return {'message': gettext(\"avatar_uploaded\")}, 200\n        except UploadNotAllowed:\n            extension = image_helper.get_extension(data['image'])\n            return {'message': gettext(\"image_illegal_extension\").format(extension)}, 400\n</pre> class AvatarUpload(Resource):     @classmethod     @jwt_required     def put(cls):         \"\"\"         This endpoint is used to upload user avatars. All avatars are named aftere user's ID.         Something like this: user_{id}.{ext}         Uploading a new avatar overwrites the existing one.         \"\"\"         data = image_schema.load(request.files)         filename = f\"user_{get_jwt_identity()}\"         folder = \"avatars\"         avatar_path = image_helper.find_image_any_format(filename, folder)         if avatar_path:             try:                 os.remove(avatar_path)             except:                 return {'message': gettext(\"avatar_delete_failed\")}, 500          try:             ext = image_helper.get_extension(data['image'].filename)             avatar = filename + ext             avatar_path = image_helper.save_image(                 data['image'], folder=folder, name=avatar             )             basename = image_helper.get_basename(avatar_path)             return {'message': gettext(\"avatar_uploaded\")}, 200         except UploadNotAllowed:             extension = image_helper.get_extension(data['image'])             return {'message': gettext(\"image_illegal_extension\").format(extension)}, 400 In\u00a0[\u00a0]: Copied! <pre>class Avatar(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        folder = \"avatars\"\n        filename = f\"user_{user_id}\"\n        avatar = image_helper.find_image_any_format(filename, folder)\n        if avatar:\n            return send_file(avatar)\n        return {'message': gettext(\"avatar_not_found\")}, 404\n</pre> class Avatar(Resource):     @classmethod     def get(cls, user_id: int):         folder = \"avatars\"         filename = f\"user_{user_id}\"         avatar = image_helper.find_image_any_format(filename, folder)         if avatar:             return send_file(avatar)         return {'message': gettext(\"avatar_not_found\")}, 404"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import request\nfrom flask_restful import Resource\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\n</pre> from flask import request from flask_restful import Resource from flask_jwt_extended import jwt_required, fresh_jwt_required In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from libs.strings import gettext from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>item_schema = ItemSchema()\nitem_list_schema = ItemSchema(many=True)\n</pre> item_schema = ItemSchema() item_list_schema = ItemSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item_schema.dump(item), 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):  # /item/chair\n        if ItemModel.find_by_name(name):\n            return {\"message\": gettext(\"item_name_exists\").format(name)}, 400\n\n        item_json = request.get_json()  # price, store_id\n        item_json['name'] = name\n\n        item = item_schema.load(item_json)  # ItemModel object\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": gettext(\"item_error_inserting\")}, 500\n\n        return item_schema.dump(item), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": gettext(\"item_deleted\")}, 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    def put(cls, name: str):\n        item_json = request.get_json()  # price, store_id\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = item_json[\"price\"]\n        else:\n            item_json['name'] = name\n            item = item_schema.load(item_json)  # ItemModel object\n\n        item.save_to_db()\n\n        return item_schema.dump(item), 200\n</pre> class Item(Resource):     @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item_schema.dump(item), 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):  # /item/chair         if ItemModel.find_by_name(name):             return {\"message\": gettext(\"item_name_exists\").format(name)}, 400          item_json = request.get_json()  # price, store_id         item_json['name'] = name          item = item_schema.load(item_json)  # ItemModel object          try:             item.save_to_db()         except:             return {\"message\": gettext(\"item_error_inserting\")}, 500          return item_schema.dump(item), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": gettext(\"item_deleted\")}, 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     def put(cls, name: str):         item_json = request.get_json()  # price, store_id         item = ItemModel.find_by_name(name)          if item:             item.price = item_json[\"price\"]         else:             item_json['name'] = name             item = item_schema.load(item_json)  # ItemModel object          item.save_to_db()          return item_schema.dump(item), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\n</pre> from flask_restful import Resource In\u00a0[\u00a0]: Copied! <pre>from libs.strings import gettext\nfrom models.store import StoreModel\nfrom schemas.store import StoreSchema\n</pre> from libs.strings import gettext from models.store import StoreModel from schemas.store import StoreSchema In\u00a0[\u00a0]: Copied! <pre>store_schema = StoreSchema()\nstore_list_schema = StoreSchema(many=True)\n</pre> store_schema = StoreSchema() store_list_schema = StoreSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store_schema.dump(store), 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return {\"message\": gettext(\"store_name_exists\").format(name)}, 400\n\n        store = StoreModel(name=name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": gettext(\"store_error_inserting\")}, 500\n\n        return store_schema.dump(store), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n            return {'message': gettext(\"store_deleted\")}, 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n</pre> class Store(Resource):     @classmethod     def get(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             return store_schema.dump(store), 200          return {\"message\": gettext(\"store_not_found\")}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return {\"message\": gettext(\"store_name_exists\").format(name)}, 400          store = StoreModel(name=name)         try:             store.save_to_db()         except:             return {\"message\": gettext(\"store_error_inserting\")}, 500          return store_schema.dump(store), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()             return {'message': gettext(\"store_deleted\")}, 200          return {\"message\": gettext(\"store_not_found\")}, 404 In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>import traceback\n</pre> import traceback In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) In\u00a0[\u00a0]: Copied! <pre>from libs.mailgun import MailgunExcpetion\nfrom libs.strings import gettext\nfrom models.user import UserModel\nfrom models.confirmation import ConfirmationModel\nfrom schemas.user import UserSchema\nfrom blacklist import BLACKLIST\n</pre> from libs.mailgun import MailgunExcpetion from libs.strings import gettext from models.user import UserModel from models.confirmation import ConfirmationModel from schemas.user import UserSchema from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)  # UserModel object\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": gettext(\"user_username_exists\")}, 400\n\n        if UserModel.find_by_email(user.email):\n            return {\"message\": gettext(\"user_email_exists\")}, 400\n\n        try:\n            user.save_to_db()\n            confirmation = ConfirmationModel(user.id)\n            confirmation.save_to_db()\n            user.send_confirmation_email()\n            return {\"message\": gettext(\"user_registered\")}, 201\n        except MailgunExcpetion as err:\n            user.delete_from_db()\n            return {'message': str(err)}, 500\n        except:\n            traceback.print_exc()\n            user.delete_from_db()\n            return {'message': gettext(\"user_error_creating\")}, 500\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)  # UserModel object          if UserModel.find_by_username(user.username):             return {\"message\": gettext(\"user_username_exists\")}, 400          if UserModel.find_by_email(user.email):             return {\"message\": gettext(\"user_email_exists\")}, 400          try:             user.save_to_db()             confirmation = ConfirmationModel(user.id)             confirmation.save_to_db()             user.send_confirmation_email()             return {\"message\": gettext(\"user_registered\")}, 201         except MailgunExcpetion as err:             user.delete_from_db()             return {'message': str(err)}, 500         except:             traceback.print_exc()             user.delete_from_db()             return {'message': gettext(\"user_error_creating\")}, 500 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        user.delete_from_db()\n        return {\"message\": gettext(\"user_deleted\")}, 200\n</pre> class User(Resource):     @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          user.delete_from_db()         return {\"message\": gettext(\"user_deleted\")}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_created = user_schema.load(user_json, partial=('email',))  # UserModel object\n\n        user = UserModel.find_by_username(user_created.username)\n\n        if user and safe_str_cmp(user.password, user_created.password):\n            confirmation = user.most_recent_confirmation\n            if confirmation and confirmation.confirmed:\n                access_token = create_access_token(identity=user.id, fresh=True)\n                refresh_token = create_refresh_token(user.id)\n                return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n            return {'message': gettext(\"user_not_confirmed\").format(user.username)}, 400\n        return {\"message\": gettext(\"user_invalid_credentials\")}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_created = user_schema.load(user_json, partial=('email',))  # UserModel object          user = UserModel.find_by_username(user_created.username)          if user and safe_str_cmp(user.password, user_created.password):             confirmation = user.most_recent_confirmation             if confirmation and confirmation.confirmed:                 access_token = create_access_token(identity=user.id, fresh=True)                 refresh_token = create_refresh_token(user.id)                 return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200             return {'message': gettext(\"user_not_confirmed\").format(user.username)}, 400         return {\"message\": gettext(\"user_invalid_credentials\")}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/confirmation/","title":"Confirmation","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.confirmation import ConfirmationModel\n</pre> from ma import ma from models.confirmation import ConfirmationModel In\u00a0[\u00a0]: Copied! <pre>class ConfirmationSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ConfirmationModel\n        load_only = (\"user\",)\n        dump_only = (\"id\", \"expire_at\", \"confirmed\")\n        include_fk = True\n        load_instance = True\n</pre> class ConfirmationSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ConfirmationModel         load_only = (\"user\",)         dump_only = (\"id\", \"expire_at\", \"confirmed\")         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/image/","title":"Image","text":"In\u00a0[\u00a0]: Copied! <pre>from marshmallow import Schema, fields\nfrom werkzeug.datastructures import FileStorage\n</pre> from marshmallow import Schema, fields from werkzeug.datastructures import FileStorage In\u00a0[\u00a0]: Copied! <pre>class FileStorageField(fields.Field):\n    default_error_messages = {\n        'invalid': 'Not a valid image.'\n    }\n\n    def _deserialize(self, value, attr, data, **kwargs) -&gt; FileStorage:  # load\n        if value is None:\n            return None\n\n        if not isinstance(value, FileStorage):\n            self.fail('invalid')\n\n        return value\n</pre> class FileStorageField(fields.Field):     default_error_messages = {         'invalid': 'Not a valid image.'     }      def _deserialize(self, value, attr, data, **kwargs) -&gt; FileStorage:  # load         if value is None:             return None          if not isinstance(value, FileStorage):             self.fail('invalid')          return value In\u00a0[\u00a0]: Copied! <pre>class ImageSchema(Schema):\n    image = FileStorageField(required=True)\n</pre> class ImageSchema(Schema):     image = FileStorageField(required=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.item import ItemModel\nfrom models.store import StoreModel\n</pre> from ma import ma from models.item import ItemModel from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ItemModel\n        load_only = ('store',)\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class ItemSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ItemModel         load_only = ('store',)         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.store import StoreModel\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from ma import ma from models.store import StoreModel from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>class StoreSchema(ma.SQLAlchemyAutoSchema):\n    items = ma.Nested(ItemSchema, many=True)\n\n    class Meta:\n        model = StoreModel\n        dump_only = ('id',)\n        include_fk = True\n        load_instance = True\n</pre> class StoreSchema(ma.SQLAlchemyAutoSchema):     items = ma.Nested(ItemSchema, many=True)      class Meta:         model = StoreModel         dump_only = ('id',)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section6/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom marshmallow import pre_dump\nfrom models.user import UserModel\nfrom schemas.confirmation import ConfirmationSchema\n</pre> from ma import ma from marshmallow import pre_dump from models.user import UserModel from schemas.confirmation import ConfirmationSchema In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = ('password',)\n        dump_only = ('id', 'confirmation')\n        include_relationships = True\n        load_instance = True\n\n    @pre_dump\n    def _pre_dump(self, user: UserModel, many, **kwargs):\n        user.confirmation = [user.most_recent_confirmation]\n        return user\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = ('password',)         dump_only = ('id', 'confirmation')         include_relationships = True         load_instance = True      @pre_dump     def _pre_dump(self, user: UserModel, many, **kwargs):         user.confirmation = [user.most_recent_confirmation]         return user"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom flask_migrate import Migrate\nfrom marshmallow import ValidationError\nfrom dotenv import load_dotenv\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from flask_migrate import Migrate from marshmallow import ValidationError from dotenv import load_dotenv In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom ma import ma\nfrom resources.user import UserRegister, UserLogin, User\n</pre> from db import db from ma import ma from resources.user import UserRegister, UserLogin, User In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\nload_dotenv('.env')\napp.config[\"DEBUG\"] = True\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\n    \"DATABASE_URI\", \"sqlite:///data.db\"\n)\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.secret_key = \"jose\"\napi = Api(app)\njwt = JWTManager(app)\nmigrate = Migrate(app, db)\n</pre> app = Flask(__name__) load_dotenv('.env') app.config[\"DEBUG\"] = True app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(     \"DATABASE_URI\", \"sqlite:///data.db\" ) app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False app.config[\"PROPAGATE_EXCEPTIONS\"] = True app.secret_key = \"jose\" api = Api(app) jwt = JWTManager(app) migrate = Migrate(app, db) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>api.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\n</pre> api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") In\u00a0[\u00a0]: Copied! <pre>db.init_app(app)\nma.init_app(app)\nif __name__ == \"__main__\":\n    app.run(port=5000, debug=True)\n</pre> db.init_app(app) ma.init_app(app) if __name__ == \"__main__\":     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import MetaData\n</pre> from flask_sqlalchemy import SQLAlchemy from sqlalchemy import MetaData In\u00a0[\u00a0]: Copied! <pre># stay the same in both database provider\nconvention = {\n    'ix': \"ix_%(column_0_label)s\",\n    'uq': 'uq_%(table_name)s_%(column_0_name)s',\n    'ck': 'ck_%(table_name)s_%(constraint_name)s',\n    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n    'pk': 'pk_%(table_name)s',\n}\n</pre> # stay the same in both database provider convention = {     'ix': \"ix_%(column_0_label)s\",     'uq': 'uq_%(table_name)s_%(column_0_name)s',     'ck': 'ck_%(table_name)s_%(constraint_name)s',     'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',     'pk': 'pk_%(table_name)s', } In\u00a0[\u00a0]: Copied! <pre>metadata = MetaData(naming_convention=convention)\n</pre> metadata = MetaData(naming_convention=convention) In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy(metadata=metadata)\n</pre> db = SQLAlchemy(metadata=metadata)"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section7/libs/strings/","title":"Strings","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nlibs.strings\n\nBy default, uses `en-gb.json` file inside the `strings` top-level folder.\n\nIf language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`.\n\"\"\"\nimport json\n</pre> \"\"\" libs.strings  By default, uses `en-gb.json` file inside the `strings` top-level folder.  If language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`. \"\"\" import json In\u00a0[\u00a0]: Copied! <pre>default_locale = \"en-gb\"\ncached_strings = {}\n</pre> default_locale = \"en-gb\" cached_strings = {} In\u00a0[\u00a0]: Copied! <pre>def refresh():\n    print(\"Refreshing...\")\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\n</pre> def refresh():     print(\"Refreshing...\")     global cached_strings     with open(f\"strings/{default_locale}.json\") as f:         cached_strings = json.load(f) In\u00a0[\u00a0]: Copied! <pre>def gettext(name):\n    return cached_strings[name]\n</pre> def gettext(name):     return cached_strings[name] In\u00a0[\u00a0]: Copied! <pre>refresh()\n</pre> refresh()"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/migrations/env/","title":"Env","text":"In\u00a0[\u00a0]: Copied! <pre>from __future__ import with_statement\n</pre> from __future__ import with_statement In\u00a0[\u00a0]: Copied! <pre>import logging\nfrom logging.config import fileConfig\n</pre> import logging from logging.config import fileConfig In\u00a0[\u00a0]: Copied! <pre>from sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n</pre> from sqlalchemy import engine_from_config from sqlalchemy import pool In\u00a0[\u00a0]: Copied! <pre>from alembic import context\n</pre> from alembic import context In\u00a0[\u00a0]: Copied! <pre># this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n</pre> # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config In\u00a0[\u00a0]: Copied! <pre># Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n</pre> # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig(config.config_file_name) logger = logging.getLogger('alembic.env') In\u00a0[\u00a0]: Copied! <pre># add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option(\n    'sqlalchemy.url',\n    str(current_app.extensions['migrate'].db.engine.url).replace('%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n</pre> # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata from flask import current_app config.set_main_option(     'sqlalchemy.url',     str(current_app.extensions['migrate'].db.engine.url).replace('%', '%%')) target_metadata = current_app.extensions['migrate'].db.metadata <p>other values from the config, defined by the needs of env.py, can be acquired: my_important_option = config.get_main_option(\"my_important_option\") ... etc.</p> In\u00a0[\u00a0]: Copied! <pre>def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n</pre> def run_migrations_offline():     \"\"\"Run migrations in 'offline' mode.      This configures the context with just a URL     and not an Engine, though an Engine is acceptable     here as well.  By skipping the Engine creation     we don't even need a DBAPI to be available.      Calls to context.execute() here emit the given string to the     script output.      \"\"\"     url = config.get_main_option(\"sqlalchemy.url\")     context.configure(         url=url, target_metadata=target_metadata, literal_binds=True     )      with context.begin_transaction():         context.run_migrations() In\u00a0[\u00a0]: Copied! <pre>def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            process_revision_directives=process_revision_directives,\n            **current_app.extensions['migrate'].configure_args\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n</pre> def run_migrations_online():     \"\"\"Run migrations in 'online' mode.      In this scenario we need to create an Engine     and associate a connection with the context.      \"\"\"      # this callback is used to prevent an auto-migration from being generated     # when there are no changes to the schema     # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html     def process_revision_directives(context, revision, directives):         if getattr(config.cmd_opts, 'autogenerate', False):             script = directives[0]             if script.upgrade_ops.is_empty():                 directives[:] = []                 logger.info('No changes in schema detected.')      connectable = engine_from_config(         config.get_section(config.config_ini_section),         prefix='sqlalchemy.',         poolclass=pool.NullPool,     )      with connectable.connect() as connection:         context.configure(             connection=connection,             target_metadata=target_metadata,             process_revision_directives=process_revision_directives,             **current_app.extensions['migrate'].configure_args         )          with context.begin_transaction():             context.run_migrations() In\u00a0[\u00a0]: Copied! <pre>if context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</pre> if context.is_offline_mode():     run_migrations_offline() else:     run_migrations_online()"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/migrations/versions/9dcf080d63ba_adding_unique_username_constraint_in_/","title":"9dcf080d63ba adding unique username constraint in","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Adding unique username constraint in users table.\n\nRevision ID: 9dcf080d63ba\nRevises: cb7adef582b9\nCreate Date: 2020-07-01 17:58:15.139509\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n</pre> \"\"\"Adding unique username constraint in users table.  Revision ID: 9dcf080d63ba Revises: cb7adef582b9 Create Date: 2020-07-01 17:58:15.139509  \"\"\" from alembic import op import sqlalchemy as sa In\u00a0[\u00a0]: Copied! <pre># revision identifiers, used by Alembic.\nrevision = '9dcf080d63ba'\ndown_revision = 'cb7adef582b9'\nbranch_labels = None\ndepends_on = None\n</pre> # revision identifiers, used by Alembic. revision = '9dcf080d63ba' down_revision = 'cb7adef582b9' branch_labels = None depends_on = None In\u00a0[\u00a0]: Copied! <pre>def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_unique_constraint(op.f('uq_users_username'), 'users', ['username'])\n    # ### end Alembic commands ###\n</pre> def upgrade():     # ### commands auto generated by Alembic - please adjust! ###     op.create_unique_constraint(op.f('uq_users_username'), 'users', ['username'])     # ### end Alembic commands ### In\u00a0[\u00a0]: Copied! <pre>def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(op.f('uq_users_username'), 'users', type_='unique')\n    # ### end Alembic commands ###\n</pre> def downgrade():     # ### commands auto generated by Alembic - please adjust! ###     op.drop_constraint(op.f('uq_users_username'), 'users', type_='unique')     # ### end Alembic commands ###"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/migrations/versions/cb7adef582b9_initializing_database_migration/","title":"Cb7adef582b9 initializing database migration","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Initializing database migration\n\nRevision ID: cb7adef582b9\nRevises: \nCreate Date: 2020-07-01 17:48:40.010725\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n</pre> \"\"\"Initializing database migration  Revision ID: cb7adef582b9 Revises:  Create Date: 2020-07-01 17:48:40.010725  \"\"\" from alembic import op import sqlalchemy as sa In\u00a0[\u00a0]: Copied! <pre># revision identifiers, used by Alembic.\nrevision = 'cb7adef582b9'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n</pre> # revision identifiers, used by Alembic. revision = 'cb7adef582b9' down_revision = None branch_labels = None depends_on = None In\u00a0[\u00a0]: Copied! <pre>def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('password', sa.String(length=80), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n</pre> def upgrade():     # ### commands auto generated by Alembic - please adjust! ###     op.create_table('users',     sa.Column('id', sa.Integer(), nullable=False),     sa.Column('username', sa.String(length=80), nullable=False),     sa.Column('password', sa.String(length=80), nullable=False),     sa.PrimaryKeyConstraint('id')     )     # ### end Alembic commands ### In\u00a0[\u00a0]: Copied! <pre>def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    # ### end Alembic commands ###\n</pre> def downgrade():     # ### commands auto generated by Alembic - please adjust! ###     op.drop_table('users')     # ### end Alembic commands ###"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section7/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section7/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token\n)\nfrom libs.strings import gettext\nfrom models.user import UserModel\nfrom schemas.user import UserSchema\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token ) from libs.strings import gettext from models.user import UserModel from schemas.user import UserSchema In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": gettext(\"user_username_exists\")}, 400\n\n        user.save_to_db()\n\n        return {\"message\": gettext(\"user_registered\")}, 201\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)          if UserModel.find_by_username(user.username):             return {\"message\": gettext(\"user_username_exists\")}, 400          user.save_to_db()          return {\"message\": gettext(\"user_registered\")}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    \"\"\"\n    This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the\n    sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.\n    \"\"\"\n\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        user.delete_from_db()\n        return {\"message\": gettext(\"user_deleted\")}, 200\n</pre> class User(Resource):     \"\"\"     This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the     sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.     \"\"\"      @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          user.delete_from_db()         return {\"message\": gettext(\"user_deleted\")}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_data = user_schema.load(user_json)\n\n        user = UserModel.find_by_username(user_data.username)\n\n        if user and safe_str_cmp(user.password, user_data.password):\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n\n        return {\"message\": gettext(\"user_invalid_credentials\")}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_data = user_schema.load(user_json)          user = UserModel.find_by_username(user_data.username)          if user and safe_str_cmp(user.password, user_data.password):             access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200          return {\"message\": gettext(\"user_invalid_credentials\")}, 401"},{"location":"side-projects/restful-apis-with-flask/advanced/section7/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section7/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.user import UserModel\n</pre> from ma import ma from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_relationships = True\n        load_instance = True\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = (\"password\",)         dump_only = (\"id\",)         include_relationships = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom marshmallow import ValidationError\nfrom dotenv import load_dotenv\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from marshmallow import ValidationError from dotenv import load_dotenv In\u00a0[\u00a0]: Copied! <pre>load_dotenv(\".env\")\n</pre> load_dotenv(\".env\") In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom ma import ma\nfrom oa import oauth\nfrom resources.user import UserRegister, UserLogin, User, SetPassword\nfrom resources.github_login import GitHubLogin, GitHubAuthorize\n</pre> from db import db from ma import ma from oa import oauth from resources.user import UserRegister, UserLogin, User, SetPassword from resources.github_login import GitHubLogin, GitHubAuthorize In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config.from_object(\"default_config\")\napp.config.from_envvar(\"APPLICATION_SETTINGS\")\napi = Api(app)\njwt = JWTManager(app)\n</pre> app = Flask(__name__) app.config.from_object(\"default_config\") app.config.from_envvar(\"APPLICATION_SETTINGS\") api = Api(app) jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>api.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(GitHubLogin, \"/login/github\")\napi.add_resource(GitHubAuthorize, \"/login/github/authorized\", endpoint='github.authorize')\napi.add_resource(SetPassword, \"/user/password/\")\n</pre> api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(GitHubLogin, \"/login/github\") api.add_resource(GitHubAuthorize, \"/login/github/authorized\", endpoint='github.authorize') api.add_resource(SetPassword, \"/user/password/\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    oauth.init_app(app)\n    app.run(port=5000)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     oauth.init_app(app)     app.run(port=5000)"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/config/","title":"Config","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>DEBUG = False\nSQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")\n</pre> DEBUG = False SQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/default_config/","title":"Default config","text":"In\u00a0[\u00a0]: Copied! <pre>DEBUG = True\nSQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\"\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nPROPAGATE_EXCEPTIONS = True\nSECRET_KEY = \"change-this-key-in-the-application-config\"\nJWT_SECRET_KEY = \"change-this-key-to-something-different-in-the-application-config\"\n</pre> DEBUG = True SQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\" SQLALCHEMY_TRACK_MODIFICATIONS = False PROPAGATE_EXCEPTIONS = True SECRET_KEY = \"change-this-key-in-the-application-config\" JWT_SECRET_KEY = \"change-this-key-to-something-different-in-the-application-config\""},{"location":"side-projects/restful-apis-with-flask/advanced/section8/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/oa/","title":"Oa","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nfrom flask import g\nfrom flask_oauthlib.client import OAuth\n</pre> import os from flask import g from flask_oauthlib.client import OAuth In\u00a0[\u00a0]: Copied! <pre>oauth = OAuth()\n</pre> oauth = OAuth() In\u00a0[\u00a0]: Copied! <pre>github = oauth.remote_app(\n    'github',\n    consumer_key=os.getenv(\"GITHUB_CONSUMER_KEY\"),\n    consumer_secret=os.getenv(\"GITHUB_CONSUMER_SECRET\"),\n    request_token_params={'scope': 'user:email'},  # &amp;scope=user:email\n    base_url='https://api.github.com',\n    request_token_url=None,\n    access_token_method=\"POST\",\n    access_token_url=\"https://github.com/login/oauth/access_token\",\n    authorize_url='https://github.com/login/oauth/authorize'\n)\n</pre> github = oauth.remote_app(     'github',     consumer_key=os.getenv(\"GITHUB_CONSUMER_KEY\"),     consumer_secret=os.getenv(\"GITHUB_CONSUMER_SECRET\"),     request_token_params={'scope': 'user:email'},  # &amp;scope=user:email     base_url='https://api.github.com',     request_token_url=None,     access_token_method=\"POST\",     access_token_url=\"https://github.com/login/oauth/access_token\",     authorize_url='https://github.com/login/oauth/authorize' ) In\u00a0[\u00a0]: Copied! <pre>@github.tokengetter\ndef get_github_token():\n    if 'access_token' in g:\n        return g.access_token\n</pre> @github.tokengetter def get_github_token():     if 'access_token' in g:         return g.access_token"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section8/libs/strings/","title":"Strings","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nlibs.strings\n\nBy default, uses `en-gb.json` file inside the `strings` top-level folder.\n\nIf language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`.\n\"\"\"\nimport json\n</pre> \"\"\" libs.strings  By default, uses `en-gb.json` file inside the `strings` top-level folder.  If language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`. \"\"\" import json In\u00a0[\u00a0]: Copied! <pre>default_locale = \"en-gb\"\ncached_strings = {}\n</pre> default_locale = \"en-gb\" cached_strings = {} In\u00a0[\u00a0]: Copied! <pre>def refresh():\n    print(\"Refreshing...\")\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\n</pre> def refresh():     print(\"Refreshing...\")     global cached_strings     with open(f\"strings/{default_locale}.json\") as f:         cached_strings = json.load(f) In\u00a0[\u00a0]: Copied! <pre>def gettext(name):\n    return cached_strings[name]\n</pre> def gettext(name):     return cached_strings[name] In\u00a0[\u00a0]: Copied! <pre>refresh()\n</pre> refresh()"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section8/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80))\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80))      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section8/resources/github_login/","title":"Github login","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import g, request, url_for\nfrom flask_restful import Resource\nfrom flask_jwt_extended import create_access_token, create_refresh_token\nfrom oa import github\n</pre> from flask import g, request, url_for from flask_restful import Resource from flask_jwt_extended import create_access_token, create_refresh_token from oa import github In\u00a0[\u00a0]: Copied! <pre>from models.user import UserModel\n</pre> from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class GitHubLogin(Resource):\n    @classmethod\n    def get(cls):\n        # callback='http://localhost:5000/login/github/authorized'\n        return github.authorize(callback=url_for('github.authorized', _external=True))\n</pre> class GitHubLogin(Resource):     @classmethod     def get(cls):         # callback='http://localhost:5000/login/github/authorized'         return github.authorize(callback=url_for('github.authorized', _external=True)) In\u00a0[\u00a0]: Copied! <pre>class GitHubAuthorize(Resource):\n    @classmethod\n    def get(cls):\n        resp = github.authorized_response()\n\n        # error handling\n        if resp is None or resp.get('access_token') is None :\n            error_response = {\n                'error': request.args['error'],  # ?error=blablabla&amp;error_description=blablabla\n                'error_description': request.args['error_description']\n            }\n            return error_response\n\n        g.access_token = resp['access_token']\n        github_user = github.get('user')  # using tokengetter in oa.py\n        github_username = github_user.data['login']\n\n        user = UserModel.find_by_username(github_username)\n\n        if not user:\n            user = UserModel(username=github_username, password=None)\n            user.save_to_db()\n\n        access_token = create_access_token(identity=user.id, fresh=True)\n        refresh_token = create_refresh_token(user.id)\n\n        return {'access_token': access_token, 'refresh_token': refresh_token}, 200\n</pre> class GitHubAuthorize(Resource):     @classmethod     def get(cls):         resp = github.authorized_response()          # error handling         if resp is None or resp.get('access_token') is None :             error_response = {                 'error': request.args['error'],  # ?error=blablabla&amp;error_description=blablabla                 'error_description': request.args['error_description']             }             return error_response          g.access_token = resp['access_token']         github_user = github.get('user')  # using tokengetter in oa.py         github_username = github_user.data['login']          user = UserModel.find_by_username(github_username)          if not user:             user = UserModel(username=github_username, password=None)             user.save_to_db()          access_token = create_access_token(identity=user.id, fresh=True)         refresh_token = create_refresh_token(user.id)          return {'access_token': access_token, 'refresh_token': refresh_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    fresh_jwt_required,\n)\nfrom libs.strings import gettext\nfrom models.user import UserModel\nfrom schemas.user import UserSchema\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     fresh_jwt_required, ) from libs.strings import gettext from models.user import UserModel from schemas.user import UserSchema In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": gettext(\"user_username_exists\")}, 400\n\n        user.save_to_db()\n\n        return {\"message\": gettext(\"user_registered\")}, 201\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)          if UserModel.find_by_username(user.username):             return {\"message\": gettext(\"user_username_exists\")}, 400          user.save_to_db()          return {\"message\": gettext(\"user_registered\")}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    \"\"\"\n    This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the\n    sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.\n    \"\"\"\n\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        user.delete_from_db()\n        return {\"message\": gettext(\"user_deleted\")}, 200\n</pre> class User(Resource):     \"\"\"     This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the     sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.     \"\"\"      @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          user.delete_from_db()         return {\"message\": gettext(\"user_deleted\")}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_data = user_schema.load(user_json)\n\n        user = UserModel.find_by_username(user_data.username)\n\n        if user and user.password and safe_str_cmp(user.password, user_data.password):\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n\n        return {\"message\": gettext(\"user_invalid_credentials\")}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_data = user_schema.load(user_json)          user = UserModel.find_by_username(user_data.username)          if user and user.password and safe_str_cmp(user.password, user_data.password):             access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200          return {\"message\": gettext(\"user_invalid_credentials\")}, 401 In\u00a0[\u00a0]: Copied! <pre>class SetPassword(Resource):\n    @classmethod\n    @fresh_jwt_required\n    def post(cls):\n        user_json = request.get_json()\n        user_data = user_schema.load(user_json)  # username and password\n        user = UserModel.find_by_username(user_data.username)\n\n        if not user:\n            return {'message': gettext('user_not_found')}, 400\n\n        user.password = user_data.password\n        user.save_to_db()\n\n        return {'message': gettext('user_password_updated')}, 201\n</pre> class SetPassword(Resource):     @classmethod     @fresh_jwt_required     def post(cls):         user_json = request.get_json()         user_data = user_schema.load(user_json)  # username and password         user = UserModel.find_by_username(user_data.username)          if not user:             return {'message': gettext('user_not_found')}, 400          user.password = user_data.password         user.save_to_db()          return {'message': gettext('user_password_updated')}, 201"},{"location":"side-projects/restful-apis-with-flask/advanced/section8/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section8/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.user import UserModel\n</pre> from ma import ma from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_relationships = True\n        load_instance = True\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = (\"password\",)         dump_only = (\"id\",)         include_relationships = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\nfrom marshmallow import ValidationError\nfrom dotenv import load_dotenv\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager from marshmallow import ValidationError from dotenv import load_dotenv In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom ma import ma\nfrom blacklist import BLACKLIST\nfrom resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\nfrom resources.order import Order\n</pre> from db import db from ma import ma from blacklist import BLACKLIST from resources.user import UserRegister, UserLogin, User, TokenRefresh, UserLogout from resources.item import Item, ItemList from resources.store import Store, StoreList from resources.order import Order In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\nload_dotenv(\".env\")\napp.config.from_object(\"default_config\")\napp.config.from_envvar(\"APPLICATION_SETTINGS\")\napi = Api(app)\n</pre> app = Flask(__name__) load_dotenv(\".env\") app.config.from_object(\"default_config\") app.config.from_envvar(\"APPLICATION_SETTINGS\") api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>@app.errorhandler(ValidationError)\ndef handle_marshmallow_validation(err):\n    return jsonify(err.messages), 400\n</pre> @app.errorhandler(ValidationError) def handle_marshmallow_validation(err):     return jsonify(err.messages), 400 In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)\n</pre> jwt = JWTManager(app) In\u00a0[\u00a0]: Copied! <pre># This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled\n@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrypted_token):\n    return decrypted_token[\"jti\"] in BLACKLIST\n</pre> # This method will check if a token is blacklisted, and will be called automatically when blacklist is enabled @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrypted_token):     return decrypted_token[\"jti\"] in BLACKLIST In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, \"/store/&lt;string:name&gt;\")\napi.add_resource(StoreList, \"/stores\")\napi.add_resource(Item, \"/item/&lt;string:name&gt;\")\napi.add_resource(ItemList, \"/items\")\napi.add_resource(UserRegister, \"/register\")\napi.add_resource(User, \"/user/&lt;int:user_id&gt;\")\napi.add_resource(UserLogin, \"/login\")\napi.add_resource(TokenRefresh, \"/refresh\")\napi.add_resource(UserLogout, \"/logout\")\napi.add_resource(Order, \"/order\")\n</pre> api.add_resource(Store, \"/store/\") api.add_resource(StoreList, \"/stores\") api.add_resource(Item, \"/item/\") api.add_resource(ItemList, \"/items\") api.add_resource(UserRegister, \"/register\") api.add_resource(User, \"/user/\") api.add_resource(UserLogin, \"/login\") api.add_resource(TokenRefresh, \"/refresh\") api.add_resource(UserLogout, \"/logout\") api.add_resource(Order, \"/order\") In\u00a0[\u00a0]: Copied! <pre>if __name__ == \"__main__\":\n    db.init_app(app)\n    ma.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == \"__main__\":     db.init_app(app)     ma.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nblacklist.py\n\nThis file just contains the blacklist of the JWT tokens\u2013it will be imported by\napp and the logout resource so that tokens can be added to the blacklist when the\nuser logs out.\n\"\"\"\n</pre> \"\"\" blacklist.py  This file just contains the blacklist of the JWT tokens\u2013it will be imported by app and the logout resource so that tokens can be added to the blacklist when the user logs out. \"\"\" In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/config/","title":"Config","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>DEBUG = False\nSQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")\n</pre> DEBUG = False SQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///data.db\")"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/default_config/","title":"Default config","text":"In\u00a0[\u00a0]: Copied! <pre>DEBUG = True\nSQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\"\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nPROPAGATE_EXCEPTIONS = True\nSECRET_KEY = \"change-this-key-in-the-application-config\"\nJWT_SECRET_KEY = \"change-this-key-to-something-different-in-the-application-config\"\n</pre> DEBUG = True SQLALCHEMY_DATABASE_URI = \"sqlite:///data.db\" SQLALCHEMY_TRACK_MODIFICATIONS = False PROPAGATE_EXCEPTIONS = True SECRET_KEY = \"change-this-key-in-the-application-config\" JWT_SECRET_KEY = \"change-this-key-to-something-different-in-the-application-config\""},{"location":"side-projects/restful-apis-with-flask/advanced/section9/ma/","title":"Ma","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_marshmallow import Marshmallow\n</pre> from flask_marshmallow import Marshmallow In\u00a0[\u00a0]: Copied! <pre>ma = Marshmallow()\n</pre> ma = Marshmallow()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/libs/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section9/libs/strings/","title":"Strings","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nlibs.strings\n\nBy default, uses `en-gb.json` file inside the `strings` top-level folder.\n\nIf language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`.\n\"\"\"\nimport json\n</pre> \"\"\" libs.strings  By default, uses `en-gb.json` file inside the `strings` top-level folder.  If language changes, set `libs.strings.default_locale` and run `libs.strings.refresh()`. \"\"\" import json In\u00a0[\u00a0]: Copied! <pre>default_locale = \"en-gb\"\ncached_strings = {}\n</pre> default_locale = \"en-gb\" cached_strings = {} In\u00a0[\u00a0]: Copied! <pre>def refresh():\n    print(\"Refreshing...\")\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\n</pre> def refresh():     print(\"Refreshing...\")     global cached_strings     with open(f\"strings/{default_locale}.json\") as f:         cached_strings = json.load(f) In\u00a0[\u00a0]: Copied! <pre>def gettext(name):\n    return cached_strings[name]\n</pre> def gettext(name):     return cached_strings[name] In\u00a0[\u00a0]: Copied! <pre>refresh()\n</pre> refresh()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section9/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = \"items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n    price = db.Column(db.Float(precision=2), nullable=False)\n\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)\n    store = db.relationship(\"StoreModel\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"ItemModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"ItemModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"ItemModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = \"items\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)     price = db.Column(db.Float(precision=2), nullable=False)      store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), nullable=False)     store = db.relationship(\"StoreModel\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"ItemModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"ItemModel\":         return cls.query.filter_by(id=_id).first()      @classmethod     def find_all(cls) -&gt; List[\"ItemModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/models/order/","title":"Order","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nimport stripe\n</pre> import os import stripe In\u00a0[\u00a0]: Copied! <pre>from db import db\nfrom typing import List\n</pre> from db import db from typing import List In\u00a0[\u00a0]: Copied! <pre>CURRENCY = \"usd\"\n</pre> CURRENCY = \"usd\" In\u00a0[\u00a0]: Copied! <pre>class ItemsInOrder(db.Model):\n    __tablename__ = \"items_in_order\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    item_id = db.Column(db.Integer, db.ForeignKey('items.id'))\n    order_id = db.Column(db.Integer, db.ForeignKey('orders.id'))\n    quantity = db.Column(db.Integer)\n\n    item = db.relationship(\"ItemModel\")\n    order = db.relationship(\"OrderModel\", back_populates=\"items\")\n</pre> class ItemsInOrder(db.Model):     __tablename__ = \"items_in_order\"      id = db.Column(db.Integer, primary_key=True)     item_id = db.Column(db.Integer, db.ForeignKey('items.id'))     order_id = db.Column(db.Integer, db.ForeignKey('orders.id'))     quantity = db.Column(db.Integer)      item = db.relationship(\"ItemModel\")     order = db.relationship(\"OrderModel\", back_populates=\"items\") In\u00a0[\u00a0]: Copied! <pre>class OrderModel(db.Model):\n    __tablename__ = \"orders\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    status = db.Column(db.String(20), nullable=False)\n\n    items = db.relationship(\"ItemsInOrder\", back_populates=\"order\")  # back_ref instead\n\n    @property\n    def description(self):\n        \"\"\"\n        Generates a simple string representing this order, in the format of \"5x chair, 2x table\"\n        \"\"\"\n        item_counts = [f\"{i.quantity}x {i.item.name}\" for i in self.items]\n        return \",\".join(item_counts)\n\n    @property\n    def amount(self):\n        return int(sum([item_data.item.price * item_data.quantity for item_data in self.items]) * 100)\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"OrderModel\"]:\n        return cls.query.all()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"OrderModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def charge_with_stripe(self, token: str) -&gt; stripe.Charge:\n        stripe.api_key = os.getenv(\"STRIPE_API_KEY\")\n\n        return stripe.Charge.create(\n            amount=self.amount,  # amount of cents (100 means USD$1.00)\n            currency=CURRENCY,\n            description=self.description,\n            source=token\n        )\n\n    def set_status(self, new_status: str) -&gt; None:\n        self.status = new_status\n        self.save_to_db()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class OrderModel(db.Model):     __tablename__ = \"orders\"      id = db.Column(db.Integer, primary_key=True)     status = db.Column(db.String(20), nullable=False)      items = db.relationship(\"ItemsInOrder\", back_populates=\"order\")  # back_ref instead      @property     def description(self):         \"\"\"         Generates a simple string representing this order, in the format of \"5x chair, 2x table\"         \"\"\"         item_counts = [f\"{i.quantity}x {i.item.name}\" for i in self.items]         return \",\".join(item_counts)      @property     def amount(self):         return int(sum([item_data.item.price * item_data.quantity for item_data in self.items]) * 100)      @classmethod     def find_all(cls) -&gt; List[\"OrderModel\"]:         return cls.query.all()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"OrderModel\":         return cls.query.filter_by(id=_id).first()      def charge_with_stripe(self, token: str) -&gt; stripe.Charge:         stripe.api_key = os.getenv(\"STRIPE_API_KEY\")          return stripe.Charge.create(             amount=self.amount,  # amount of cents (100 means USD$1.00)             currency=CURRENCY,             description=self.description,             source=token         )      def set_status(self, new_status: str) -&gt; None:         self.status = new_status         self.save_to_db()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import List\n</pre> from typing import List In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False, unique=True)\n\n    items = db.relationship(\"ItemModel\", lazy=\"dynamic\")\n\n    @classmethod\n    def find_by_name(cls, name: str) -&gt; \"StoreModel\":\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls) -&gt; List[\"StoreModel\"]:\n        return cls.query.all()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = \"stores\"      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80), nullable=False, unique=True)      items = db.relationship(\"ItemModel\", lazy=\"dynamic\")      @classmethod     def find_by_name(cls, name: str) -&gt; \"StoreModel\":         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls) -&gt; List[\"StoreModel\"]:         return cls.query.all()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = \"users\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\n\n    @classmethod\n    def find_by_username(cls, username: str) -&gt; \"UserModel\":\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id: int) -&gt; \"UserModel\":\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self) -&gt; None:\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self) -&gt; None:\n        db.session.delete(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = \"users\"      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80), nullable=False, unique=True)     password = db.Column(db.String(80), nullable=False)      @classmethod     def find_by_username(cls, username: str) -&gt; \"UserModel\":         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id: int) -&gt; \"UserModel\":         return cls.query.filter_by(id=_id).first()      def save_to_db(self) -&gt; None:         db.session.add(self)         db.session.commit()      def delete_from_db(self) -&gt; None:         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section9/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom flask_jwt_extended import jwt_required, fresh_jwt_required\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\nfrom libs.strings import gettext\n</pre> from flask_restful import Resource from flask import request from flask_jwt_extended import jwt_required, fresh_jwt_required from models.item import ItemModel from schemas.item import ItemSchema from libs.strings import gettext In\u00a0[\u00a0]: Copied! <pre>item_schema = ItemSchema()\nitem_list_schema = ItemSchema(many=True)\n</pre> item_schema = ItemSchema() item_list_schema = ItemSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    @classmethod\n    def get(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item_schema.dump(item), 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    @fresh_jwt_required\n    def post(cls, name: str):\n        if ItemModel.find_by_name(name):\n            return {\"message\": gettext(\"item_name_exists\").format(name)}, 400\n\n        item_json = request.get_json()\n        item_json[\"name\"] = name\n\n        item = item_schema.load(item_json)\n\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": gettext(\"item_error_inserting\")}, 500\n\n        return item_schema.dump(item), 201\n\n    @classmethod\n    @jwt_required\n    def delete(cls, name: str):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {\"message\": gettext(\"item_deleted\")}, 200\n\n        return {\"message\": gettext(\"item_not_found\")}, 404\n\n    @classmethod\n    def put(cls, name: str):\n        item_json = request.get_json()\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = item_json[\"price\"]\n        else:\n            item_json[\"name\"] = name\n            item = item_schema.load(item_json)\n\n        item.save_to_db()\n\n        return item_schema.dump(item), 200\n</pre> class Item(Resource):     @classmethod     def get(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             return item_schema.dump(item), 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     @fresh_jwt_required     def post(cls, name: str):         if ItemModel.find_by_name(name):             return {\"message\": gettext(\"item_name_exists\").format(name)}, 400          item_json = request.get_json()         item_json[\"name\"] = name          item = item_schema.load(item_json)          try:             item.save_to_db()         except:             return {\"message\": gettext(\"item_error_inserting\")}, 500          return item_schema.dump(item), 201      @classmethod     @jwt_required     def delete(cls, name: str):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {\"message\": gettext(\"item_deleted\")}, 200          return {\"message\": gettext(\"item_not_found\")}, 404      @classmethod     def put(cls, name: str):         item_json = request.get_json()         item = ItemModel.find_by_name(name)          if item:             item.price = item_json[\"price\"]         else:             item_json[\"name\"] = name             item = item_schema.load(item_json)          item.save_to_db()          return item_schema.dump(item), 200 In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200\n</pre> class ItemList(Resource):     @classmethod     def get(cls):         return {\"items\": item_list_schema.dump(ItemModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/resources/order/","title":"Order","text":"In\u00a0[\u00a0]: Copied! <pre>from collections import Counter\nfrom flask import request\nfrom flask_restful import Resource\n</pre> from collections import Counter from flask import request from flask_restful import Resource In\u00a0[\u00a0]: Copied! <pre>from stripe import error\nfrom libs.strings import gettext\nfrom models.item import ItemModel\nfrom models.order import OrderModel, ItemsInOrder\nfrom schemas.order import OrderSchema\n</pre> from stripe import error from libs.strings import gettext from models.item import ItemModel from models.order import OrderModel, ItemsInOrder from schemas.order import OrderSchema In\u00a0[\u00a0]: Copied! <pre>order_schema = OrderSchema()\n</pre> order_schema = OrderSchema() In\u00a0[\u00a0]: Copied! <pre>class Order(Resource):\n\n    @classmethod\n    def get(cls):\n        return order_schema.dump(OrderModel.find_all(), many=True), 200\n\n    @classmethod\n    def post(cls):\n        \"\"\"\n        Expect a token and a list of item ids from the request body.\n        Construct an order and talk to the Stripe API to make a charge\n        \"\"\"\n        data = request.get_json()  # token + list of item ids  [1, 2, 3, 5, 5, 5]\n        items = []\n        item_id_quantities = Counter(data['item_ids'])\n\n        # Iterate over items and retrieve them from the database\n        for _id, count in item_id_quantities.most_common():  # [(5, 3), (3, 1), (2, 1), (1, 1)]\n            item = ItemModel.find_by_id(_id)\n            if not item:\n                return {'message': gettext('order_item_by_id_not_found').format(_id)}\n\n            items.append(ItemsInOrder(item_id=_id, quantity=count))\n\n        order = OrderModel(items=items, status='pending')\n        order.save_to_db()  # this does not submit to Stripe\n\n        try:\n            order.set_status(\"failed\")  # assume the order would fail until it's completed\n            order.charge_with_stripe(data[\"token\"])\n            order.set_status(\"complete\")  # charge succeeded\n            return order_schema.dump(order), 200\n        # the following error handling is advised by Stripe, although the handling implementations are identical,\n        # we choose to specify them separately just to give the students a better idea what we can expect\n        except error.CardError as e:\n            # Since it's a decline, stripe.error.CardError will be caught\n            return e.json_body, e.http_status\n        except error.RateLimitError as e:\n            # Too many requests made to the API too quickly\n            return e.json_body, e.http_status\n        except error.InvalidRequestError as e:\n            # Invalid parameters were supplied to Stripe's API\n            return e.json_body, e.http_status\n        except error.AuthenticationError as e:\n            # Authentication with Stripe's API failed\n            # (maybe you changed API keys recently)\n            return e.json_body, e.http_status\n        except error.APIConnectionError as e:\n            # Network communication with Stripe failed\n            return e.json_body, e.http_status\n        except error.StripeError as e:\n            # Display a very generic error to the user, and maybe send\n            # yourself an email\n            return e.json_body, e.http_status\n        except Exception as e:\n            # Something else happened, completely unrelated to Stripe\n            print(e)\n            return {\"message\": gettext(\"order_error\")}, 500\n</pre> class Order(Resource):      @classmethod     def get(cls):         return order_schema.dump(OrderModel.find_all(), many=True), 200      @classmethod     def post(cls):         \"\"\"         Expect a token and a list of item ids from the request body.         Construct an order and talk to the Stripe API to make a charge         \"\"\"         data = request.get_json()  # token + list of item ids  [1, 2, 3, 5, 5, 5]         items = []         item_id_quantities = Counter(data['item_ids'])          # Iterate over items and retrieve them from the database         for _id, count in item_id_quantities.most_common():  # [(5, 3), (3, 1), (2, 1), (1, 1)]             item = ItemModel.find_by_id(_id)             if not item:                 return {'message': gettext('order_item_by_id_not_found').format(_id)}              items.append(ItemsInOrder(item_id=_id, quantity=count))          order = OrderModel(items=items, status='pending')         order.save_to_db()  # this does not submit to Stripe          try:             order.set_status(\"failed\")  # assume the order would fail until it's completed             order.charge_with_stripe(data[\"token\"])             order.set_status(\"complete\")  # charge succeeded             return order_schema.dump(order), 200         # the following error handling is advised by Stripe, although the handling implementations are identical,         # we choose to specify them separately just to give the students a better idea what we can expect         except error.CardError as e:             # Since it's a decline, stripe.error.CardError will be caught             return e.json_body, e.http_status         except error.RateLimitError as e:             # Too many requests made to the API too quickly             return e.json_body, e.http_status         except error.InvalidRequestError as e:             # Invalid parameters were supplied to Stripe's API             return e.json_body, e.http_status         except error.AuthenticationError as e:             # Authentication with Stripe's API failed             # (maybe you changed API keys recently)             return e.json_body, e.http_status         except error.APIConnectionError as e:             # Network communication with Stripe failed             return e.json_body, e.http_status         except error.StripeError as e:             # Display a very generic error to the user, and maybe send             # yourself an email             return e.json_body, e.http_status         except Exception as e:             # Something else happened, completely unrelated to Stripe             print(e)             return {\"message\": gettext(\"order_error\")}, 500"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom models.store import StoreModel\nfrom schemas.store import StoreSchema\nfrom libs.strings import gettext\n</pre> from flask_restful import Resource from models.store import StoreModel from schemas.store import StoreSchema from libs.strings import gettext In\u00a0[\u00a0]: Copied! <pre>store_schema = StoreSchema()\nstore_list_schema = StoreSchema(many=True)\n</pre> store_schema = StoreSchema() store_list_schema = StoreSchema(many=True) In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    @classmethod\n    def get(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store_schema.dump(store), 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n\n    @classmethod\n    def post(cls, name: str):\n        if StoreModel.find_by_name(name):\n            return {\"message\": gettext(\"store_name_exists\").format(name)}, 400\n\n        store = StoreModel(name=name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": gettext(\"store_error_inserting\")}, 500\n\n        return store_schema.dump(store), 201\n\n    @classmethod\n    def delete(cls, name: str):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n            return {\"message\": gettext(\"store_deleted\")}, 200\n\n        return {\"message\": gettext(\"store_not_found\")}, 404\n</pre> class Store(Resource):     @classmethod     def get(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             return store_schema.dump(store), 200          return {\"message\": gettext(\"store_not_found\")}, 404      @classmethod     def post(cls, name: str):         if StoreModel.find_by_name(name):             return {\"message\": gettext(\"store_name_exists\").format(name)}, 400          store = StoreModel(name=name)         try:             store.save_to_db()         except:             return {\"message\": gettext(\"store_error_inserting\")}, 500          return store_schema.dump(store), 201      @classmethod     def delete(cls, name: str):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()             return {\"message\": gettext(\"store_deleted\")}, 200          return {\"message\": gettext(\"store_not_found\")}, 404 In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200\n</pre> class StoreList(Resource):     @classmethod     def get(cls):         return {\"stores\": store_list_schema.dump(StoreModel.find_all())}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom flask import request\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    get_jwt_identity,\n    jwt_required,\n    get_raw_jwt,\n)\nfrom models.user import UserModel\nfrom schemas.user import UserSchema\nfrom blacklist import BLACKLIST\nfrom libs.strings import gettext\n</pre> from flask_restful import Resource from flask import request from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     get_jwt_identity,     jwt_required,     get_raw_jwt, ) from models.user import UserModel from schemas.user import UserSchema from blacklist import BLACKLIST from libs.strings import gettext In\u00a0[\u00a0]: Copied! <pre>user_schema = UserSchema()\n</pre> user_schema = UserSchema() In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user = user_schema.load(user_json)\n\n        if UserModel.find_by_username(user.username):\n            return {\"message\": gettext(\"user_username_exists\")}, 400\n\n        user.save_to_db()\n\n        return {\"message\": gettext(\"user_registered\")}, 201\n</pre> class UserRegister(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user = user_schema.load(user_json)          if UserModel.find_by_username(user.username):             return {\"message\": gettext(\"user_username_exists\")}, 400          user.save_to_db()          return {\"message\": gettext(\"user_registered\")}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    \"\"\"\n    This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the\n    sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.\n    \"\"\"\n\n    @classmethod\n    def get(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        return user_schema.dump(user), 200\n\n    @classmethod\n    def delete(cls, user_id: int):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n\n        user.delete_from_db()\n        return {\"message\": gettext(\"user_deleted\")}, 200\n</pre> class User(Resource):     \"\"\"     This resource can be useful when testing our Flask app. We may not want to expose it to public users, but for the     sake of demonstration in this course, it can be useful when we are manipulating data regarding the users.     \"\"\"      @classmethod     def get(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          return user_schema.dump(user), 200      @classmethod     def delete(cls, user_id: int):         user = UserModel.find_by_id(user_id)         if not user:             return {\"message\": gettext(\"user_not_found\")}, 404          user.delete_from_db()         return {\"message\": gettext(\"user_deleted\")}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        user_json = request.get_json()\n        user_data = user_schema.load(user_json)\n\n        user = UserModel.find_by_username(user_data.username)\n\n        if user and safe_str_cmp(user.password, user_data.password):\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200\n\n        return {\"message\": gettext(\"user_invalid_credentials\")}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         user_json = request.get_json()         user_data = user_schema.load(user_json)          user = UserModel.find_by_username(user_data.username)          if user and safe_str_cmp(user.password, user_data.password):             access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {\"access_token\": access_token, \"refresh_token\": refresh_token}, 200          return {\"message\": gettext(\"user_invalid_credentials\")}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls):\n        jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.\n        user_id = get_jwt_identity()\n        BLACKLIST.add(jti)\n        return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200\n</pre> class UserLogout(Resource):     @classmethod     @jwt_required     def post(cls):         jti = get_raw_jwt()[\"jti\"]  # jti is \"JWT ID\", a unique identifier for a JWT.         user_id = get_jwt_identity()         BLACKLIST.add(jti)         return {\"message\": gettext(\"user_logged_out\").format(user_id)}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        current_user = get_jwt_identity()\n        new_token = create_access_token(identity=current_user, fresh=False)\n        return {\"access_token\": new_token}, 200\n</pre> class TokenRefresh(Resource):     @classmethod     @jwt_refresh_token_required     def post(cls):         current_user = get_jwt_identity()         new_token = create_access_token(identity=current_user, fresh=False)         return {\"access_token\": new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/schemas/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/advanced/section9/schemas/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.item import ItemModel\nfrom models.store import StoreModel\n</pre> from ma import ma from models.item import ItemModel from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class ItemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ItemModel\n        load_only = (\"store\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        load_instance = True\n</pre> class ItemSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = ItemModel         load_only = (\"store\",)         dump_only = (\"id\",)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/schemas/order/","title":"Order","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.order import OrderModel\n</pre> from ma import ma from models.order import OrderModel In\u00a0[\u00a0]: Copied! <pre>class OrderSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = OrderModel\n        load_only = (\"token\",)\n        dump_only = (\"id\", \"status\",)\n        include_relationships = True\n        load_instance = True\n</pre> class OrderSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = OrderModel         load_only = (\"token\",)         dump_only = (\"id\", \"status\",)         include_relationships = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/schemas/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.store import StoreModel\nfrom models.item import ItemModel\nfrom schemas.item import ItemSchema\n</pre> from ma import ma from models.store import StoreModel from models.item import ItemModel from schemas.item import ItemSchema In\u00a0[\u00a0]: Copied! <pre>class StoreSchema(ma.SQLAlchemyAutoSchema):\n    items = ma.Nested(ItemSchema, many=True)\n\n    class Meta:\n        model = StoreModel\n        dump_only = (\"id\",)\n        include_fk = True\n        load_instance = True\n</pre> class StoreSchema(ma.SQLAlchemyAutoSchema):     items = ma.Nested(ItemSchema, many=True)      class Meta:         model = StoreModel         dump_only = (\"id\",)         include_fk = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/advanced/section9/schemas/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from ma import ma\nfrom models.user import UserModel\n</pre> from ma import ma from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = UserModel\n        load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_relationships = True\n        load_instance = True\n</pre> class UserSchema(ma.SQLAlchemyAutoSchema):     class Meta:         model = UserModel         load_only = (\"password\",)         dump_only = (\"id\",)         include_relationships = True         load_instance = True"},{"location":"side-projects/restful-apis-with-flask/basics/section11/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify\nfrom flask_restful import Api\nfrom flask_jwt_extended import JWTManager\n</pre> from flask import Flask, jsonify from flask_restful import Api from flask_jwt_extended import JWTManager In\u00a0[\u00a0]: Copied! <pre>from resources.user import UserRegister, User, UserLogin, UserLogout, TokenRefresh\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\nfrom blacklist import BLACKLIST\n</pre> from resources.user import UserRegister, User, UserLogin, UserLogout, TokenRefresh from resources.item import Item, ItemList from resources.store import Store, StoreList from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['PROPAGATE_EXCEPTIONS'] = True  # \u5141\u8a31\u64f4\u5145\u5957\u4ef6 raise \u5b83\u5011\u7684 exceptions\napp.config['JWT_BLACKLIST_ENABLED'] = True\napp.config['JWT_BLACKLIST_TOKEN_CHECKS'] = ['access', 'refresh']\napp.secret_key = 'kcl'  # or `app.config['JWT_SECRET_KEY'] = 'kcl'` instead\napi = Api(app)\n</pre> app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False app.config['PROPAGATE_EXCEPTIONS'] = True  # \u5141\u8a31\u64f4\u5145\u5957\u4ef6 raise \u5b83\u5011\u7684 exceptions app.config['JWT_BLACKLIST_ENABLED'] = True app.config['JWT_BLACKLIST_TOKEN_CHECKS'] = ['access', 'refresh'] app.secret_key = 'kcl'  # or `app.config['JWT_SECRET_KEY'] = 'kcl'` instead api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>jwt = JWTManager(app)  # not creating /auth\n</pre> jwt = JWTManager(app)  # not creating /auth In\u00a0[\u00a0]: Copied! <pre>@jwt.user_claims_loader\ndef add_claims_to_jwt(identity):\n    if identity == 1:  # Instead of hard-coding, you should read from a config file or a database\n        return {'is_admin': True}\n    return {'is_admin': False}\n</pre> @jwt.user_claims_loader def add_claims_to_jwt(identity):     if identity == 1:  # Instead of hard-coding, you should read from a config file or a database         return {'is_admin': True}     return {'is_admin': False} In\u00a0[\u00a0]: Copied! <pre>@jwt.token_in_blacklist_loader\ndef check_if_token_in_blacklist(decrpyted_token):\n    return decrpyted_token['jti'] in BLACKLIST\n</pre> @jwt.token_in_blacklist_loader def check_if_token_in_blacklist(decrpyted_token):     return decrpyted_token['jti'] in BLACKLIST In\u00a0[\u00a0]: Copied! <pre>@jwt.expired_token_loader\ndef expired_token_callback():\n    return jsonify({\n        'description': 'The token has expired.',\n        'error': 'token_expired'\n    }), 401\n</pre> @jwt.expired_token_loader def expired_token_callback():     return jsonify({         'description': 'The token has expired.',         'error': 'token_expired'     }), 401 In\u00a0[\u00a0]: Copied! <pre>@jwt.invalid_token_loader\ndef invalid_token_callback(error):\n    return jsonify({\n        'description': 'Signature verification failed.',\n        'error': 'invalid_token'\n    }), 401\n</pre> @jwt.invalid_token_loader def invalid_token_callback(error):     return jsonify({         'description': 'Signature verification failed.',         'error': 'invalid_token'     }), 401 In\u00a0[\u00a0]: Copied! <pre>@jwt.unauthorized_loader\ndef missing_token_callback(error):\n    return jsonify({\n        'description': 'Request does not contain an access token.',\n        'error': 'authorization_required'\n    }), 401\n</pre> @jwt.unauthorized_loader def missing_token_callback(error):     return jsonify({         'description': 'Request does not contain an access token.',         'error': 'authorization_required'     }), 401 In\u00a0[\u00a0]: Copied! <pre>@jwt.needs_fresh_token_loader\ndef token_not_refresh_callback():\n    return jsonify({\n        'description': 'The token is not refresh.',\n        'error': 'fresh_token_required'\n    }), 401\n</pre> @jwt.needs_fresh_token_loader def token_not_refresh_callback():     return jsonify({         'description': 'The token is not refresh.',         'error': 'fresh_token_required'     }), 401 In\u00a0[\u00a0]: Copied! <pre>@jwt.revoked_token_loader\ndef revoked_token_callback():\n    return jsonify({\n        'description': 'The token has been revoked.',\n        'error': 'token_revoked'\n    }), 401\n</pre> @jwt.revoked_token_loader def revoked_token_callback():     return jsonify({         'description': 'The token has been revoked.',         'error': 'token_revoked'     }), 401 In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, '/store/&lt;string:name&gt;')\napi.add_resource(StoreList, '/stores')\napi.add_resource(Item, '/item/&lt;string:name&gt;')\napi.add_resource(ItemList, '/items')\napi.add_resource(UserRegister, '/register')\napi.add_resource(User, '/user/&lt;int:user_id&gt;')\napi.add_resource(UserLogin, '/login')\napi.add_resource(UserLogout, '/logout')\napi.add_resource(TokenRefresh, '/refresh')\n</pre> api.add_resource(Store, '/store/') api.add_resource(StoreList, '/stores') api.add_resource(Item, '/item/') api.add_resource(ItemList, '/items') api.add_resource(UserRegister, '/register') api.add_resource(User, '/user/') api.add_resource(UserLogin, '/login') api.add_resource(UserLogout, '/logout') api.add_resource(TokenRefresh, '/refresh') In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    from db import db\n    db.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == '__main__':     from db import db     db.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/basics/section11/blacklist/","title":"Blacklist","text":"In\u00a0[\u00a0]: Copied! <pre>BLACKLIST = set()\n</pre> BLACKLIST = set()"},{"location":"side-projects/restful-apis-with-flask/basics/section11/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/basics/section11/models/__init__/","title":"init","text":"In\u00a0[\u00a0]: Copied!"},{"location":"side-projects/restful-apis-with-flask/basics/section11/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = 'items'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n    price = db.Column(db.Float(precision=2))\n\n    store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))\n    store = db.relationship('StoreModel')\n\n    def __init__(self, name, price, store_id):\n        self.name = name\n        self.price = price\n        self.store_id = store_id\n\n    def json(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'price': self.price,\n            'store_id': self.store_id\n        }\n\n    @classmethod\n    def find_by_name(cls, name):\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls):\n        return cls.query.all()\n    \n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = 'items'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))     price = db.Column(db.Float(precision=2))      store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))     store = db.relationship('StoreModel')      def __init__(self, name, price, store_id):         self.name = name         self.price = price         self.store_id = store_id      def json(self):         return {             'id': self.id,             'name': self.name,             'price': self.price,             'store_id': self.store_id         }      @classmethod     def find_by_name(cls, name):         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls):         return cls.query.all()          def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section11/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = 'stores'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n\n    items = db.relationship('ItemModel', lazy='dynamic')\n\n    def __init__(self, name):\n        self.name = name\n\n    def json(self):\n        return {\n            'id': self.id,\n            'name': self.name, \n            'items': [item.json() for item in self.items.all()]\n        }\n\n    @classmethod\n    def find_by_name(cls, name):\n        return cls.query.filter_by(name=name).first()\n\n    @classmethod\n    def find_all(cls):\n        return cls.query.all()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = 'stores'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))      items = db.relationship('ItemModel', lazy='dynamic')      def __init__(self, name):         self.name = name      def json(self):         return {             'id': self.id,             'name': self.name,              'items': [item.json() for item in self.items.all()]         }      @classmethod     def find_by_name(cls, name):         return cls.query.filter_by(name=name).first()      @classmethod     def find_all(cls):         return cls.query.all()      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section11/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def json(self):\n        return {\n            'id': self.id,\n            'username': self.username\n        }\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n</pre> class UserModel(db.Model):     __tablename__ = 'users'      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80))     password = db.Column(db.String(80))      def __init__(self, username, password):         self.username = username         self.password = password      def json(self):         return {             'id': self.id,             'username': self.username         }      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()      @classmethod     def find_by_username(cls, username):         return cls.query.filter_by(username=username).first()      @classmethod     def find_by_id(cls, _id):         return cls.query.filter_by(id=_id).first()"},{"location":"side-projects/restful-apis-with-flask/basics/section11/resources/__init__/","title":"init","text":"In\u00a0[\u00a0]: Copied!"},{"location":"side-projects/restful-apis-with-flask/basics/section11/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom flask_jwt_extended import (\n    jwt_required,\n    fresh_jwt_required,\n    jwt_optional,\n    get_jwt_claims,\n    get_jwt_identity\n)\nfrom models.item import ItemModel\n</pre> from flask_restful import Resource, reqparse from flask_jwt_extended import (     jwt_required,     fresh_jwt_required,     jwt_optional,     get_jwt_claims,     get_jwt_identity ) from models.item import ItemModel In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('price',\n                        type=float,\n                        required=True,\n                        help=\"This field cannot be left blank!\"\n                        )\n    parser.add_argument('store_id',\n                        type=int,\n                        required=True,\n                        help=\"Every item needs a store_id.\"\n                        )\n\n    @jwt_required # both fresh and non-fresh access token will work\n    def get(self, name):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item.json()\n        return {'message': 'Item not found'}, 404\n\n    @fresh_jwt_required # only fresh access token will work \n    def post(self, name):\n        if ItemModel.find_by_name(name):\n            return {'message': \"An item with name '{}' already exists.\".format(name)}, 400\n\n        data = Item.parser.parse_args()\n\n        item = ItemModel(name, **data)\n        try:\n            item.save_to_db()\n        except:\n            return {\"message\": \"An error occurred inserting the item.\"}, 500\n\n        return item.json(), 201\n\n    @jwt_required\n    def delete(self, name):\n        claims = get_jwt_claims()\n        if not claims['is_admin']:\n            return {'message': 'Admin privilege required.'}, 401\n\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n            return {'message': 'Item deleted.'}\n        return {'message': 'Item not found.'}, 404\n\n    def put(self, name):\n        data = Item.parser.parse_args()\n\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = data['price']\n        else:\n            item = ItemModel(name, **data)\n\n        item.save_to_db()\n\n        return item.json()\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument('price',                         type=float,                         required=True,                         help=\"This field cannot be left blank!\"                         )     parser.add_argument('store_id',                         type=int,                         required=True,                         help=\"Every item needs a store_id.\"                         )      @jwt_required # both fresh and non-fresh access token will work     def get(self, name):         item = ItemModel.find_by_name(name)         if item:             return item.json()         return {'message': 'Item not found'}, 404      @fresh_jwt_required # only fresh access token will work      def post(self, name):         if ItemModel.find_by_name(name):             return {'message': \"An item with name '{}' already exists.\".format(name)}, 400          data = Item.parser.parse_args()          item = ItemModel(name, **data)         try:             item.save_to_db()         except:             return {\"message\": \"An error occurred inserting the item.\"}, 500          return item.json(), 201      @jwt_required     def delete(self, name):         claims = get_jwt_claims()         if not claims['is_admin']:             return {'message': 'Admin privilege required.'}, 401          item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()             return {'message': 'Item deleted.'}         return {'message': 'Item not found.'}, 404      def put(self, name):         data = Item.parser.parse_args()          item = ItemModel.find_by_name(name)          if item:             item.price = data['price']         else:             item = ItemModel(name, **data)          item.save_to_db()          return item.json() In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    @jwt_optional\n    def get(self):\n        user_id = get_jwt_identity() # user_id or None\n        items = [item.json() for item in ItemModel.find_all()]\n        if user_id:\n            return {'items': items}, 200\n        return {\n            'items': [item['name'] for item in items],\n            'message': 'More data available if you log in.'\n        }, 200\n</pre> class ItemList(Resource):     @jwt_optional     def get(self):         user_id = get_jwt_identity() # user_id or None         items = [item.json() for item in ItemModel.find_all()]         if user_id:             return {'items': items}, 200         return {             'items': [item['name'] for item in items],             'message': 'More data available if you log in.'         }, 200"},{"location":"side-projects/restful-apis-with-flask/basics/section11/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource\nfrom models.store import StoreModel\n</pre> from flask_restful import Resource from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    def get(self, name):\n        store = StoreModel.find_by_name(name)\n        if store:\n            return store.json()\n        return {'message': 'Store not found'}, 404\n\n    def post(self, name):\n        if StoreModel.find_by_name(name):\n            return {'message': \"A store with name '{}' already exists.\".format(name)}, 400\n\n        store = StoreModel(name)\n        try:\n            store.save_to_db()\n        except:\n            return {\"message\": \"An error occurred creating the store.\"}, 500\n\n        return store.json(), 201\n\n    def delete(self, name):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n\n        return {'message': 'Store deleted'}\n</pre> class Store(Resource):     def get(self, name):         store = StoreModel.find_by_name(name)         if store:             return store.json()         return {'message': 'Store not found'}, 404      def post(self, name):         if StoreModel.find_by_name(name):             return {'message': \"A store with name '{}' already exists.\".format(name)}, 400          store = StoreModel(name)         try:             store.save_to_db()         except:             return {\"message\": \"An error occurred creating the store.\"}, 500          return store.json(), 201      def delete(self, name):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()          return {'message': 'Store deleted'} In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    def get(self):\n        return {'stores': [store.json() for store in StoreModel.find_all()]}\n</pre> class StoreList(Resource):     def get(self):         return {'stores': [store.json() for store in StoreModel.find_all()]}"},{"location":"side-projects/restful-apis-with-flask/basics/section11/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom werkzeug.security import safe_str_cmp\nfrom flask_jwt_extended import (\n    create_access_token,\n    create_refresh_token,\n    jwt_refresh_token_required,\n    jwt_required,\n    get_jwt_identity,\n    get_raw_jwt\n)\nfrom models.user import UserModel\nfrom blacklist import BLACKLIST\n</pre> from flask_restful import Resource, reqparse from werkzeug.security import safe_str_cmp from flask_jwt_extended import (     create_access_token,     create_refresh_token,     jwt_refresh_token_required,     jwt_required,     get_jwt_identity,     get_raw_jwt ) from models.user import UserModel from blacklist import BLACKLIST In\u00a0[\u00a0]: Copied! <pre>_user_parser = reqparse.RequestParser()\n_user_parser.add_argument('username',\n                          type=str,\n                          required=True,\n                          help=\"This field cannot be blank.\"\n                          )\n_user_parser.add_argument('password',\n                          type=str,\n                          required=True,\n                          help=\"This field cannot be blank.\"\n                          )\n</pre> _user_parser = reqparse.RequestParser() _user_parser.add_argument('username',                           type=str,                           required=True,                           help=\"This field cannot be blank.\"                           ) _user_parser.add_argument('password',                           type=str,                           required=True,                           help=\"This field cannot be blank.\"                           ) In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    def post(self):\n        data = _user_parser.parse_args()\n\n        if UserModel.find_by_username(data['username']):\n            return {\"message\": \"A user with that username already exists\"}, 400\n\n        user = UserModel(**data)\n        user.save_to_db()\n\n        return {\"message\": \"User created successfully.\"}, 201\n</pre> class UserRegister(Resource):     def post(self):         data = _user_parser.parse_args()          if UserModel.find_by_username(data['username']):             return {\"message\": \"A user with that username already exists\"}, 400          user = UserModel(**data)         user.save_to_db()          return {\"message\": \"User created successfully.\"}, 201 In\u00a0[\u00a0]: Copied! <pre>class User(Resource):\n    @classmethod\n    def get(cls, user_id):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': 'User not found'}, 404\n        return user.json()\n\n    @classmethod\n    def delete(cls, user_id):\n        user = UserModel.find_by_id(user_id)\n        if not user:\n            return {'message': 'User not found'}, 404\n        user.delete_from_db()\n        return {'message': 'User deleted.'}, 200\n</pre> class User(Resource):     @classmethod     def get(cls, user_id):         user = UserModel.find_by_id(user_id)         if not user:             return {'message': 'User not found'}, 404         return user.json()      @classmethod     def delete(cls, user_id):         user = UserModel.find_by_id(user_id)         if not user:             return {'message': 'User not found'}, 404         user.delete_from_db()         return {'message': 'User deleted.'}, 200 In\u00a0[\u00a0]: Copied! <pre>class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = _user_parser.parse_args()\n\n        user = UserModel.find_by_username(data['username'])\n\n        # This is what `authenticate()` function used to do\n        if user and safe_str_cmp(user.password, data['password']):\n            # identity= is what `identity()` function used to do \n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(user.id)\n            return {\n                'access_token': access_token,\n                'refresh_token': refresh_token\n            }, 200\n\n        return {'message': 'Invalid credentials'}, 401\n</pre> class UserLogin(Resource):     @classmethod     def post(cls):         data = _user_parser.parse_args()          user = UserModel.find_by_username(data['username'])          # This is what `authenticate()` function used to do         if user and safe_str_cmp(user.password, data['password']):             # identity= is what `identity()` function used to do              access_token = create_access_token(identity=user.id, fresh=True)             refresh_token = create_refresh_token(user.id)             return {                 'access_token': access_token,                 'refresh_token': refresh_token             }, 200          return {'message': 'Invalid credentials'}, 401 In\u00a0[\u00a0]: Copied! <pre>class UserLogout(Resource):\n    @jwt_required\n    def post(self):\n        jti = get_raw_jwt()['jti'] # jti is 'JWT ID', a unique identifier for a JWT\n        BLACKLIST.add(jti)\n        return {'message': 'Successfully logged out.'}, 200\n</pre> class UserLogout(Resource):     @jwt_required     def post(self):         jti = get_raw_jwt()['jti'] # jti is 'JWT ID', a unique identifier for a JWT         BLACKLIST.add(jti)         return {'message': 'Successfully logged out.'}, 200 In\u00a0[\u00a0]: Copied! <pre>class TokenRefresh(Resource):\n    @jwt_refresh_token_required\n    def post(self):\n        curr_user_id = get_jwt_identity() # user_id\n        new_token = create_access_token(identity=curr_user_id, fresh=False) # non-fresh access token\n        return {'access_token': new_token}, 200\n</pre> class TokenRefresh(Resource):     @jwt_refresh_token_required     def post(self):         curr_user_id = get_jwt_identity() # user_id         new_token = create_access_token(identity=curr_user_id, fresh=False) # non-fresh access token         return {'access_token': new_token}, 200"},{"location":"side-projects/restful-apis-with-flask/basics/section3/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, jsonify, request, render_template\n</pre> from flask import Flask, jsonify, request, render_template In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\n</pre> app = Flask(__name__) In\u00a0[\u00a0]: Copied! <pre>stores = [\n    {\n        'name': 'My Wonderful Store',\n        'items': [\n            {\n                'name': 'My Item',\n                'price': 15.99\n            }\n        ]\n    }\n]\n</pre> stores = [     {         'name': 'My Wonderful Store',         'items': [             {                 'name': 'My Item',                 'price': 15.99             }         ]     } ] In\u00a0[\u00a0]: Copied! <pre>@app.route('/')\ndef home():\n    return render_template('index.html')\n</pre> @app.route('/') def home():     return render_template('index.html') <p>POST - used to receive data GET - used to send data only</p> In\u00a0[\u00a0]: Copied! <pre># POST /store data: {name:}\n@app.route('/store', methods=['POST'])\ndef create_store():\n    request_data = request.get_json()\n    new_store = {\n        'name': request_data['name'],\n        'items': []\n    }\n    stores.append(new_store)\n    return jsonify(new_store)\n</pre> # POST /store data: {name:} @app.route('/store', methods=['POST']) def create_store():     request_data = request.get_json()     new_store = {         'name': request_data['name'],         'items': []     }     stores.append(new_store)     return jsonify(new_store) In\u00a0[\u00a0]: Copied! <pre># GET /store/&lt;string:name&gt;\n@app.route('/store/&lt;string:name&gt;') # 'http://127.0.0.1:5000/store/711'\ndef get_store(name):\n    for store in stores:\n        if store['name'] == name:\n            return jsonify(store)\n    return jsonify({'message': 'store not found'})\n</pre> # GET /store/ @app.route('/store/') # 'http://127.0.0.1:5000/store/711' def get_store(name):     for store in stores:         if store['name'] == name:             return jsonify(store)     return jsonify({'message': 'store not found'}) In\u00a0[\u00a0]: Copied! <pre># GET /store\n@app.route('/store')\ndef get_stores():\n    return jsonify({'stores': stores})\n</pre> # GET /store @app.route('/store') def get_stores():     return jsonify({'stores': stores}) In\u00a0[\u00a0]: Copied! <pre># POST /store/&lt;string:name&gt;/item data: {name:, price:}\n@app.route('/store/&lt;string:name&gt;/item', methods=['POST'])\ndef create_item_in_one_store(name):\n    request_data = request.get_json()\n    for store in stores:\n        if store['name'] == name:\n            new_item = {\n                'name': request_data['name'],\n                'price': request_data['price']\n            }\n            store['items'].append(new_item)\n            return jsonify(new_item)\n    return jsonify({'message': 'store not found'})\n</pre> # POST /store//item data: {name:, price:} @app.route('/store//item', methods=['POST']) def create_item_in_one_store(name):     request_data = request.get_json()     for store in stores:         if store['name'] == name:             new_item = {                 'name': request_data['name'],                 'price': request_data['price']             }             store['items'].append(new_item)             return jsonify(new_item)     return jsonify({'message': 'store not found'}) In\u00a0[\u00a0]: Copied! <pre># GET /store/&lt;string:name&gt;/item\n@app.route('/store/&lt;string:name&gt;/item')\ndef get_items_in_one_store(name):\n    for store in stores:\n        if store['name'] == name:\n            return jsonify({'items': store['items']})\n    return jsonify({'message': 'store not found'})\n</pre> # GET /store//item @app.route('/store//item') def get_items_in_one_store(name):     for store in stores:         if store['name'] == name:             return jsonify({'items': store['items']})     return jsonify({'message': 'store not found'}) In\u00a0[\u00a0]: Copied! <pre>app.run(port=5000)\n</pre> app.run(port=5000)"},{"location":"side-projects/restful-apis-with-flask/basics/section4/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, request\nfrom flask_restful import Resource, Api, reqparse\nfrom flask_jwt import JWT, jwt_required\n</pre> from flask import Flask, request from flask_restful import Resource, Api, reqparse from flask_jwt import JWT, jwt_required In\u00a0[\u00a0]: Copied! <pre>from security import authenticate, identity\n</pre> from security import authenticate, identity In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.secret_key = 'kcl'\napi = Api(app)\n</pre> app = Flask(__name__) app.secret_key = 'kcl' api = Api(app) In\u00a0[\u00a0]: Copied! <pre>jwt = JWT(app, authenticate, identity) # /auth\n</pre> jwt = JWT(app, authenticate, identity) # /auth In\u00a0[\u00a0]: Copied! <pre>items = []\n</pre> items = [] In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('price',\n        type=float,\n        required=True,\n        help=\"This field cannot be blank!\"\n    )\n\n    @jwt_required()\n    def get(self, name):\n        item = next(filter(lambda x: x['name']==name, items), None)\n        return {'item': item}, 200 if item else 404\n\n    def post(self, name):\n        if next(filter(lambda x: x['name']==name, items), None):\n            return {'message': f\"An item with name {name} already exists.\"}, 400\n        \n        data = Item.parser.parse_args()\n        item = {'name': name, 'price': data['price']}\n        items.append(item)\n        return item, 201\n\n    def delete(self, name):\n        global items\n        items = list(filter(lambda x: x['name']!=name, items))\n        return {'message': 'Item deleted'}\n\n    def put(self, name):\n        data = Item.parser.parse_args()\n        item = next(filter(lambda x: x['name']==name, items), None)\n        if item:\n            item.update(data)\n        else:\n            item = {'name': name, 'price': data['price']}\n            items.append(item)\n        return item\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument('price',         type=float,         required=True,         help=\"This field cannot be blank!\"     )      @jwt_required()     def get(self, name):         item = next(filter(lambda x: x['name']==name, items), None)         return {'item': item}, 200 if item else 404      def post(self, name):         if next(filter(lambda x: x['name']==name, items), None):             return {'message': f\"An item with name {name} already exists.\"}, 400                  data = Item.parser.parse_args()         item = {'name': name, 'price': data['price']}         items.append(item)         return item, 201      def delete(self, name):         global items         items = list(filter(lambda x: x['name']!=name, items))         return {'message': 'Item deleted'}      def put(self, name):         data = Item.parser.parse_args()         item = next(filter(lambda x: x['name']==name, items), None)         if item:             item.update(data)         else:             item = {'name': name, 'price': data['price']}             items.append(item)         return item In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    def get(self):\n        return {'items': items}\n</pre> class ItemList(Resource):     def get(self):         return {'items': items} In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Item, '/item/&lt;string:name&gt;')\napi.add_resource(ItemList, '/items')\n</pre> api.add_resource(Item, '/item/') api.add_resource(ItemList, '/items') In\u00a0[\u00a0]: Copied! <pre>app.run(port=5000, debug=True)\n</pre> app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/basics/section4/security/","title":"Security","text":"In\u00a0[\u00a0]: Copied! <pre>from werkzeug.security import safe_str_cmp\nfrom user import User\n</pre> from werkzeug.security import safe_str_cmp from user import User In\u00a0[\u00a0]: Copied! <pre>users = [\n    User(1, 'bob', 'asd')\n]\n</pre> users = [     User(1, 'bob', 'asd') ] In\u00a0[\u00a0]: Copied! <pre>username_mapping = {u.username: u for u in users}\nuserid_mapping = {u.id: u for u in users}\n</pre> username_mapping = {u.username: u for u in users} userid_mapping = {u.id: u for u in users} In\u00a0[\u00a0]: Copied! <pre>def authenticate(username, password):\n    user = username_mapping.get(username, None)\n    if user and safe_str_cmp(user.password, password):\n        return user\n</pre> def authenticate(username, password):     user = username_mapping.get(username, None)     if user and safe_str_cmp(user.password, password):         return user In\u00a0[\u00a0]: Copied! <pre>def identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n</pre> def identity(payload):     user_id = payload['identity']     return userid_mapping.get(user_id, None)"},{"location":"side-projects/restful-apis-with-flask/basics/section4/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>class User:\n    def __init__(self, _id, username, password):\n        self.id = _id\n        self.username = username\n        self.password = password\n</pre> class User:     def __init__(self, _id, username, password):         self.id = _id         self.username = username         self.password = password"},{"location":"side-projects/restful-apis-with-flask/basics/section5/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask\nfrom flask_restful import Api\nfrom flask_jwt import JWT\n</pre> from flask import Flask from flask_restful import Api from flask_jwt import JWT In\u00a0[\u00a0]: Copied! <pre>from security import authenticate, identity\nfrom user import UserRegister\nfrom item import Item, ItemList\n</pre> from security import authenticate, identity from user import UserRegister from item import Item, ItemList In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.secret_key = 'kcl'\napi = Api(app)\n</pre> app = Flask(__name__) app.secret_key = 'kcl' api = Api(app) In\u00a0[\u00a0]: Copied! <pre>jwt = JWT(app, authenticate, identity) # /auth\n</pre> jwt = JWT(app, authenticate, identity) # /auth In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Item, '/item/&lt;string:name&gt;')\napi.add_resource(ItemList, '/items')\napi.add_resource(UserRegister, '/register')\n</pre> api.add_resource(Item, '/item/') api.add_resource(ItemList, '/items') api.add_resource(UserRegister, '/register') In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    app.run(port=5000, debug=True)\n</pre> if __name__ == '__main__':     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/basics/section5/create_tables/","title":"Create tables","text":"In\u00a0[\u00a0]: Copied! <pre>import sqlite3\n</pre> import sqlite3 In\u00a0[\u00a0]: Copied! <pre>connection = sqlite3.connect('data.db')\ncursor = connection.cursor()\n</pre> connection = sqlite3.connect('data.db') cursor = connection.cursor() In\u00a0[\u00a0]: Copied! <pre>create_table = \"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username text, password text)\"\ncursor.execute(create_table)\n</pre> create_table = \"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username text, password text)\" cursor.execute(create_table) In\u00a0[\u00a0]: Copied! <pre>create_table = \"CREATE TABLE IF NOT EXISTS items (name text, price real)\"\ncursor.execute(create_table)\n</pre> create_table = \"CREATE TABLE IF NOT EXISTS items (name text, price real)\" cursor.execute(create_table) In\u00a0[\u00a0]: Copied! <pre>connection.commit()\n</pre> connection.commit() In\u00a0[\u00a0]: Copied! <pre>connection.close()\n</pre> connection.close()"},{"location":"side-projects/restful-apis-with-flask/basics/section5/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>import sqlite3\nfrom flask_restful import Resource, reqparse\nfrom flask_jwt import jwt_required\n</pre> import sqlite3 from flask_restful import Resource, reqparse from flask_jwt import jwt_required In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('price',\n        type=float,\n        required=True,\n        help=\"This field cannot be blank!\"\n    )\n\n    @classmethod\n    def find_by_name(cls, name):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"SELECT * FROM items WHERE name=?\"\n        result = cursor.execute(query, (name,))\n        row = result.fetchone()\n        \n        connection.close()\n\n        if row:\n            return {'item': {'name': row[0], 'price': row[1]}}\n\n    @classmethod\n    def insert(cls, item):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"INSERT INTO items VALUES (?, ?)\"\n        cursor.execute(query, (item['name'], item['price']))\n\n        connection.commit()\n        connection.close()\n\n    @classmethod\n    def update(cls, item):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n        \n        query = \"UPDATE items SET price=? WHERE name=?\"\n        cursor.execute(query, (item['price'], item['name']))\n\n        connection.commit()\n        connection.close()\n\n    @jwt_required()\n    def get(self, name):\n        item = self.find_by_name(name)\n        if item:\n            return item\n        return {'message': 'Item not found'}, 400\n\n    def post(self, name):\n        if self.find_by_name(name):\n            return {'message': f\"An item with name {name} already exists.\"}, 400\n        \n        data = Item.parser.parse_args()\n        item = {'name': name, 'price': data['price']}\n        \n        try:\n            self.insert(item)\n        except:\n            return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error\n        return item, 201\n\n    def delete(self, name):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n        \n        query = \"DELETE FROM items WHERE name=?\"\n        cursor.execute(query, (name,))\n\n        connection.commit()\n        connection.close()\n        return {'message': 'Item deleted'}\n\n    def put(self, name):\n        data = Item.parser.parse_args()\n        item = self.find_by_name(name)\n        updated_item = {'name': name, 'price': data['price']}\n\n        if item:\n            try:\n                self.update(updated_item)\n            except:\n                return {'message': \"An error ocurred inserting the item.\"}, 500\n        else:\n            try:\n                self.insert(updated_item)\n            except:\n                return {'message': \"An error ocurred inserting the item.\"}, 500\n        return updated_item\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument('price',         type=float,         required=True,         help=\"This field cannot be blank!\"     )      @classmethod     def find_by_name(cls, name):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"SELECT * FROM items WHERE name=?\"         result = cursor.execute(query, (name,))         row = result.fetchone()                  connection.close()          if row:             return {'item': {'name': row[0], 'price': row[1]}}      @classmethod     def insert(cls, item):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"INSERT INTO items VALUES (?, ?)\"         cursor.execute(query, (item['name'], item['price']))          connection.commit()         connection.close()      @classmethod     def update(cls, item):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()                  query = \"UPDATE items SET price=? WHERE name=?\"         cursor.execute(query, (item['price'], item['name']))          connection.commit()         connection.close()      @jwt_required()     def get(self, name):         item = self.find_by_name(name)         if item:             return item         return {'message': 'Item not found'}, 400      def post(self, name):         if self.find_by_name(name):             return {'message': f\"An item with name {name} already exists.\"}, 400                  data = Item.parser.parse_args()         item = {'name': name, 'price': data['price']}                  try:             self.insert(item)         except:             return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error         return item, 201      def delete(self, name):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()                  query = \"DELETE FROM items WHERE name=?\"         cursor.execute(query, (name,))          connection.commit()         connection.close()         return {'message': 'Item deleted'}      def put(self, name):         data = Item.parser.parse_args()         item = self.find_by_name(name)         updated_item = {'name': name, 'price': data['price']}          if item:             try:                 self.update(updated_item)             except:                 return {'message': \"An error ocurred inserting the item.\"}, 500         else:             try:                 self.insert(updated_item)             except:                 return {'message': \"An error ocurred inserting the item.\"}, 500         return updated_item In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    def get(self):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"SELECT * FROM items\"\n        result = cursor.execute(query)\n        items = []\n        for row in result:\n            items.append({'name': row[0], 'price': row[1]})\n\n        connection.close()\n\n        return {'items': items}\n</pre> class ItemList(Resource):     def get(self):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"SELECT * FROM items\"         result = cursor.execute(query)         items = []         for row in result:             items.append({'name': row[0], 'price': row[1]})          connection.close()          return {'items': items}"},{"location":"side-projects/restful-apis-with-flask/basics/section5/security/","title":"Security","text":"In\u00a0[\u00a0]: Copied! <pre>from werkzeug.security import safe_str_cmp\nfrom user import User\n</pre> from werkzeug.security import safe_str_cmp from user import User In\u00a0[\u00a0]: Copied! <pre>def authenticate(username, password):\n    user = User.find_by_username(username)\n    if user and safe_str_cmp(user.password, password):\n        return user\n</pre> def authenticate(username, password):     user = User.find_by_username(username)     if user and safe_str_cmp(user.password, password):         return user In\u00a0[\u00a0]: Copied! <pre>def identity(payload):\n    user_id = payload['identity']\n    return User.find_by_id(user_id)\n</pre> def identity(payload):     user_id = payload['identity']     return User.find_by_id(user_id)"},{"location":"side-projects/restful-apis-with-flask/basics/section5/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>import sqlite3\nfrom flask_restful import Resource, reqparse\n</pre> import sqlite3 from flask_restful import Resource, reqparse In\u00a0[\u00a0]: Copied! <pre>class User:\n    def __init__(self, _id, username, password):\n        self.id = _id\n        self.username = username\n        self.password = password\n\n    @classmethod\n    def find_by_username(cls, username):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"SELECT * FROM users WHERE username=?\"\n        result = cursor.execute(query, (username,))\n        row = result.fetchone()\n        if row:\n            user = cls(*row)\n        else:\n            user = None\n        \n        connection.close()\n        return user\n    \n    @classmethod\n    def find_by_id(cls, _id):\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"SELECT * FROM users WHERE id=?\"\n        result = cursor.execute(query, (_id,))\n        row = result.fetchone()\n        if row:\n            user = cls(*row)\n        else:\n            user = None\n        \n        connection.close()\n        return user\n</pre> class User:     def __init__(self, _id, username, password):         self.id = _id         self.username = username         self.password = password      @classmethod     def find_by_username(cls, username):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"SELECT * FROM users WHERE username=?\"         result = cursor.execute(query, (username,))         row = result.fetchone()         if row:             user = cls(*row)         else:             user = None                  connection.close()         return user          @classmethod     def find_by_id(cls, _id):         connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"SELECT * FROM users WHERE id=?\"         result = cursor.execute(query, (_id,))         row = result.fetchone()         if row:             user = cls(*row)         else:             user = None                  connection.close()         return user In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('username',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n    parser.add_argument('password',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n\n    def post(self):\n        data = UserRegister.parser.parse_args()\n\n        if User.find_by_username(data['username']):\n            return {\"message\": \"A user with that username already exists.\"}, 400\n\n        connection = sqlite3.connect('data.db')\n        cursor = connection.cursor()\n\n        query = \"INSERT INTO users VALUES (NULL, ?, ?)\"\n        cursor.execute(query, (data['username'], data['password']))\n\n        connection.commit()\n        connection.close()\n\n        return {'message': \"User created successfully.\"}, 201\n</pre> class UserRegister(Resource):     parser = reqparse.RequestParser()     parser.add_argument('username',         type=str,         required=True,         help='This field cannot be blank!'     )     parser.add_argument('password',         type=str,         required=True,         help='This field cannot be blank!'     )      def post(self):         data = UserRegister.parser.parse_args()          if User.find_by_username(data['username']):             return {\"message\": \"A user with that username already exists.\"}, 400          connection = sqlite3.connect('data.db')         cursor = connection.cursor()          query = \"INSERT INTO users VALUES (NULL, ?, ?)\"         cursor.execute(query, (data['username'], data['password']))          connection.commit()         connection.close()          return {'message': \"User created successfully.\"}, 201"},{"location":"side-projects/restful-apis-with-flask/basics/section6/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask\nfrom flask_restful import Api\nfrom flask_jwt import JWT\n</pre> from flask import Flask from flask_restful import Api from flask_jwt import JWT In\u00a0[\u00a0]: Copied! <pre>from security import authenticate, identity\nfrom resources.user import UserRegister\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\nfrom db import db\n</pre> from security import authenticate, identity from resources.user import UserRegister from resources.item import Item, ItemList from resources.store import Store, StoreList from db import db In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # turn off the flask_sqlalchemy tracker (but not sqlalchemy)\napp.secret_key = 'kcl'\napi = Api(app)\n</pre> app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # turn off the flask_sqlalchemy tracker (but not sqlalchemy) app.secret_key = 'kcl' api = Api(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all() In\u00a0[\u00a0]: Copied! <pre>jwt = JWT(app, authenticate, identity) # /auth\n</pre> jwt = JWT(app, authenticate, identity) # /auth In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, '/store/&lt;string:name&gt;')\napi.add_resource(StoreList, '/stores')\napi.add_resource(Item, '/item/&lt;string:name&gt;')\napi.add_resource(ItemList, '/items')\napi.add_resource(UserRegister, '/register')\n</pre> api.add_resource(Store, '/store/') api.add_resource(StoreList, '/stores') api.add_resource(Item, '/item/') api.add_resource(ItemList, '/items') api.add_resource(UserRegister, '/register') In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    db.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == '__main__':     db.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/basics/section6/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/basics/section6/security/","title":"Security","text":"In\u00a0[\u00a0]: Copied! <pre>from werkzeug.security import safe_str_cmp\nfrom models.user import UserModel\n</pre> from werkzeug.security import safe_str_cmp from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>def authenticate(username, password):\n    user = UserModel.find_by_username(username)\n    if user and safe_str_cmp(user.password, password):\n        return user\n</pre> def authenticate(username, password):     user = UserModel.find_by_username(username)     if user and safe_str_cmp(user.password, password):         return user In\u00a0[\u00a0]: Copied! <pre>def identity(payload):\n    user_id = payload['identity']\n    return UserModel.find_by_id(user_id)\n</pre> def identity(payload):     user_id = payload['identity']     return UserModel.find_by_id(user_id)"},{"location":"side-projects/restful-apis-with-flask/basics/section6/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section6/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = 'items'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n    price = db.Column(db.Float(precision=2))\n\n    store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))\n    store = db.relationship('StoreModel')\n\n    def __init__(self, name, price, store_id):\n        self.name = name\n        self.price = price\n        self.store_id = store_id\n    \n    def json(self):\n        return {'name': self.name, 'price': self.price}\n    \n    @classmethod\n    def find_by_name(cls, name):\n        # SELECT * FROM items WHERE name=name LIMIT 1\n        return cls.query.filter_by(name=name).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = 'items'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))     price = db.Column(db.Float(precision=2))      store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))     store = db.relationship('StoreModel')      def __init__(self, name, price, store_id):         self.name = name         self.price = price         self.store_id = store_id          def json(self):         return {'name': self.name, 'price': self.price}          @classmethod     def find_by_name(cls, name):         # SELECT * FROM items WHERE name=name LIMIT 1         return cls.query.filter_by(name=name).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section6/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = 'stores'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n\n    # \u4e0d\u8981\u5275\u5efa StoreModel \u5be6\u4f8b\u7684\u6642\u5019\u5c31\u5c07\u5546\u5e97\u8207\u5546\u54c1\u5efa\u7acb\u95dc\u806f\u95dc\u4fc2\uff0c\u9019\u6a23\u53ef\u4ee5\u7701\u53bb\u6602\u8cb4\u7684\u8a08\u7b97\u6210\u672c\n    items = db.relationship('ItemModel', lazy='dynamic') # \u56de\u50b3\u500b query builder \u5be6\u4f8b\n\n    def __init__(self, name):\n        self.name = name\n    \n    def json(self):\n        return {'name': self.name, 'items': [item.json() for item in self.items.all()]}\n    \n    @classmethod\n    def find_by_name(cls, name):\n        # SELECT * FROM items WHERE name=name LIMIT 1\n        return cls.query.filter_by(name=name).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = 'stores'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))      # \u4e0d\u8981\u5275\u5efa StoreModel \u5be6\u4f8b\u7684\u6642\u5019\u5c31\u5c07\u5546\u5e97\u8207\u5546\u54c1\u5efa\u7acb\u95dc\u806f\u95dc\u4fc2\uff0c\u9019\u6a23\u53ef\u4ee5\u7701\u53bb\u6602\u8cb4\u7684\u8a08\u7b97\u6210\u672c     items = db.relationship('ItemModel', lazy='dynamic') # \u56de\u50b3\u500b query builder \u5be6\u4f8b      def __init__(self, name):         self.name = name          def json(self):         return {'name': self.name, 'items': [item.json() for item in self.items.all()]}          @classmethod     def find_by_name(cls, name):         # SELECT * FROM items WHERE name=name LIMIT 1         return cls.query.filter_by(name=name).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section6/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n    \n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n    \n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = 'users'      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80))     password = db.Column(db.String(80))           def __init__(self, username, password):         self.username = username         self.password = password      @classmethod     def find_by_username(cls, username):         return cls.query.filter_by(username=username).first()          @classmethod     def find_by_id(cls, _id):         return cls.query.filter_by(id=_id).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section6/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section6/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom flask_jwt import jwt_required\nfrom models.item import ItemModel\n</pre> from flask_restful import Resource, reqparse from flask_jwt import jwt_required from models.item import ItemModel In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('price',\n        type=float,\n        required=True,\n        help=\"This field cannot be blank!\"\n    )\n    parser.add_argument('store_id',\n        type=int,\n        required=True,\n        help=\"Every item needs a store id.\"\n    )\n\n    @jwt_required()\n    def get(self, name):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item.json()\n        return {'message': 'Item not found'}, 400\n\n    def post(self, name):\n        if ItemModel.find_by_name(name):\n            return {'message': f\"An item with name {name} already exists.\"}, 400\n        \n        data = Item.parser.parse_args()\n        item = ItemModel(name, **data)\n        \n        try:\n            item.save_to_db()\n        except:\n            return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error\n        return item.json(), 201\n\n    def delete(self, name):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n        return {'message': 'Item deleted'}\n\n    def put(self, name):\n        data = Item.parser.parse_args()\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = data['price']\n        else:\n            item = ItemModel(name, **data)\n        \n        item.save_to_db()\n\n        return item.json()\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument('price',         type=float,         required=True,         help=\"This field cannot be blank!\"     )     parser.add_argument('store_id',         type=int,         required=True,         help=\"Every item needs a store id.\"     )      @jwt_required()     def get(self, name):         item = ItemModel.find_by_name(name)         if item:             return item.json()         return {'message': 'Item not found'}, 400      def post(self, name):         if ItemModel.find_by_name(name):             return {'message': f\"An item with name {name} already exists.\"}, 400                  data = Item.parser.parse_args()         item = ItemModel(name, **data)                  try:             item.save_to_db()         except:             return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error         return item.json(), 201      def delete(self, name):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()         return {'message': 'Item deleted'}      def put(self, name):         data = Item.parser.parse_args()         item = ItemModel.find_by_name(name)          if item:             item.price = data['price']         else:             item = ItemModel(name, **data)                  item.save_to_db()          return item.json() In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    def get(self):\n        return {'items': [item.json() for item in ItemModel.query.all()]}\n</pre> class ItemList(Resource):     def get(self):         return {'items': [item.json() for item in ItemModel.query.all()]}"},{"location":"side-projects/restful-apis-with-flask/basics/section6/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom models.store import StoreModel\n</pre> from flask_restful import Resource, reqparse from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('name',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n\n    def get(self, name):\n        if StoreModel.find_by_name(name):\n            return store.json()\n        return {'message': 'Store not found'}, 404\n\n    def post(self, name):\n        if StoreModel.find_by_name(name):\n            return {'message': f\"A store with name {name} already exists.\"}\n        \n        store = StoreModel(name)\n        try:\n            store.save_to_db()\n        except:\n            return {'message': 'An error occurred while creating the store'}, 500\n\n        return store.json(), 201\n\n    def delete(self, name):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n\n        return {'message': 'Store deleted'}\n</pre> class Store(Resource):     parser = reqparse.RequestParser()     parser.add_argument('name',         type=str,         required=True,         help='This field cannot be blank!'     )      def get(self, name):         if StoreModel.find_by_name(name):             return store.json()         return {'message': 'Store not found'}, 404      def post(self, name):         if StoreModel.find_by_name(name):             return {'message': f\"A store with name {name} already exists.\"}                  store = StoreModel(name)         try:             store.save_to_db()         except:             return {'message': 'An error occurred while creating the store'}, 500          return store.json(), 201      def delete(self, name):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()          return {'message': 'Store deleted'} In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    def get(self):\n        return {'stores': [store.json() for store in StoreModel.query.all()]}\n</pre> class StoreList(Resource):     def get(self):         return {'stores': [store.json() for store in StoreModel.query.all()]}"},{"location":"side-projects/restful-apis-with-flask/basics/section6/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom models.user import UserModel\n</pre> from flask_restful import Resource, reqparse from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('username',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n    parser.add_argument('password',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n\n    def post(self):\n        data = UserRegister.parser.parse_args()\n\n        if UserModel.find_by_username(data['username']):\n            return {\"message\": \"A user with that username already exists.\"}, 400\n\n        user = UserModel(**data)\n        user.save_to_db()\n        return {'message': \"User created successfully.\"}, 201\n</pre> class UserRegister(Resource):     parser = reqparse.RequestParser()     parser.add_argument('username',         type=str,         required=True,         help='This field cannot be blank!'     )     parser.add_argument('password',         type=str,         required=True,         help='This field cannot be blank!'     )      def post(self):         data = UserRegister.parser.parse_args()          if UserModel.find_by_username(data['username']):             return {\"message\": \"A user with that username already exists.\"}, 400          user = UserModel(**data)         user.save_to_db()         return {'message': \"User created successfully.\"}, 201"},{"location":"side-projects/restful-apis-with-flask/basics/section8/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>from flask import Flask\nfrom flask_restful import Api\nfrom flask_jwt import JWT\n</pre> from flask import Flask from flask_restful import Api from flask_jwt import JWT In\u00a0[\u00a0]: Copied! <pre>from security import authenticate, identity\nfrom resources.user import UserRegister\nfrom resources.item import Item, ItemList\nfrom resources.store import Store, StoreList\n</pre> from security import authenticate, identity from resources.user import UserRegister from resources.item import Item, ItemList from resources.store import Store, StoreList In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///data.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # turn off the flask_sqlalchemy tracker (but not sqlalchemy)\napp.secret_key = 'kcl'\napi = Api(app)\n</pre> app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///data.db') app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # turn off the flask_sqlalchemy tracker (but not sqlalchemy) app.secret_key = 'kcl' api = Api(app) In\u00a0[\u00a0]: Copied! <pre>jwt = JWT(app, authenticate, identity) # /auth\n</pre> jwt = JWT(app, authenticate, identity) # /auth In\u00a0[\u00a0]: Copied! <pre>api.add_resource(Store, '/store/&lt;string:name&gt;')\napi.add_resource(StoreList, '/stores')\napi.add_resource(Item, '/item/&lt;string:name&gt;')\napi.add_resource(ItemList, '/items')\n</pre> api.add_resource(Store, '/store/') api.add_resource(StoreList, '/stores') api.add_resource(Item, '/item/') api.add_resource(ItemList, '/items') In\u00a0[\u00a0]: Copied! <pre>api.add_resource(UserRegister, '/register')\n</pre> api.add_resource(UserRegister, '/register') In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    from db import db\n    db.init_app(app)\n    app.run(port=5000, debug=True)\n</pre> if __name__ == '__main__':     from db import db     db.init_app(app)     app.run(port=5000, debug=True)"},{"location":"side-projects/restful-apis-with-flask/basics/section8/db/","title":"Db","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_sqlalchemy import SQLAlchemy\n</pre> from flask_sqlalchemy import SQLAlchemy In\u00a0[\u00a0]: Copied! <pre>db = SQLAlchemy()\n</pre> db = SQLAlchemy()"},{"location":"side-projects/restful-apis-with-flask/basics/section8/run/","title":"Run","text":"In\u00a0[\u00a0]: Copied! <pre>from app import app\nfrom db import db\n</pre> from app import app from db import db In\u00a0[\u00a0]: Copied! <pre>db.init_app(app)\n</pre> db.init_app(app) In\u00a0[\u00a0]: Copied! <pre>@app.before_first_request\ndef create_tables():\n    db.create_all()\n</pre> @app.before_first_request def create_tables():     db.create_all()"},{"location":"side-projects/restful-apis-with-flask/basics/section8/security/","title":"Security","text":"In\u00a0[\u00a0]: Copied! <pre>from werkzeug.security import safe_str_cmp\nfrom models.user import UserModel\n</pre> from werkzeug.security import safe_str_cmp from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>def authenticate(username, password):\n    user = UserModel.find_by_username(username)\n    if user and safe_str_cmp(user.password, password):\n        return user\n</pre> def authenticate(username, password):     user = UserModel.find_by_username(username)     if user and safe_str_cmp(user.password, password):         return user In\u00a0[\u00a0]: Copied! <pre>def identity(payload):\n    user_id = payload['identity']\n    return UserModel.find_by_id(user_id)\n</pre> def identity(payload):     user_id = payload['identity']     return UserModel.find_by_id(user_id)"},{"location":"side-projects/restful-apis-with-flask/basics/section8/models/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section8/models/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class ItemModel(db.Model):\n    __tablename__ = 'items'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n    price = db.Column(db.Float(precision=2))\n\n    store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))\n    store = db.relationship('StoreModel')\n\n    def __init__(self, name, price, store_id):\n        self.name = name\n        self.price = price\n        self.store_id = store_id\n    \n    def json(self):\n        return {'name': self.name, 'price': self.price}\n    \n    @classmethod\n    def find_by_name(cls, name):\n        # SELECT * FROM items WHERE name=name LIMIT 1\n        return cls.query.filter_by(name=name).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class ItemModel(db.Model):     __tablename__ = 'items'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))     price = db.Column(db.Float(precision=2))      store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))     store = db.relationship('StoreModel')      def __init__(self, name, price, store_id):         self.name = name         self.price = price         self.store_id = store_id          def json(self):         return {'name': self.name, 'price': self.price}          @classmethod     def find_by_name(cls, name):         # SELECT * FROM items WHERE name=name LIMIT 1         return cls.query.filter_by(name=name).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section8/models/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class StoreModel(db.Model):\n    __tablename__ = 'stores'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n\n    # \u4e0d\u8981\u5275\u5efa StoreModel \u5be6\u4f8b\u7684\u6642\u5019\u5c31\u5c07\u5546\u5e97\u8207\u5546\u54c1\u5efa\u7acb\u95dc\u806f\u95dc\u4fc2\uff0c\u9019\u6a23\u53ef\u4ee5\u7701\u53bb\u6602\u8cb4\u7684\u8a08\u7b97\u6210\u672c\n    items = db.relationship('ItemModel', lazy='dynamic') # \u56de\u50b3\u500b query builder \u5be6\u4f8b\n\n    def __init__(self, name):\n        self.name = name\n    \n    def json(self):\n        return {'name': self.name, 'items': [item.json() for item in self.items.all()]}\n    \n    @classmethod\n    def find_by_name(cls, name):\n        # SELECT * FROM items WHERE name=name LIMIT 1\n        return cls.query.filter_by(name=name).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete_from_db(self):\n        db.session.delete(self)\n        db.session.commit()\n</pre> class StoreModel(db.Model):     __tablename__ = 'stores'      id = db.Column(db.Integer, primary_key=True)     name = db.Column(db.String(80))      # \u4e0d\u8981\u5275\u5efa StoreModel \u5be6\u4f8b\u7684\u6642\u5019\u5c31\u5c07\u5546\u5e97\u8207\u5546\u54c1\u5efa\u7acb\u95dc\u806f\u95dc\u4fc2\uff0c\u9019\u6a23\u53ef\u4ee5\u7701\u53bb\u6602\u8cb4\u7684\u8a08\u7b97\u6210\u672c     items = db.relationship('ItemModel', lazy='dynamic') # \u56de\u50b3\u500b query builder \u5be6\u4f8b      def __init__(self, name):         self.name = name          def json(self):         return {'name': self.name, 'items': [item.json() for item in self.items.all()]}          @classmethod     def find_by_name(cls, name):         # SELECT * FROM items WHERE name=name LIMIT 1         return cls.query.filter_by(name=name).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()      def delete_from_db(self):         db.session.delete(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section8/models/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from db import db\n</pre> from db import db In\u00a0[\u00a0]: Copied! <pre>class UserModel(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n    \n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n    \n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n</pre> class UserModel(db.Model):     __tablename__ = 'users'      id = db.Column(db.Integer, primary_key=True)     username = db.Column(db.String(80))     password = db.Column(db.String(80))           def __init__(self, username, password):         self.username = username         self.password = password      @classmethod     def find_by_username(cls, username):         return cls.query.filter_by(username=username).first()          @classmethod     def find_by_id(cls, _id):         return cls.query.filter_by(id=_id).first()      def save_to_db(self):         db.session.add(self)         db.session.commit()"},{"location":"side-projects/restful-apis-with-flask/basics/section8/resources/__init__/","title":"init","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section8/resources/item/","title":"Item","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom flask_jwt import jwt_required\nfrom models.item import ItemModel\n</pre> from flask_restful import Resource, reqparse from flask_jwt import jwt_required from models.item import ItemModel In\u00a0[\u00a0]: Copied! <pre>class Item(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('price',\n        type=float,\n        required=True,\n        help=\"This field cannot be blank!\"\n    )\n    parser.add_argument('store_id',\n        type=int,\n        required=True,\n        help=\"Every item needs a store id.\"\n    )\n\n    @jwt_required()\n    def get(self, name):\n        item = ItemModel.find_by_name(name)\n        if item:\n            return item.json()\n        return {'message': 'Item not found'}, 400\n\n    def post(self, name):\n        if ItemModel.find_by_name(name):\n            return {'message': f\"An item with name {name} already exists.\"}, 400\n        \n        data = Item.parser.parse_args()\n        item = ItemModel(name, **data)\n        \n        try:\n            item.save_to_db()\n        except:\n            return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error\n        return item.json(), 201\n\n    def delete(self, name):\n        item = ItemModel.find_by_name(name)\n        if item:\n            item.delete_from_db()\n        return {'message': 'Item deleted'}\n\n    def put(self, name):\n        data = Item.parser.parse_args()\n        item = ItemModel.find_by_name(name)\n\n        if item:\n            item.price = data['price']\n        else:\n            item = ItemModel(name, **data)\n        \n        item.save_to_db()\n\n        return item.json()\n</pre> class Item(Resource):     parser = reqparse.RequestParser()     parser.add_argument('price',         type=float,         required=True,         help=\"This field cannot be blank!\"     )     parser.add_argument('store_id',         type=int,         required=True,         help=\"Every item needs a store id.\"     )      @jwt_required()     def get(self, name):         item = ItemModel.find_by_name(name)         if item:             return item.json()         return {'message': 'Item not found'}, 400      def post(self, name):         if ItemModel.find_by_name(name):             return {'message': f\"An item with name {name} already exists.\"}, 400                  data = Item.parser.parse_args()         item = ItemModel(name, **data)                  try:             item.save_to_db()         except:             return {'message': 'an error occurs inserting the item.'}, 500 # Internal Server Error         return item.json(), 201      def delete(self, name):         item = ItemModel.find_by_name(name)         if item:             item.delete_from_db()         return {'message': 'Item deleted'}      def put(self, name):         data = Item.parser.parse_args()         item = ItemModel.find_by_name(name)          if item:             item.price = data['price']         else:             item = ItemModel(name, **data)                  item.save_to_db()          return item.json() In\u00a0[\u00a0]: Copied! <pre>class ItemList(Resource):\n    def get(self):\n        return {'items': [item.json() for item in ItemModel.query.all()]}\n</pre> class ItemList(Resource):     def get(self):         return {'items': [item.json() for item in ItemModel.query.all()]}"},{"location":"side-projects/restful-apis-with-flask/basics/section8/resources/store/","title":"Store","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom models.store import StoreModel\n</pre> from flask_restful import Resource, reqparse from models.store import StoreModel In\u00a0[\u00a0]: Copied! <pre>class Store(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('name',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n\n    def get(self, name):\n        if StoreModel.find_by_name(name):\n            return store.json()\n        return {'message': 'Store not found'}, 404\n\n    def post(self, name):\n        if StoreModel.find_by_name(name):\n            return {'message': f\"A store with name {name} already exists.\"}\n        \n        store = StoreModel(name)\n        try:\n            store.save_to_db()\n        except:\n            return {'message': 'An error occurred while creating the store'}, 500\n\n        return store.json(), 201\n\n    def delete(self, name):\n        store = StoreModel.find_by_name(name)\n        if store:\n            store.delete_from_db()\n\n        return {'message': 'Store deleted'}\n</pre> class Store(Resource):     parser = reqparse.RequestParser()     parser.add_argument('name',         type=str,         required=True,         help='This field cannot be blank!'     )      def get(self, name):         if StoreModel.find_by_name(name):             return store.json()         return {'message': 'Store not found'}, 404      def post(self, name):         if StoreModel.find_by_name(name):             return {'message': f\"A store with name {name} already exists.\"}                  store = StoreModel(name)         try:             store.save_to_db()         except:             return {'message': 'An error occurred while creating the store'}, 500          return store.json(), 201      def delete(self, name):         store = StoreModel.find_by_name(name)         if store:             store.delete_from_db()          return {'message': 'Store deleted'} In\u00a0[\u00a0]: Copied! <pre>class StoreList(Resource):\n    def get(self):\n        return {'stores': [store.json() for store in StoreModel.query.all()]}\n</pre> class StoreList(Resource):     def get(self):         return {'stores': [store.json() for store in StoreModel.query.all()]}"},{"location":"side-projects/restful-apis-with-flask/basics/section8/resources/user/","title":"User","text":"In\u00a0[\u00a0]: Copied! <pre>from flask_restful import Resource, reqparse\nfrom models.user import UserModel\n</pre> from flask_restful import Resource, reqparse from models.user import UserModel In\u00a0[\u00a0]: Copied! <pre>class UserRegister(Resource):\n    parser = reqparse.RequestParser()\n    parser.add_argument('username',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n    parser.add_argument('password',\n        type=str,\n        required=True,\n        help='This field cannot be blank!'\n    )\n\n    def post(self):\n        data = UserRegister.parser.parse_args()\n\n        if UserModel.find_by_username(data['username']):\n            return {\"message\": \"A user with that username already exists.\"}, 400\n\n        user = UserModel(**data)\n        user.save_to_db()\n        return {'message': \"User created successfully.\"}, 201\n</pre> class UserRegister(Resource):     parser = reqparse.RequestParser()     parser.add_argument('username',         type=str,         required=True,         help='This field cannot be blank!'     )     parser.add_argument('password',         type=str,         required=True,         help='This field cannot be blank!'     )      def post(self):         data = UserRegister.parser.parse_args()          if UserModel.find_by_username(data['username']):             return {\"message\": \"A user with that username already exists.\"}, 400          user = UserModel(**data)         user.save_to_db()         return {'message': \"User created successfully.\"}, 201"},{"location":"side-projects/restful-apis-with-flask/basics/section9/","title":"\u5c07 Flask \u61c9\u7528\u7a0b\u5f0f\u90e8\u7f72\u5728 Ubuntu 16.04 Server","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u5fc5\u9808\u8a3b\u518a DigitalOcean \u5e33\u865f\u4e26\u5728\u4e0a\u9762\u79df\u7528\u4e00\u500b\u865b\u64ec\u4e3b\u6a5f\uff0c\u7248\u672c\u70ba Ubuntu 16.04 Server\u3002\u5982\u4f55\u4ee5 SSH \u9023\u7dda\u4e0d\u662f\u8ab2\u7a0b\u91cd\u9ede\uff0c\u56e0\u6b64\u6211\u5011\u5728\u6b64\u5148\u7565\u904e\u3002\u9023\u7dda\u5f8c\u7dca\u63a5\u8457\u9032\u884c\u5e7e\u9805\u4e8b\u524d\u6e96\u5099\uff1a</p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#_1","title":"\u66f4\u65b0\u5009\u5eab\u6e05\u55ae","text":"<pre><code># apt-get update\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#os","title":"\u5728 OS \u4e0a\u5275\u5efa\u65b0\u4f7f\u7528\u8005","text":"<pre><code># adduser &lt;username&gt;\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#super-user","title":"\u7d66\u4e88 super user \u6b0a\u9650","text":"<p>\u9032\u5165 <code>/etc/sudoers</code> \u6a94\u6848\uff1a <pre><code># visudo\n</code></pre></p> <p>\u5728 \"User privilege specification\" \u4e0b\u65b9\u66ff\u65b0\u4f7f\u7528\u8005\u52a0\u5165 super user \u7684\u6b0a\u9650\uff1a <pre><code>&lt;username&gt; ALL=(ALL:ALL) ALL\n</code></pre></p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#1-postresql","title":"1. \u5b89\u88dd\u4e26\u8a2d\u5b9a PostreSQL \u8cc7\u6599\u5eab","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section9/#postgresql","title":"\u5b89\u88dd PostgreSQL","text":"<pre><code># apt-get install postgresql postgresql-contrib\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#postgres","title":"\u5207\u63db\u6210 <code>postgres</code> \u4f7f\u7528\u8005","text":"<pre><code># sudo -i -u postgres\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#postgresql_1","title":"\u66ff\u65b0\u4f7f\u7528\u8005\uff0c\u5275\u5efa PostgreSQL \u7576\u4e2d\u7684\u5e33\u865f\u548c\u8cc7\u6599\u5eab","text":"<pre><code>$ createuser &lt;username&gt; -P\n$ createdb &lt;username&gt;\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#postgresql_2","title":"\u5f37\u5236\u4ee5\u5bc6\u78bc\u767b\u5165 PostgreSQL","text":"<p>\u9032\u5165 <code>pg_hba.conf</code> \u914d\u7f6e\u6a94\uff1a <pre><code>$ nano /etc/postgresql/10/main/pg_hba.conf\n</code></pre></p> <p>\u5c07 <pre><code>local all all peer\n</code></pre> \u6539\u70ba <pre><code>local all all md5\n</code></pre></p> <p>\u5b8c\u6210\u5f8c\u8df3\u51fa\u914d\u7f6e\u6a94\uff0c\u63a5\u8457\u6539\u70ba\u65b0\u4f7f\u7528\u8005\u4f86\u64cd\u4f5c\u3002</p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#2-nginx","title":"2. \u5b89\u88dd\u4e26\u8a2d\u5b9a Nginx \u4f3a\u670d\u5668","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section9/#nginx","title":"\u5b89\u88dd Nginx","text":"<pre><code>$ sudo apt-get install nginx\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#nginx-ssh","title":"\u958b\u555f\u9632\u706b\u7246\u4e26\u5141\u8a31 <code>nginx</code> \u548c <code>ssh</code>","text":"<pre><code>$ sudo ufw enable\n$ sudo ufw allow 'Nginx HTTP'\n$ sudo ufw allow ssh\n</code></pre>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#flask-nginx","title":"\u66ff\u6211\u5011\u7684 Flask \u61c9\u7528\u7a0b\u5f0f\u52a0\u5165 Nginx \u914d\u7f6e\u6a94","text":"<p>\u5275\u5efa\u4e26\u9032\u5165 <code>items-rest.conf</code> \u914d\u7f6e\u6a94\uff1a <pre><code>$ sudo nano /etc/nginx/sites-available/items-rest.conf\n</code></pre></p> <p>\u8f38\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a <pre><code>server {\n    listen 80;\n    real_ip_header X-Forwarded-For;\n    set_real_ip_from 127.0.0.1;\n    server_name localhost;\n\n    location / {\n        include uwsgi_params;\n        uwsgi_pass unix:/var/www/html/items-rest/socket.sock;\n        uwsgi_modifier1 30;\n    }\n\n    error_page 404 /404.html;\n    location = 404.html {\n        root /usr/share/nginx/html;\n    }\n\n    error_page 500 502  503 504 50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n</code></pre></p> <p>\u5b8c\u6210\u5f8c\u8df3\u51fa\u914d\u7f6e\u6a94\uff0c\u63a5\u8457\u5efa\u7acb soft link\uff0c\u555f\u7528\u914d\u7f6e\uff1a <pre><code>$ sudo ln -s /etc/nginx/sites-available/items-rest.conf /etc/nginx/sites-enabled/\n</code></pre></p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#3-flask","title":"3. \u8a2d\u5b9a Flask \u61c9\u7528\u7a0b\u5f0f\u6240\u9700\u57f7\u884c\u74b0\u5883","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section9/#_2","title":"\u5275\u5efa\u5c08\u6848\u76ee\u9304\u4e26\u7d66\u4e88\u9069\u7576\u6b0a\u9650","text":"<pre><code>$ sudo mkdir /var/www/html/items-rest\n$ sudo chown &lt;username&gt;:&lt;username&gt; /var/www/html/items-rest\n</code></pre> <p>\u5b8c\u6210\u5f8c\u9032\u5165\u8a72\u76ee\u9304\uff1a <pre><code>$ cd /var/www/html/items-rest\n</code></pre></p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#_3","title":"\u8a2d\u5b9a\u5c08\u6848\u6240\u9700\u74b0\u5883","text":"<p>\u4e0b\u8f09\u5c08\u6848\u5167\u5bb9\u4e26\u5275\u5efa\u65e5\u8a8c\u6a94\u76ee\u9304\uff1a <pre><code>$ git clone https://github.com/schoolofcode-me/stores-rest-api.git .\n$ mkdir log\n</code></pre></p> <p>\u5efa\u7acb\u865b\u64ec\u74b0\u5883\u4e26\u5b89\u88dd\u6240\u9700\u5957\u4ef6\uff1a <pre><code>$ sudo apt-get install python-pip python3-dev libpq-dev\n$ pip install virtualenv\n$ virtualenv venv --python=python3.6\n$ source venv/bin/activate\n(venv)$ pip install -r requirements.txt\n</code></pre></p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#4-uwsgi","title":"4. \u8a2d\u5b9a uWSGI \u4f3a\u670d\u5668","text":""},{"location":"side-projects/restful-apis-with-flask/basics/section9/#uwsgi_items_restservice-ubuntu","title":"\u5275\u5efa <code>uwsgi_items_rest.service</code> Ubuntu \u670d\u52d9","text":"<p>\u5275\u5efa\u4e26\u9032\u5165 <code>uwsgi_items_rest.service</code> \u6a94\uff1a <pre><code>$ sudo nano /etc/systemd/system/uwsgi_items_rest.service\n</code></pre></p> <p>\u8f38\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a <pre><code>[Unit]\nDescription=uWSGI items rest\n\n[Service]\nEnvironment=DATABASE_URL=postgres://jose:1234@localhost:5432/jose\nExecStart=/var/www/html/items-rest/venv/bin/uwsgi --master --emperor /var/www/html/items-rest/uwsgi.ini --die-on-term --uid jose --gid jose --logto /var/www/html/items-rest/log/emperor.log\nRestart=always\nKillSignal=SIGQUIT\nType=notify\nNotifyAccess=all\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>\u5b8c\u6210\u5f8c\u8df3\u51fa\u6a94\u6848\u3002</p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#uwsgiini","title":"\u4fee\u6539 <code>uwsgi.ini</code> \u914d\u7f6e\u6a94","text":"<p>\u9032\u5165\u5c08\u6848\u5167\u7684 <code>uwsgi.ini</code> \u914d\u7f6e\u6a94\uff1a <pre><code>$ nano uwsgi.ini\n</code></pre></p> <p>\u8f38\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a <pre><code>[uwsgi]\nbase = /var/www/html/items-rest\napp = run\nmodule = %(app)\n\nhome = %(base)/venv\npythonpath = %(base)\n\nsocket = %(base)/socket.sock\n\nchmod-socket = 777\n\nprocesses = 8\n\nthreads = 8\n\nharakiri = 15\n\ncallable = app\n\nlogto = /var/www/html/items-rest/log/%n.log\n</code></pre></p> <p>\u5b8c\u6210\u5f8c\u8df3\u51fa\u914d\u7f6e\u6a94\u3002</p>"},{"location":"side-projects/restful-apis-with-flask/basics/section9/#5-flask","title":"5. \u555f\u52d5 Flask \u61c9\u7528\u7a0b\u5f0f","text":"<p>\u522a\u9664 Nginx \u9810\u8a2d\u914d\u7f6e\u6a94\uff0c\u907f\u514d\u8b80\u53d6\u932f\u8aa4\u7684\u914d\u7f6e\u6a94\uff0c\u63a5\u8457 reload \u4e26 restart\uff1a <pre><code>$ sudo rm /etc/nginx/sites-enabled/default\n$ sudo systemctl reload nginx \n$ sudo systemctl restart nginx\n</code></pre></p> <p>\u555f\u52d5 <code>uwsgi_items_rest</code> \u670d\u52d9\uff1a <pre><code>$ sudo systemctl start uwsgi_items_rest\n</code></pre></p> <p>\u5b8c\u6210\uff01</p>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/","title":"Advanced","text":""},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-1-course-preparations","title":"Section 1: Course Preparations","text":"<p>Preparations for the course:</p> <ul> <li>Simplified authentication mechanism.</li> <li>Added type hinting.</li> <li>Unified code style.</li> <li>Changed all <code>Resource</code> methods to class methods (using <code>@classmethod</code>).</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-2-marshmallow-integration","title":"Section 2: Marshmallow Integration","text":"<p>Introducing <code>marshmallow</code>, <code>flask-marshmallow</code>, and <code>marshmallow-sqlalchemy</code>:</p> <ul> <li>Simplified request parsing, <code>Model</code> object creation, and JSON responses by defining <code>Schema</code> for each <code>Resource</code>.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-3-email-verification","title":"Section 3: Email Verification","text":"<ul> <li>Implemented user email verification process (using Mailgun).</li> <li>Used <code>.env</code> files to store sensitive data.</li> <li>Returned <code>.html</code> files in <code>Flask-RESTful</code> using <code>make_response()</code> and <code>render_template()</code>.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-4-optimized-email-verification","title":"Section 4: Optimized Email Verification","text":"<p>Optimized the email verification process:</p> <ul> <li>Added expiration for verification and resend functionality.</li> <li>Refactored project structure by treating <code>confirmation</code> as a resource.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-6-secure-configuration-and-file-uploads","title":"Section 6: Secure Configuration and File Uploads","text":"<ul> <li>Configured the application more securely (using <code>from_object()</code> and <code>from_envvar()</code>).</li> <li>Learned the relationships between <code>WSGI</code>, <code>uwsgi</code>, <code>uWSGI</code>, and <code>Werkzeug</code>.</li> <li>Introduced <code>Flask-Uploads</code> for handling file uploads, downloads, and deletions (using <code>UploadSet</code>, <code>FileStorage</code>).</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-7-database-version-control","title":"Section 7: Database Version Control","text":"<ul> <li>Introduced <code>Flask-Migrate</code> for database version control, including adding, deleting, and modifying details.</li> <li>Common commands include <code>flask db init</code>, <code>flask db upgrade</code>, <code>flask db downgrade</code>.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-8-oauth-integration","title":"Section 8: OAuth Integration","text":"<ul> <li>Learned OAuth third-party login flow (e.g., GitHub), including authentication, authorization, and obtaining <code>access_token</code>.</li> <li>Introduced <code>Flask-OAuthlib</code>.</li> <li>Used Flask's <code>g</code> to store <code>access_token</code>.</li> <li>Allowed third-party login users to set passwords.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/advanced/#section-9-payment-integration","title":"Section 9: Payment Integration","text":"<ul> <li>Integrated <code>Stripe</code> for third-party payment processing.</li> <li>Added an \"Order\" resource and implemented many-to-many relationships using <code>Flask-SQLAlchemy</code>.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/","title":"Basics","text":""},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-3-introduction-to-flask","title":"Section 3: Introduction to Flask","text":"<ul> <li>Introduction to the Flask web framework, using decorators to set up application routes.</li> <li>Understanding common HTTP request methods: GET, POST, PUT, DELETE.</li> <li>Understanding common HTTP status codes: 200, 201, 202, 401, 404.</li> <li>Understanding RESTful API design principles focusing on \"resources\" and statelessness.</li> <li>Implementing a RESTful API server application.</li> <li>Testing APIs using the Postman application.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-4-flask-restful-and-jwt","title":"Section 4: Flask-RESTful and JWT","text":"<ul> <li>Implementing RESTful API server applications using <code>Flask-RESTful</code>.</li> <li>Implementing JSON Web Token (JWT) authentication using <code>Flask-JWT</code>.</li> <li>Parsing user input JSON data using <code>RequestParser</code>.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-5-database-integration-with-sqlite","title":"Section 5: Database Integration with SQLite","text":"<ul> <li>Introducing <code>sqlite3</code> to store user and item information in a database.</li> <li>Implementing user registration functionality.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-6-database-integration-with-sqlalchemy","title":"Section 6: Database Integration with SQLAlchemy","text":"<ul> <li>Introducing <code>Flask-SQLAlchemy</code> to interact with the database using ORM.</li> <li>Adding store information with a one-to-many relationship to items.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-7-deploying-to-heroku","title":"Section 7: Deploying to Heroku","text":"<p>Deploying the Flask application to Heroku and using Heroku's PostgreSQL. Steps:</p> <ol> <li>Modify the project locally (e.g., add <code>Procfile</code>, <code>runtime.txt</code>, <code>uwsgi.ini</code>), then <code>commit</code> and <code>push</code> to the specified GitHub repo.</li> <li>Register on Heroku, create an application, connect it to the GitHub repo, and add the <code>heroku/python</code> buildpack and <code>Heroku Postgres</code> add-on.</li> <li>Install the Heroku CLI locally (see here) and log in using <code>heroku login</code>.</li> <li>Add a Heroku remote using <code>heroku git:remote -a &lt;app-name&gt;</code>.</li> <li>Deploy the project by pushing the <code>basics/section8</code> subdirectory to Heroku using <code>git subtree push --prefix basics/section8 heroku master</code>.</li> </ol> <p>Testing: Access here to retrieve all stores and their items in the database, returned in JSON format.</p>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-8-deploying-to-digitalocean","title":"Section 8: Deploying to DigitalOcean","text":"<p>Deploying the Flask application to a DigitalOcean Droplet. Steps:</p> <ol> <li>Register on DigitalOcean, create a Droplet with Ubuntu 16.04, set up SSH, and connect using PuTTY.</li> <li>Create a new user on the operating system.</li> <li>Install and configure PostgreSQL, including creating a new user and database with appropriate permissions.</li> <li>Install and configure the Nginx server, including firewall settings, error pages, and uwsgi parameters.</li> <li>Set up a Python virtual environment, install required packages, and clone the project from GitHub.</li> <li>Configure an Ubuntu service to run the uwsgi server, including log directories, processes, and threads.</li> </ol> <p>Testing: Access here (created on 2020/05/30) to retrieve all stores and their items in the database, returned in JSON format.</p>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-9-domain-and-https","title":"Section 9: Domain and HTTPS","text":"<p>Book</p> <ul> <li>Registering a domain and configuring DNS servers.</li> <li>Obtaining an SSL certificate for HTTPS communication and configuring Nginx.</li> </ul>"},{"location":"side-projects/restful-apis-with-flask/docs/basics/#section-11-advanced-jwt-features","title":"Section 11: Advanced JWT Features","text":"<p>Introducing <code>Flask-JWT-Extended</code>:</p> <ul> <li>Implementing token-refreshing to improve user experience by avoiding frequent logins while requiring re-login for critical actions for security (using <code>@jwt_refresh_token_required</code>, <code>create_refresh_token()</code>, <code>create_access_token()</code>).</li> <li>Responding with appropriate data based on user roles (visitor, user, admin) using <code>@jwt.user_claims_loader</code>, <code>@jwt_optional</code>, <code>get_jwt_claims()</code>.</li> <li>Returning specific error messages for token-related issues using <code>@jwt.expired_token_loader</code>, <code>@jwt.invalid_token_loader</code>, <code>@jwt.needs_fresh_token_loader</code>.</li> <li>Implementing a logout mechanism using a blacklist (with <code>@jwt.token_in_blacklist_loader</code>, <code>get_raw_jwt()</code>).</li> </ul> <p>Book</p>"},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"}]}