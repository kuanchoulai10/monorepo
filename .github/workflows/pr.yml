name: Advertising PR Workflow
run-name: advertising-pr-workflow

on:
  pull_request:
    branches:
      - main
    paths:
      - 'advertising/**'

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_LOG: DEBUG

jobs:
  changes:
    name: Check Paths for Changed Files
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      pull-requests: read
    outputs:
      dbt: ${{ steps.filter.outputs.dbt }}
      sink: ${{ steps.filter.outputs.sink }}
      dev: ${{ steps.filter.outputs.dev }}
      prod: ${{ steps.filter.outputs.prod }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dbt:
              - 'advertising/dbt/**'
            sink:
              - 'advertising/infrastructure/data-sink/**'
            dev:
              - 'advertising/infrastructure/data-dev/**'
            prod:
              - 'advertising/infrastructure/data-prod/**'

  dev-tf-plan:
    name: Terraform Plan - Development
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      pull-requests: write
    needs: changes
    if: ${{ needs.changes.outputs.dev == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pwd
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Upload Terraform Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: tf-files-upload
        with:
          speculative: true
          directory: "./advertising/infrastructure/data-dev/"
          workspace: "advertising-data-dev"
      - name: Run Terraform Plan
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: tf-plan
        with:
          plan_only: true
          workspace: "advertising-data-dev"
          configuration_version: ${{ steps.tf-files-upload.outputs.configuration_version_id }}
      - name: Get Terraform Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: tf-plan-output
        with:
          plan: ${{ fromJSON(steps.tf-plan.outputs.payload).data.relationships.plan.data.id }}
      - name: Comment Terraform Plan Output
        uses: actions/github-script@v6
        id: tf-plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.tf-plan-output.outputs.add }} to add, ${{ steps.tf-plan-output.outputs.change }} to change, ${{ steps.terraform-plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.terraform-plan.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  dev-tf-apply:
    name: Terraform Apply - Development
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: dev-tf-plan
    steps:
      - run: echo "Terraform Apply - Development"

  prod-tf-plan:
    name: Terraform Plan - Production
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: changes
    if: ${{ needs.changes.outputs.prod == 'true' }}
    steps:
      - run: echo "Terraform Plan - Production"

  sink-tf-plan:
    name: Terraform Plan - Sink
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: changes
    if: ${{ needs.changes.outputs.sink == 'true' }}
    steps:
      - run: echo "Terraform Plan - Sink"

  sink-tf-apply:
    name: Terraform Apply - Sink
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: sink-tf-plan
    steps:
      - run: echo "Terraform Apply - Sink"

  sql-lint-check:
    name: SQL Lint Check
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [dev-tf-apply, sink-tf-apply]
    if: ${{ needs.changes.outputs.dbt == 'true' }}
    steps:
      - run: echo "SQL Lint Check"

  dbt-ci-job:
    name: dbt CI job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: sql-lint-check
    steps:
      - run: echo "dbt CI job"

  # sink-terraform-plan:
  #   name: Sink Terraform Plan
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: /advertising/infrastructure/data-sink/
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Upload Terraform Configuration
  #       uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
  #       id: tf-files-upload
  #       with:
  #         speculative: true
  #         directory: "advertising/infrastructure/"
  #         workspace: "advertising-data-dev"

  #     - name: Terraform Plan
  #       uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
  #       id: terraform-plan
  #       with:
  #         plan_only: true
  #         workspace: "advertising-data-dev"
  #         configuration_version: ${{ steps.tf-files-upload.outputs.configuration_version_id }}
      
  #     - name: Get Terraform Plan Output
  #       uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
  #       id: terraform-plan-output
  #       with:
  #         plan: ${{ fromJSON(steps.terraform-plan.outputs.payload).data.relationships.plan.data.id }}
      
  #     - name: Comment Terraform Plan Output
  #       uses: actions/github-script@v6
  #       id: terraform-plan-comment
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           // 1. Retrieve existing bot comments for the PR
  #           const { data: comments } = await github.rest.issues.listComments({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #           });
  #           const botComment = comments.find(comment => {
  #             return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
  #           });
  #           const output = `#### Terraform Cloud Plan Output
  #              \`\`\`
  #              Plan: ${{ steps.terraform-plan-output.outputs.add }} to add, ${{ steps.terraform-plan-output.outputs.change }} to change, ${{ steps.terraform-plan-output.outputs.destroy }} to destroy.
  #              \`\`\`
  #              [Terraform Cloud Plan](${{ steps.terraform-plan.outputs.run_link }})
  #              `;
  #           // 3. Delete previous comment so PR timeline makes sense
  #           if (botComment) {
  #             github.rest.issues.deleteComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: botComment.id,
  #             });
  #           }
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           });

